A COMPUTABLE ANALYSIS OF VARIABLE WORDS THEOREMS

arXiv:1710.11219v2 [math.LO] 18 May 2018

LU LIU, BENOIT MONIN, AND LUDOVIC PATEY
Abstract. The Carlson-Simpson lemma is a combinatorial statement occurring in the proof of the Dual
Ramsey theorem. Formulated in terms of variable words, it informally asserts that given any finite coloring
of the strings, there is an infinite sequence with infinitely many variables such that for every valuation, some
specific set of initial segments is homogeneous. Friedman, Simpson, and Montalban asked about its reverse
mathematical strength. We study the computability-theoretic properties and the reverse mathematics of
this statement, and relate it to the finite union theorem. In particular, we prove the Ordered Variable word
for binary strings in ACA0 .

1. Introduction
k

∞

Let (N) and (N) denote the set of partitions of N into exactly k and infinitely many non-empty pieces,
respectively. For X ∈ (N)∞ , (X)k is the set of all Y ∈ (N)k which are coarser than X.
Statement 1.1 (Dual Ramsey theorem). DRTk is the statement “If (N)k is colored with finitely many Borel
colors, then there is some X ∈ (N)∞ such that (X)k is monochromatic”.
The Dual Ramsey theorem was proven by Carlson and Simpson [1], and studied from a reverse mathematical viewpoint by Slaman [10], Miller and Solomon [6] and Dzhafarov et al. [3]. In this paper, we shall
focus on a combinatorial lemma used by Carlson and Simpson to prove the Dual Ramsey theorem. This
lemma can be formulated in terms of variable words.
Definition 1.2 (Variable word). An infinite variable word on a finite alphabet A is an ω-sequence W of
elements of A ∪ {xi : i ∈ N} in which all variables occur at least once, and finitely often. Moreover, the
first occurrence of xi comes before the first occurrence of xi+1 . A finite variable word is an initial segment
of an infinite variable word. A finite or infinite variable word is ordered if moreover all occurences of xi
come before any occurrence of xi+1 . Given ā = a0 a1 . . . ak−1 ∈ A<ω , we let W (ā) denote the finite A-string
obtained by replacing xi with ai in W and then truncating the result just before the first occcurence of xk .
Statement 1.3 (Variable word theorem). VW(n, r) is the statement “If A<ω is colored with r colors for
some alphabet A of cardinality n, there exists an infinite variable word W such that {W (ā) : ā ∈ A<ω } is
monochromatic. OVW(n, r) is the same statement as VW(n, r) but for ordered variable words.
In this paper, we study the computability-theoretic properties of the variable word theorems using the
framework of reverse mathematics.1
1.1. Reverse mathematics. Reverse mathematics is a vast foundational program aiming to determine
the optimal axioms to prove ordinary theorems. It uses the framework of second-order arithmetic, with
a base theory RCA0 consisting of the axioms of Robinson arithmetic, the Σ01 induction scheme and the
∆01 comprehension scheme. The system RCA0 arguably captures computable mathematics. Starting from
a proof-theoretic perspective, modern reverse mathematics tends to be seen as a framework to analyse the
computability-theoretic features of theorems. Among the distinguished statements, let us mention weak
König’s lemma (WKL), asserting that every infinite binary tree has an infinite path, the arithmetic comprehension axiom (ACA), and the Π11 comprehension axiom (Π11 CA), consisting of the comprehension scheme
restricted to arithmetic and Π11 formulas, respectively. See Simpson [9] for reference book on classical reverse
mathematics.
1The authors thank Damir Dzhafarov, Stephen Flood, Reed Solomon and Linda Brown Westrick for bringing the attention of

the authors to the Carlson-Simpson lemma, and for numerous discussions. The authors are also thankful to Denis Hirschfeldt
and Barbara Csima for showing them how to use Lovasz Local Lemma to prove lower bounds to combinatorial theorems.
1

2

LU LIU, BENOIT MONIN, AND LUDOVIC PATEY

The statements studied within this framework are mainly of the form (∀X)[Φ(X) → (∃Y )Ψ(X, Y )], where
Φ and Ψ are arithmetic formulas with set parameters, and can be considered as problems. Given a statement
P of this form, a set X such that Φ(X) holds is an instance of P, and a set Y such that Ψ(X, Y ) holds is a
solution to the P-instance X. In this paper, we shall consider exclusively statements of this kind.
Friedman and Simpson [4], and later Montalban [7], asked about the reverse mathematical strength of
the ordered variable word. The statement OVW(k, ℓ) is known to be provable in RCA0 + Π11 CA. Our main
result is a direct combinatorial proof of OVW(2, ℓ) in RCA0 + ACA.
Theorem 1.4. For every ℓ ≥ 2, RCA0 + ACA ⊢ OVW(2, ℓ).
On the lower bound hand, Miller and Solomon [6] constructed a computable instance c of OVW(2, 2) with
no ∆02 solution, and deduced that RCA0 + WKL does not prove VW(2, 2). Indeed, seeing the instance c of
OVW(2, 2) as an instance of VW(2, 2), and noticing that the jump of a solution to VW(2, 2) gives a solution
to OVW(2, 2), one can deduce that c has no low VW(2, 2)-solution. In this paper, we improve their lower
bound by constructing a computable instance of OVW(2, 2) whose solutions are of DNC degree relative to
∅′ .
1.2. Organization of the paper. In section 2, we shall give a simple proof of the ordered variable word
for binary strings (OVW(2, ℓ)) using the finite union theorem. Then, in section 3, we provide a direct
combinatorial proof of the same statement over RCA0 + ACA. Finally, in section 4, we give a new lower
bound on the strength of OVW(2, ℓ) using a computable version of Lovasz Local Lemma.
1.3. Notation. Given two sets A and B, we write A < B for the formula (∀x ∈ A)(∀y ∈ B)x < y. Given
a set A, we write A<ω for the set of finite A-valued strings. In particular, 2<ω is the set of binary strings.
We denote by Pf in (N) the collection of finite non-empty subsets of N. Given two strings σ, τ ∈ A<ω , σ ∗ τ
denotes their concatenation. We may also write στ when there is no ambiguity. Given a string or a sequence
X and some n ∈ ω, we write X↾n for the initial segment of X of length n. In particular, X↾0 is the empty
string, written ε.
2. A simple proof of the Ordered Variable Word theorem from the Finite Union Theorem
Simpson first noted a relation between Hindman’s theorem and the Carlson-Simpson lemma [1]. In this
section, we give a formal counterpart to his observation by giving a simple proof of OVW(2, ℓ) using the
Finite Union Theorem, a statement known to be equivalent to Hindman’s theorem. A variation of the proof
below was used by Dzhafarov et al. [3] to give an upper bound to the Open Dual Ramsey’s theorem. A
direct combinatorial proof of OVW(2, ℓ) in RCA0 + ACA will be given in the next section.
Definition 2.1. An IP collection is an infinite collection of finite sets I ⊆ Pf in (N) which is closed under
non-empty finite unions and contains an infinite subcollection of pairwise disjoint sets.
Note that any IP collection I necessarily contains an infinite I-computable sequence S0 < S1 < . . . .
Statement 2.2 (Finite union theorem). For every ℓ ∈ N, FUTℓ is the statement “For every coloring
c : Pf in (N) → ℓ, there is a monochromatic IP collection”. wFUT2ℓ is the statement “For every coloring
c : Pf in (N) × N → ℓ, there is an IP collection I and a color i < ℓ such that c(S, min T ) = i for every
S < T ∈ I.”
Theorem 2.3. RCA0 ⊢ ∀ℓ(FUTℓ → wFUT2ℓ ).
Proof. Assume ℓ ≥ 2, the other cases being trivial. Let f : Pf in (N) × N → ℓ be an instance of wFUT2ℓ . Note
~ be a sequence of set defined for every S ∈ Pf in (N)
that over RCA0 , FUTℓ → ACA and ACA → COH. Let R
~ to obtain an infinite R-cohesive
~
and i < ℓ by RS,i = {n ∈ N : f (S, n) = i}. Apply COH to R
set C. In
particular, for every S ∈ Pf in (N), limn∈C f (S, n) exists.
Let h : ω → C be a computable bijection. Let f˜ : Pf in (N) → ℓ be defined by f˜(S) = limn∈C f (h[S], n). f˜
is a ∆20,f ⊕C instance of FUTℓ , so by the finite union theorem, there is an IP collection I ⊆ Pf in (N). and a
color i < ℓ such that for every S ∈ I, f˜(S) = limn∈C f (h[S], n) = i. Note that for every S ∈ I, min h[S] ∈ C.
Therefore, by f -computably thinning-out the set I, we obtain an IP collection J ⊆ I such that for every
S < T ∈ J , f (h[S], min h[T ]) = i. The set {h[S] : S ∈ J } is a solution to f .


A COMPUTABLE ANALYSIS OF VARIABLE WORDS THEOREMS

3

Theorem 2.4. RCA0 ⊢ ∀ℓ(wFUT2ℓ → OVW(2, ℓ)).
Proof. Let f : 2<ω → ℓ be an instance of OVW(2, ℓ). Define an instance g : Pf in (N) × N → ℓ of wFUT2ℓ as
follows: Given some S ∈ Pf in (N) and n ∈ N, if max S < n, then set g(S, n) = f (σ), where σ is the binary
string of length n defined by σ(i) = 1 iff i ∈ S. If n ≤ max S, set g(S, n) = 0. By wFUT2ℓ , there is an IP
collection I and a color i < ℓ such that g(S, min T ) = i for every S < T ∈ I. Compute from I an infinite
increasing sequence of pairwise disjoint finite sets F0 < F1 < . . . Let W be the infinite variable word defined
by

if n ∈ F0
 1
xi if n ∈ Fi for some i ≥ 1
W (n) =

0
otherwise
The variable word W and the sequence of the F ’s is a solution to the instance f of OVW(2, ℓ).

Corollary 2.5. RCA0 ⊢ ACA+ → ∀ℓOVW(2, ℓ).
Proof. Immediate since ACA+ → ∀ℓ FUTℓ → ∀ℓ wFUT2ℓ → ∀ℓOVW(2, ℓ) over RCA0 .



3. A proof of the Ordered Variable Word theorem in ACA
The proof of the previous section gave a very coarse computability-theoretic upper bound of the Ordered
Variable Word theorem in terms of ω-jumps. In this section, we give a direct combinatorial proof of OVW(2, ℓ)
in RCA0 + ACA. Actually, every PA degree relative to ∅′ is sufficient to compute a solution of a computable
instance of OVW(2, ℓ). We thereby answer a question of Miller and Solomon [6].
Theorem 3.1. For every ℓ ∈ ω, every computable instance c of OVW(2, ℓ), every PA degree over ∅′ computes
a solution to c.
A formalization of Theorem 3.1 yields a proof of Theorem 1.4.
Proof of Theorem 1.4. The proof of Theorem 3.1 can be formalized within RCA0 + ACA. Indeed, the arguments require only arithmetical induction to be carried out, and every model of RCA0 + ACA is a model of
the statement “For every set X, there is a set of PA degree over the jump of X.”

Let us first introduce some notation. For a finite set F and a string σ ∈ 2<ω let σF be the binary string
of length |σ| defined by σF (i) = σ(i) if i 6∈ F , and σF (i) = 1 − σ(i) otherwise. Let ≤lex denote the shortlex
order on ω <ω , that is, the order with the shortest length first, and with the strings of same length sorted
lexicographically.
In what follows, fix a coloring c̃ : 2<ω → ℓ, and a string ρ ∈ 2<ω .
The main combinatorial lemma we use is Lemma 3.4. As a warm up, we first prove the following lemma
3.2, which is a consequence of Lemma 3.4 and the proof is somehow similar but much simpler. In the
following lemma, one may think of ρP ′ as a finite variable word, where the positions at P̃ are replaced by a
same variable kind.
Lemma 3.2. For any P ⊆ {0, · · · , |ρ| − 1} with (∀n ∈ P )[ρ(n) = 0] ∧ |P | ≥ ℓ, there exist two subsets P ′ < P̃
of P with P̃ 6= ∅ such that c̃(α) = c̃(αP̃ ) where α = ρP ′ .
Proof. Suppose P = {p0 < · · · < pm−1 }. Let ℓ0 , . . . , ℓm be defined by ℓi = c̃(ρ{p0 ,...,pi−1 } ). In particular,
ℓ0 = c̃(ρ). Since |P | = m ≥ ℓ, so among ℓ0 , · · · , ℓm , there must exists i < j such that ℓi = ℓj . Let
P ′ = {p0 , · · · , pi−1 } (if i = 0 then P ′ = ∅), and P̃ = {pi , · · · , pj−1 }, let α = ρP ′ . Clearly P ′ < P̃ and P̃ 6= ∅.
It is also easy to see that c̃(α) = ℓi = ℓj = c̃(αP̃ ).

We now prove a technical lemma used in the proof of our main combinatorial lemma (Lemma 3.4). The
sequence in the following lemma is obtained by a simple greedy algorithm, with finitely many resets.
Lemma 3.3. There exists a nonempty set of colors L ⊆ {0, 1, · · · , ℓ − 1}, |L| + 1 many sets of binary strings
Γ0 = {τ η }η∈L , Γ1 = {τ η }η∈L2 , · · · , Γ|L| = {τ η }η∈L|L|+1 , such that, letting
η̃ = max
L ∗ max {z
L ∗ · · · ∗ max L}
|
|L|+1 many

and letting ρ̃ = τ η̃ ∗ 0, the following holds:

4

LU LIU, BENOIT MONIN, AND LUDOVIC PATEY

(1) ρ ≺ Γ0 and τ η ≺ τ β ⇔ η <lex β;
(2) ρ̃(|τ |) = 0 for all τ ∈ Γi , i ≤ |L|;
(3) for all
η ∈ Li+1 , 	let η0 ≺ η1 ≺ · · · ≺ ηi−1 denote all nonempty predecessors of η, let
 iη ≤ |L|,
η
η1
0
) = η(i);
Q = |τ |, |τ |, · · · , |τ ηi−1 | (if i = 0 then Q = ∅), then c̃(τQ

η
(4) let P = {|τ |}η∈L≤|L|+1 , for all subset Q of P , all τ  ρ̃, c̃ τQ ∈ L.
Moreover, Γi , i ≤ |L| is computable in the jump of c̃, uniformly in ρ.
Proof. We firstly show how to find Γ0 . Start with L = {0, 1, · · · , ℓ − 1}. At step 1, try to find a string
τ ∈ 2<ω such that c̃(ρτ ) = 0 and let τ 0 = ρτ . Then try to find a τ such that c̃(τ 0 0τ ) = 1 and let τ 1 = τ 0 0τ .
Generally, after τ j is found, try to find τ such that c̃(τ j 0τ ) = j + 1 and let τ j+1 = τ j 0τ if τ is found. If
during the above process, after τ j−1 is defined ( τ −1 = ρ ), there is no τ such that c̃(τ j−1 0τ ) = j, then we
start all over again with ρ replaced by ρ1 = τ j 0 and with L replaced by L r {j}.
Generally, given a set of colors L and after τ β is found, let η be the immediate successor (with respect
to ≤lex order
restricted to L-strings)
of β, let η0 ≺ η1 ≺ · · · ≺ ηi−1 denote all nonempty predecessors of η,
	

let Q = |τ η0 |, |τ η1 |, · · · , |τ ηi−1 | (if i = 0 then Q = ∅), we try to find τ such that c̃((τ β 0τ )Q ) = η(|η| − 1).
If such a string τ does not exists then we start all over again with ρ replaced by τ β 0Q and L replaced by
L r {η(|η| − 1)}. If such τ exists then let τ η = τ β 0τ .
Note that we have to start over for at most ℓ − 1 times before we ultimately succeed since there are ℓ colors
in total. It is plain to check all the four items. Also note that the sequence Γ0 , · · · , Γ|L| is c̃′ -computable
since we only need to use the jump of c̃ to know whether the next τ η can be found.


	
Lemma 3.4. There exists a string ρ̃ ≻ ρ and a finite set P ⊆ |ρ|, · · · , |ρ̃| − 1 with (∀i ∈ P )[ρ̃(i) = 0]
such that for all σ  ρ̃ there exists two subsets P ′ < P̃ of P with P̃ 6= ∅ such that, letting α = σP ′ ,
c̃(α) = c̃(αP̃ ) = c̃(α↾min P̃ ). Moreover, |P | < ℓℓ+2 , and ρ̃, P , are computable in the jump of c̃, uniformly in
ρ.
Proof. Let L and ρ̃ satisfy Lemma 3.3. We claim that ρ̃ and P = {|τ η |}η∈L≤|L|+1 satisfy the current lemma.
It is clear by item 1 of Lemma 3.3 that ρ̃ ≻ ρ and by item 2 of Lemma 3.3 that (∀i ∈ P )[ρ̃(i) = 0].
Fix an arbitrary σ  ρ̃. We now describe how to construct P ′ and P̃ . Define ℓ0 , . . . , ℓ|L| and p0 , . . . , p|L|
inductively by ℓ0 = c̃(σ), ℓi+1 = c̃(σ{p0 ,p1 ,··· ,pi } ), and pi = |τ ℓ0 ···ℓi | (where τ ℓ0 ···ℓi ∈ Γi ). Since ℓ0 , · · · , ℓ|L| ∈ L
(by item 4 of Lemma 3.3), there is some i < j ≤ |L| such that ℓi = ℓj . Let P ′ = {p0 , · · · , pi−1 } (if i = 0
then P ′ = ∅), P̃ = {pi , · · · , pj−1 }, and let α = σP ′ . We claim that c̃(α) = c̃(αP̃ ) = c̃(α↾ min P̃ ). Note that
min P̃ = pi = |τ ℓ0 ···ℓi |. Therefore α↾ min P̃ = τPℓ0′···ℓi . By item 3 of Lemma 3.3, we have c̃(τPℓ0′···ℓi ) = ℓi .
Meanwhile, by definition of ℓi , c̃(σP ′ ) = c̃(α) = ℓi . By definition of ℓj , c̃(σP ′ ∪P̃ ) = c̃(αP̃ ) = ℓj . Thus,
c̃(α) = c̃(αP̃ ) = c̃(α↾ min P̃ ).

We say that (ρ̃, P ) is c̃-valid if P and ρ̃ satisfy Lemma 3.4. We say that (P ′ , P̃ ) witnesses c̃-validity
of (ρ̃, P ) for σ  ρ̃ if P ′ < P̃ ⊆ P , and letting α = σP ′ , c̃(α) = c̃(αP̃ ) = c̃(α↾min P̃ ). Before proving
Theorem 3.1, we start with the following simpler version.
Theorem 3.5. For every ℓ ∈ ω, every computable instance c : 2<ω → ℓ of OVW(2, ℓ), every P A degree over
∅′′ computes a solution to c.
Proof. It suffices to compute, given a PA degree relative to ∅′′ , an infinite binary sequence Y ∈ 2ω together
with a sequence of finite sets P̃0 < P̃1 < · · · with (∀i ∈ ω)(∀n ∈ P̃i )[Y (n) = 0] such that the following holds:

	
Let P osition = min P̃i : i ≥ 1 . There is some ℓ̃ < ℓ such that for all subset J of ω, letting

S
P̃i , then we have, (∀p ∈ P osition) c(YP̃J ↾p) = ℓ̃ ].
P̃J =
i∈J

Using Lemma
a ∅′ -computable sequence of strings ρ̃0 ≺ ρ̃1 ≺ · · · , a sequence of
 3.4, we first construct
	
finite sets Pi ⊆ |ρ̃i−1 |, · · · , |ρ̃i | − 1 and a sequence of colorings ci : [ρ̃i ] → Li inductively
as follows. ρ̃0 = ε
	
and c0 = c. Given ρ̃i and ci : [ρ̃i ] → Li , let ρ̃i+1  ρ̃i and Pi ⊆ |ρ̃i |, · · · , |ρ̃i+1 | − 1 be such that (ρ̃i+1 , Pi )is ci -valid, and let ci+1 be the coloring of [ρ̃i+1 ] which on σ  ρ̃i+1 associates hP ′ , P̃ , ji such that (P ′ , P̃ )
witnesses ci -validity of (ρ̃i+1 , Pi ) for σ, and ci (σP ′ ) = j. If there are multiple such tuples, take the least one,
in some arbitrary order. Note that the range of ci is some finite set Li .

A COMPUTABLE ANALYSIS OF VARIABLE WORDS THEOREMS

5

We now analyze for σ  ρ̃i what ci (σ) = hP ′ , P̃ , ji means. Note that elements of Li , i ∈ ω admit a natural
partial order ✁ as follows: for hP0′ , P̃0 , j0 i ∈ Li , hP1′ , P̃1 , j1 i ∈ Li+1 , hP1′ , P̃1 , j1 i is an immediate successor of
hP0′ , P̃0 , j0 i if and only if j1 = hP0′ , P̃0 , j0 i. Clearly every j ∈ Li admit a unique immediate predecessor.
S
′
Claim 3.6. Fix some n ≥ 1, and let ℓ̃ ✁ hP0′ , P̃0 , j0 i ✁ · · · ✁ hPn−1
, P̃n−1 , jn−1 i = cn (σ), Let P ′ = i≤n−1 Pi′
and α = σP ′ . Then for any subset J of {0, · · · , n − 1},


	

(∀p ∈ min P̃j : 1 ≤ j ≤ n − 1 ∪ {|α|}) c(αP̃J ↾p) = ℓ̃ .
Proof. First we prove the claim for n = 1. By definition of c1 (σ) = hP0′ , P̃0 , j0 i, letting β = σP0′ , c0 (β) =
c0 (βP̃0 ) = j0 = ℓ̃. In other words, for any subset J ⊆ {0},


	

(∀p ∈ min{P̃j : 1 ≤ j ≤ 0} ∪ {|β|}) c(βP̃J ↾p) = ℓ̃ .

So the claim holds for n = 1. Suppose now the claim holds for n − 1.
′
′
Suppose cn (σ) = hPn−1
, P̃n−1 , jn−1 i. Let β = σPn−1
. We have cn−1 (β) = cn−1 (βP̃n−1 ) = cn−1 (β↾ min P̃n−1 ) =

′
′
′
jn−1 = hPn−2
, P̃n−2 , jn−2 i. As cn−1 (β) = hPn−2
, P̃n−2 , jn−2 i and as ℓ̃ ✁ hPn−2
, P̃n−2 , jn−2 i, by induction
hypothesis, for any subset J of {0, · · · , n − 2} we have:

(3.1)

c(β(∪i≤n−2 P ′ )∪P̃J ) = ℓ̃.
i

′

′

′
hPn−2
, P̃n−2 , jn−2 i

Let β = βP̃n−1 . As cn−1 (β ) =
for any subset J of {0, · · · , n − 2} we have:
(3.2)

′
c(β(∪

′
and as ℓ̃ ✁ hPn−2
, P̃n−2 , jn−2 i, by induction hypothesis,

′
i≤n−2 Pi )∪P̃J

) = ℓ̃.

′
′
, P̃n−2 , jn−2 i, by induction hypothesis, for
, P̃n−2 , jn−2 i and as ℓ̃ ✁ hPn−2
As cn−1 (β↾ min P̃n−1 ) = hPn−2
any subset J of {0, · · · , n − 2} we have:


	 
	
(3.3)
(∀p ∈ min P̃j : 1 ≤ j ≤ n − 2 ∪ |β↾ min P̃n−1 | ) c(β(∪i≤n−2 P ′ )∪P̃J ↾p) = ℓ̃ .
i

But |β↾ min P̃n−1 | = min P̃n−1 . So (3.3) means for any subset J of {0, · · · , n − 2} we have:


	
(∀p ∈ min P̃j : 1 ≤ j ≤ n − 1 ) c(β(∪i≤n−2 P ′ )∪P̃J ↾p) = ℓ̃ .
i

Or equivalently, for any subset J of {0, · · · , n − 1} we have:


	
(3.4)
(∀p ∈ min P̃j : 1 ≤ j ≤ n − 1 ) c(β(∪i≤n−2 P ′ )∪P̃J ↾p) = ℓ̃ .
i

Now from 3.1, 3.2 and 3.4 we deduce that for any subset J of {0, · · · , n − 1} we have:


	

(∀p ∈ min P̃j : 1 ≤ j ≤ n − 1 ∪ {|β|}) c(β(∪i≤n−2 P ′ )∪P̃J ↾p) = ℓ̃
i

which completes the proof of the claim since β∪i≤n−2 Pi′ = α.


Let T0 be the ∅′ -computable set of all γ such that (∀i ≤ |γ|)[γ(i) ∈ Li ], γ(i) ✁ γ(i + 1) and γ(|γ| − 1) =
c|γ|−1 (ρ̃|γ| ). Then, let T be the downward closure of the set T0 by the prefix relation. The tree T is infinite
by construction of the strings ρ˜i , the colors ci and the sets Pi : a witness for the ci -validity of (ρ̃i+1 , Pi+1 )
for ρi+1 yields a node of T0 of length i + 2. The tree T is also ∅′ -computably bounded, and ∅′′ -computable.
Let j0 ∗ hP0′ , P̃0 , j0 i ∗ hP1′ , P̃1 , j1 i ∗ · · · be an infinite path through T computed by any PA degree over ∅′′ .
S
S
′
By construction, hPi′ , P̃i , ji i ✁ hPi+1
, P̃i+1 , ji+1 i. Let X = i∈ω ρ̃i , P ′ = i∈ω Pi′ and let Y = XP ′ . Clearly
′′
(∀i∀n ∈ P̃i )[Y
 (n) = 0] and
	 Y is computable in the given PA degree relative to ∅ . Therefore, letting
P osition = min P̃i : i ≥ 1 , it suffices to show that for all subsets J of ω,

(∀p ∈ P osition) c(YP̃J ↾p) = j0 ].
Without loss of generality, suppose p = min P̃n and J ⊆ {0, · · · , n− 1}. Since j0 ∗ hP0′ , P̃0 , j0 i∗ hP1′ , P̃1 , j1 i∗
· · · hPn′ , P̃n , jn i is an initial segment of some element in T0 , there must exist some N > n such that cN (ρ̃N +1 ) =
hPN′ −1 , P̃N −1 , jN −1 i. Let σ = ρ̃N +1 , α = σP ′ . Clearly α ≺ Y ∧ |α| > p. Moreover, by Claim 3.6, c(αP̃J ↾p) =
j0 . Thus c(YP̃J ↾p) = j0 .


6

LU LIU, BENOIT MONIN, AND LUDOVIC PATEY

Finally, we slightly modify the proof of Theorem 3.5 to derive Theorem 3.1.
Proof of Theorem 3.1. The main point is to make the tree T ∅′ -computable. To ensure this, after we obtain
ρ̃i , ci , we do not directlygo to ρ̃i+1 .	Instead, we ∅′ -compute ρ̃0i ≺ ρ̃1i ≺ · · · ≺ ρ̃ri i such that ρ̃0i ≻ ρ̃i and
ci {τ : τ  ρ̃ri i } ⊆ ci ρ̃0i , · · · , ρ̃ri i . Then we ∅′ -compute ρ̃i+1 ≻ ρ̃ri i as in the proof of Theorem 3.5.
Note that this indeed can be achieved using ∅′ since ci is computable. Define T to be the set of all γ
such that (∀i ≤ |γ|)[γ(i) ∈ Li ], γ(i) ✁ γ(i + 1), and either |γ| = 1 ∧ γ ∈ L0 or there exists ρ̃u|γ|−1 with
c|γ|−1 (ρ̃u|γ|−1 ) = γ(|γ| − 1). It is easy to see that T is ∅′ -computable since ci is computable for all i and the
sequences hci : i ∈ ωi and hρ̃vi : i ∈ ω, v ≤ ri i are ∅′ -computable.
Now we show that T is a tree. Suppose γ ∈ T , |γ| = n+1 with n ≥ 1, and cn (ρ̃un ) = γ(n) = hP ′ , P̃ , ji ∈ Ln .
We claim that γ↾n ∈ T . If n = 1, then γ↾1 ∈ L0 ⊆ T . Otherwise, let hQ′ , Q̃, ki ∈ Ln−1 be the predecessor
of hP ′ , P̃ , ji. We need to show that there exists ρ̃vn−1 such that cn−1 (ρ̃vn−1 ) = hQ′ , Q̃, ki. cn (σ) = hP ′ , P̃ , ji
rn−1
since
implies that, letting α = σP ′ , cn−1 (α) = cn−1 (α↾ min P̃ ) = j = hQ′ , Q̃, ki. Note that α  ρ̃n−1
r
r
r
n−1
n−1
n−1
P ′ > |ρ̃n−1 |. But cn−1 {τ : τ  ρ̃n−1 } ⊆ cn−1 {ρ̃0n−1 , · · · , ρ̃n−1 } . Therefore there exists ρ̃un−1 such that
cn−1 (ρ̃un−1 ) = hQ′ , Q̃, ki. It follows that γ↾n ∈ T and that T is a tree. Any PA degree relative to ∅′ computes
an infinite path through T . The rest of the proof goes exactly the same as Theorem 3.5.

We now give an alternative proof of Theorem 3.1 based on the definitional complexity of the solutions
of c.
Second proof of Theorem 3.1. Let P0 , P1 , . . . be the ∅′ -computable sequence defined in the proof of Theorem 3.5. We have seen that there exists an infinite ordered variable word such that the nth variable kind
appears before the position max Pn . Let T be the tree of all finite ordered variable words which are finite solutions to c and such that the nth variable appears before the position max Pn . By the previous
observation, the tree is infinite, ∅′ -computable, and ∅′ -computably bounded. Any PA degree relative to ∅′
computes an infinite variable word which, by construction of T , is a solution to c. This completes the proof
of Theorem 3.1.

Note that the above proof can be slightly modified to obtain a proof of a sequential version of the ordered
variable word.
Statement 3.7. SeqOVW(n, ℓ) is the statement “If c0 , c1 , . . . is a sequence of ℓ-colorings of a fixed alphabet
A of cardinality n, there exists a variable word W such that for every i ∈ ω and every b̄ ∈ Ai , {W (b̄ā) : ā ∈
A<∞ } is monochromatic for ci .”
Theorem 3.8. For every computable instance c0 , c1 , . . . of SeqOVW(2, ℓ), every PA degree relative to ∅′
computes a solution to c̄.
′
Proof. The proof is similar to Theorem 3.1. Using Lemma 3.4, we first construct
	 a ∅ -computable sequence
of strings ρ̃0 ≺ ρ̃1 ≺ · · · , a sequence of finite sets Pi ⊆ |ρ̃i−1 |, · · · , |ρ̃i | − 1 and a sequence of colorings

di : [ρ̃i ] → Li inductively
	 as follows. ρ̃0 = ε and d0 = c0 . Given ρ̃i and di : [ρ̃i ] → Li , let ρ̃i+1  ρ̃i and
Pi ⊆ |ρ̃i |, · · · , |ρ̃i+1 | − 1 be such that (ρ̃i+1 , Pi )- is di -valid, and let di+1 be the coloring of [ρ̃i+1 ] which
on σ  ρ̃i+1 associates hP ′ , P̃ , j, ki such that (P ′ , P̃ ) witnesses di -validity of (ρ̃i+1 , Pi ) for σ, di (σP ′ ) = j and
ci+1 (σP ′ ) = k. Note that the main difference with the previous construction is that we handle more and
more colorings among c0 , c1 , . . . at each level. The remainder of the proof is the same as in Theorem 3.1. 

The theorem above is optimal, in that we can obtain the following reversal.
Theorem 3.9. There is a computable instance c0 , c1 , . . . of SeqOVW(2, 2), such that every solution is of PA
degree relative to ∅′ .
′

Proof. Let R0 , R1 , . . . be a uniformly computable sequence of sets such that for every e, if Φ∅e (e) ↓= 0 then
′
Re is finite, and if Φ∅e (e) ↓= 1 then Re is cofinite. In particular, any function f : ω → 2 such that f (e) gives
a side of Re which is infinite, is DNC2 relative to ∅′ , hence of PA degree relative to ∅′ . Let ci : 2<∞ → 2
be defined by ci (σ) = 1 iff |σ| ∈ Ri , and let W be a solution to c̄, that is, a variable word W such that for
every i ∈ ω and every b̄ ∈ Ai , {W (b̄ā) : ā ∈ A<∞ } is monochromatic for ci . We claim that W computes
such a function f . Given e, let f (e) = ce (W (b̄)), where b̄ ∈ 2e is arbitrary (this is well-defined, since ce (b̄)
depends only on the length of b̄). By definition of W , {W (b̄ā) : ā ∈ A<∞ } is monochromatic for ce , the color

A COMPUTABLE ANALYSIS OF VARIABLE WORDS THEOREMS

7

of ce (W (b̄)) appears infinitely often in Re . Therefore, W is of PA degree relative to ∅′ . This completes the
proof.

4. A difficult instance of the Ordered Variable Word theorem
Miller and Solomon [6] constructed a computable instance of OVW(2, 2) with no ∆02 solution. In this
section, we strengthen their proof by constructing a computable instance of OVW(2, 2) such that every
solution is of DNC degree relative to ∅′ , using a significantly simpler argument.
The proof makes an essential use of a computable version of Lovasz Local Lemma proven by Rumyantsev
and Shen [8]. The idea of using Lovasz Local Lemma to analyse the computability-theoretic strength of
problems in reverse mathematics comes from Csima and Dzhafarov, Hirschfeldt, Jockusch, Solomon and
Westrick [?], who proved that a version of Hindman’s theorem for subtractions is not computably true.
Definition 4.1. Fix a countable set of variables x0 , x1 , . . . A (disjunctive) clause C is a tuple of the form
k. An infinite CNF formula is
(xn1 = i1 ∨ · · · ∨ xnk = ik ), with i1 , . . . , ik < 2. The length of C is the integer
V
an infinite conjunction of disjunctive clauses. An infinite CNF formula n Cn is computable if the function
which given n outputs a code for Cn is computable, and the set of n such that Cn contains the variable xj
is uniformly computable in j.
Theorem 4.2 (Rumyantsev and Shen [8]). For every α ∈ (0, 1), there exists some N ∈ ω such that every
computable infinite CNF where each variable appears in at most 2αn clauses of size n (for every n) and all
clauses have size at least N , has a computable satisfying assignment.
Theorem 4.3. There is a computable instance c of OVW(2, 2) and a computable function h : ω → ω such
′
′
that if Φ∅e outputs a finite variable word in which the first h(e) variable kinds occur, then Φ∅e is not extendible
into an infinite solution to c.
Proof. Fix α = 0.5, and let N be the threshold of Theorem 4.2. For every index e and stage s, we interpret
′
Φ∅e [s] as a finite variable word We,s with exactly N + e variable kinds, and where a new variable occurs right
after We,s . Such a variable word induces a binary tree Te,s with 2N +e leaves. Let Le,s be the set of leaves
of Te,s , that is, the set of all instantiations of the variable word We,s . Moreover, all the leaves of Te,s have
the same length ne,s .
The idea is the following: since the variable word is ordered and a new variable kind occurs right after
We,s , no variable among the first N + e variables can occur after We,s . If W is a solution to c with initial
segment We = lims We,s for some color i, then W must be homogeneous for c for every instance of the
variables, so in particular when setting all the variables after the N + e first ones to 0. Hence, there must be
infinitely many strings τ such that for every σ ∈ lims Le,s , c(στ ) = i. By ensuring that for cofinitely many
τ , there is some σ ∈ Le,|τ | such that c(στ ) 6= i, we force We not to be a solution to c for color i.
Fix a countable collection of variables (xρ : ρ ∈ 2<ω ). Each variable xρ corresponds to the color of the
string ρ. Given some s ∈ ω, τ ∈ 2<ω and some i < 2, if ne,s + |τ | = s, then let Ce,s,τ,i be the disjunctive
2N +e -clause
_
{xστ = i : σ ∈ Le,s }.

And let C be the conjunction

^

{Ce,s,τ,i : e ∈ ω, τ ∈ 2<ω , i < 2}.

ne,s +|τ |=s

This infinite CNF formula is clearly computable. Clearly Ce,s,τ,i has length 2N +e . Note that for every ρ, e,
there exists at most one τ such that (∃σ ∈ Le,|ρ| )[στ = ρ]. Therefore, each variable xρ appears in at most 2
clauses of length 2N +e , namely, Ce,|ρ|,τ,0 and Ce,|ρ|,τ,1 , where τ is such that (∃σ ∈ Le,|ρ| )[στ = ρ]. Therefore,
this formula satisfies the conditions of Theorem 4.2, and has a computable assignment c : 2<ω → 2. By
′
construction, letting h(e) = N + e + 1, the formula ensures that if Φ∅e outputs a finite variable word in which
′
the first h(e) variables kinds occur, then Φ∅e is not extendible into an infinite solution to c.

Definition 4.4. A function f : ω → ω is diagonally non-computable relative to X (or X-dnc) if for every e,
f (e) 6= ΦX
e (e).
Corollary 4.5. There is a computable instance c of OVW(2, 2) such that every solution is of ∅′ -dnc degree.

8

LU LIU, BENOIT MONIN, AND LUDOVIC PATEY

Proof. Let c and h be as in Theorem 4.3. For every e, let αe be a computable bijection from the finite
variable words in which the first h(e) variable kinds occur, to the set of the integers. By Kleene’s fixpoint
′
∅′
theorem, there is a computable function g : ω → ω such that for every e, Φ∅g(e) = α−1
g(e) (Φe (e)).
Let W be a solution to c, that is, an infinite variable word. Let f be the W -computable function defined
by f (e) = αg(e) (we ), where we is the first initial segment of W in which the first h(g(e)) variable kinds occur.
′
We claim that f is ∅′ -dnc. Indeed, given e ∈ ω, we 6= Φ∅g(e) , so
′

′

f (e) = αg(e) (we ) 6= αg(e) (Φ∅g(e) ) = Φ∅e (e)
This completes our proof.



We conclude this section with a small computational observation about VW(2, 2) based on the syntactical
form of the statement.
Definition 4.6. A function g : ω → ω dominates f : ω → ω if (∀x)f (x) < g(x). A function f : ω → ω is
hyperimmune if it is not dominated by any computable function. A Turing degree is hyperimmune-free if it
does not contain any hyperimmune function.
Lemma 4.7 (Folklore). Let P be a statement of the form (∀X)[Φ(X) → (∃Y )Ψ(X, Y )] where Φ is an
arbitrary predicate, and Ψ is a Π02 predicate. For every computable instance I of P, if I has a solution of
hyperimmune-free degree, then every PA degree computes a solution to I.
Proof. Say Ψ(X, Y ) ≡ (∀x)(∃y)Θ(X↾y, Y ↾y, x, y), where Θ is a decidable predicate. Let I be a computable
P-instance with a solution S of hyperimmune-free degree. Let h : ω → ω be the S-computable function such
that for every x, Θ(I, S, x, h(x)) holds. In particular, there is a computable function g : ω → ω such that
(∀x) max(h(x), S(x)) < g(x). Let T ⊆ ω <ω be the computably bounded tree defined by


(∀x < |σ|)σ(x) < g(x))∧
T = σ ∈ ω <ω :
(∀x < |σ|)[g(x) < |σ| → (∃y < |σ|)Θ(I↾y, σ↾y, x, y)]
In particular, S ∈ [T ], so the tree is infinite. Moreover, any R ∈ [T ] is a solution to I, and any PA degree
computes a member of [T ]. This completes the proof.

Corollary 4.8. There is a computable instance of VW(2, 2) such that every solution is of hyperimmune
degree.
Proof. First, note that the statement VW(2, 2) is of the form of Lemma 4.7. Let c : 2<ω → 2 be the computable instance of VW(2, 2) with no low solution constructed by Miller and Solomon [6] or by Theorem 4.3.
Letting d be a low PA degree, d computes no solution to c, hence by Lemma 4.7, every solution to c is of
hyperimmune degree.

It is still unknown whether there is a computable instance of OVW(2, 2) such that every solution is PA
over ∅′ , or even just computes ∅′ . In particular the following questions remain open:
Question 4.9. Does VW(2, 2) or OVW(2, 2) imply ACA over RCA0 ?
Question 4.10. Is there a computable instance of VW(2, 2) or OVW(2, 2) such that the measure of oracles
computing a solution to it is null?
References
[1] Timothy J. Carlson and Stephen G. Simpson. A dual form of Ramsey’s theorem. Adv. in Math., 53(3):265–290, 1984.
[2] Barbara F. Csima and Joseph R. Mileti. The strength of the rainbow Ramsey theorem. Journal of Symbolic Logic,
74(04):1310–1324, 2009.
[3] Reed Solomon Linda Brown Westrick Damir D. Dzhafarov, Stephen Flood. Effectiveness for the dual ramsey theorem. To
appear. Available at http://www.math.uconn.edu/~ damir/papers/dualRT.pdf, 2017.
[4] Harvey Friedman and Stephen G. Simpson. Issues and problems in reverse mathematics. In Computability theory and its
applications (Boulder, CO, 1999), volume 257 of Contemp. Math., pages 127–144. Amer. Math. Soc., Providence, RI, 2000.
[5] Carl G. Jockusch and Robert I. Soare. Π01 classes and degrees of theories. Transactions of the American Mathematical
Society, 173:33–56, 1972.
[6] Joseph S. Miller and Reed Solomon. Effectiveness for infinite variable words and the dual Ramsey theorem. Arch. Math.
Logic, 43(4):543–555, 2004.
[7] Antonio Montalbán. Open questions in reverse mathematics. Bulletin of Symbolic Logic, 17(03):431–454, 2011.

A COMPUTABLE ANALYSIS OF VARIABLE WORDS THEOREMS

9

[8] Andrei Rumyantsev and Alexander Shen. Probabilistic constructions of computable objects and a computable version of
lovász local lemma. Fundamenta Informaticae, 132(1):1–14, 2014.
[9] Stephen G. Simpson. Subsystems of Second Order Arithmetic. Cambridge University Press, 2009.
[10] Theodore A. Slaman. A note on dual ramsey theorem. Unpublished, January 1997.
[11] Henry Towsner. A simple proof and some difficult examples for Hindman’s theorem. Notre Dame J. Form. Log., 53(1):53–
65, 2012.
Department of Mathematics, Central South University, ChangSha 410083, People’s Republic of China
E-mail address: g.jiayi.liu@gmail.com
LACL, Département d’Informatique, Faculté des Sciences et Technologie, 61 avenue du Général de Gaulle,
94010 Créteil Cedex
E-mail address: benoit.monin@computability.fr
Institut Camille Jordan, Université Claude Bernard Lyon 1, 43 boulevard du 11 novembre 1918, F-69622
Villeurbanne Cedex
E-mail address: ludovic.patey@computability.fr

