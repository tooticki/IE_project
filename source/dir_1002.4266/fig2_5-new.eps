%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Japanese
%%Title: fig2_5-new].eps
%%Creator: Adobe Illustrator(R) 12
%%AI8_CreatorVersion: 12.0.1
%AI9_PrintingDataBegin
%%For: Ken'ichi Ohshika
%%CreationDate: 11/11/09
%%BoundingBox: 0 0 569 481
%%HiResBoundingBox: 0 0 568.0323 480.6666
%%CropBox: 0 0 568.0323 480.6666
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.19 0
%%+ procset Adobe_CoolType_Core 2.23 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%ADO_BuildNumber: Adobe Illustrator(R) 12.0.1 x206 R agm 4.3861 ct 5.530
%ADO_ContainsXMP: MainFirst
%AI7_Thumbnail: 128 108 8
%%BeginData: 12392 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FDFCFFFD35FF7DA8A8FF7DFD78FF7DA87DA85252A87D7DFD4CFFA8
%7DA8FFA87DA8FFA8A8A8FFA8FFA8A8A8FD19FFA87D527D7E7D52597DA8FD
%4BFFA8522752525227522752527E2752272E2727A8FD19FF52A87D7D7DA8
%5253A8FD4CFF7DA87D7D7DA87D7D7DA8FD047D84847DFD1DFFA8FFFFFFA8
%FD4DFFA87D7D525252A8A8A85252527D7DA8FD1DFFA8FD53FF7DFD06FFA8
%A8FD05FF7DFD39FFA8FD0DFFA8FD26FF7D7D522727FD057DF827FD047D52
%27277D52FD107DA8FD077DFFFD077DFD13FF7DA87D2727A1FD047DF8287D
%7D7DA17D27277D7DA87DA17DA87DA87DA87DA87DA87DA77DA8A17D7DA87D
%7D7DA8A17D7DA87DA87DFFFFFF7DA8A8527DA8A8A8CA7D527DFD05A8277D
%A8A8A8CAA8FF52FD1227A852FD07277DFD12FF7D7DA827527DA8A8A87D52
%52A87DA8A8A8277DA8A87DA8A8A852FD1B277DFFFF7DFD18FF52F827F827
%F827F827F827F827F827F827F8527D27F827F827F827F852FD12FF7DFD09
%FFCAFD0EFF7DF827F827F827F827F827F827F827F827F827F827F827F827
%F827F852FFFF7DFD18FF5227F827F827F827F827F827F827F827F827A852
%F827F827F827F82752FD12FF7DFD18FF5227F827F827F827F827F827F827
%F827F827F827F827F827F827F82752FFFF7DFD09FFA8FFFF7E7DFFFFFFA8
%FD06FF52F827F827F827F827F827F827F827F827527DF827F827F827F827
%F87DFD12FF7DFD18FF7DF827F827F827F827F827F827F827F827F827F827
%F827F827F827F852FFFF7DFFFFA8FD09FF52527DFD09FF5227F827F827F8
%27F827F827F827F82727A85227F827F827F827F82752FD12FF7DFD18FF52
%27F827F827F827F827F827F827F827F827F827F827F827F827F82752FFFF
%52FFFFFFA8FD05FFA8FF7D52527D7DFD08FF52F827F827F827F827F827F8
%27F827F8535259F827F827F827F827F87DFD12FF7DFD18FF7DF827F827F8
%27F827F827F827F827F827F827F827F827F827F827F852FFFF7DFFFFA8FD
%09FF7DFF7DA8FD08FF5227F827F827F827F827F827F827F82752522827F8
%27F827F827F82752FD12FFA7FD18FF5227F827F827F827F827F827F827F8
%27F827F827F827F827F827F82752FFFF76FFFFFFA8FD05FFA8FD0EFF7DF8
%27215227272752274C2752274C27527D522752275227522752277DFD12FF
%7DFD18FF7DF8272752272727522727275227282752275227522752272727
%2E277DFFFF7DFFFFA8FD0DFFA8FD07FF5227F852A8FFA8A8A8FFA8A8A8FF
%A8A8A8FFA8A8A8FFA8A8A8FFA8A87DFD12FF7DFD18FF5227F8527D7D767D
%767D767D767D527D527D7D7D527D7D7D52FD047DFFFF7DFD07FFA87D7D7D
%A8A87DFFFFFFA8FD06FF52F82752FD17FFA87DFD12FF7DFD18FF7DF82727
%7D527D5252277DFD05527652522752527D5276527D527DFFFF7DFD06FF59
%7DA88452A8FF7DFFFFA8FD07FF5227F87DFD18FF7DFD12FF7DFD18FF5227
%F8527DA87D7D527D7D7D527D7DA1FD047D525252A87DA87D7D7DFFFF7DFD
%06FF59527D527D52A87DFFFFFFA8FD06FF52F82752FD17FFA87DFD12FF7D
%FD18FF7DF82727A87DA87D7D52FD047DA87D5252FD047DA87DA87DA87D7D
%FFFF7DFFFFA8FFFFFFA8FF7DA8FFA852A8FFFFAFFD07FF5227F87DFD18FF
%7DFD12FF7DFD18FF5227F852A8A87D7D527DA87D527D7DA8A8A87DA87D7D
%52FD04A8A77DFFFF52FFFFFFA8A87DA8A8A87DA87D7D7DA8A8FD08FF52F8
%F852FD17FFA87DFD12FF7DFD18FF7DF82727FFA8A8527DA8FFA8FFA8A87D
%A8A8FFA8A8527DA8FFA8FF7D7DFFFF7DFFFF7DA87D7D527DA8FFA87E7D7D
%7DA87DFD07FF5227F87DFD18FF7DFD12FFA8FD18FF7627F852A8A87DA8A8
%7D7DA8A8A87D52527DFD04A87DA8A1A87DA17DFFFF52FFA8527DFFA8FFA8
%A8277DA8FFA8FFA85253FFA8CAA8A8A852F82152FD17FFA87DFD12FF76FD
%04A8CBFD04A8527DA8CAA8A8A87D7DCAA8CAA8A8A852F82727FD05FF7D7D
%7DFFFFFFA8FD07FFA8FFFFFFA87DFFFF7D7D7DF8287DA17DA1522727A1FD
%047DF852FD057DA82727F87DFD18FF7DFD12FF7D7D7D52527DA17D7D5227
%F8FD057DF827FD057DA82727F852A8CAA8A8A87D7D7DA8CAA8A8A8FFA87D
%7DFD07A87DFFFF7DFFFFA8A8FD05FF7DAFFD05FFA8A8FD06FF52F82752FD
%0BFF527DA8FD09FFA87DFD12FF7DFFA87D53FD05FF59A8FD05FF7D7DFD06
%FF7DF82727FD0EA88452527DFFA8A8A8FF7D7DFFFF7DFD18FF5227F87DFD
%0AFFA85252FD0BFF7DFD12FF7DFFA87D7DFD14FF5227F852A8FFA8A8A8FF
%7D7D52FD04A8FFA8A87DFD04A8FFA8A87DFFFF7DFD18FF52F82752FD0AFF
%7D527D52A8FD08FFA87DFD12FF7DFFA87D59FD14FF7DF82727FFA8FFA8FF
%A8A8527D7DFFA8FFA8FFFFFFA8FFA8FFA8FFA87DFFFF7DFD18FF5227F87D
%FD0AFFA8FFFF7DA8FD09FF7DFD12FFA1FFA87D7DFD14FF5227F852A8A8A8
%FFA8FFA8A87DA8A87E527DA8FFA8A8A8FFFD04A87DFFFF52FD0AFFA87DA8
%FD0BFF52F8F852FD0DFFA8FD09FFA87DFD12FF52A87D5252A8A8A87DA87D
%A87DA8A8A87DA8A8A87DFD04A852F82727FFA8FFA8FFA8FFA8FFA8FF7D7D
%52FFA8FFA8FFA8FFA8FF7D7DFFFF7DFD0AFF7D527DFD0BFF5227F87DFD18
%FF7DFD12FF7D7DA87DA17DA87D7D52527DA87DA87DA87DA87DA87DA87DA8
%5227F852A8FFA8FF597D7DFFA8FFFD05A8FFA8FFA8FFA8FFA8A87DFFFF76
%FD0AFF7D527D7DFD0AFF7DF82152FD17FFA87DFD12FF7DFD07FFA87D7DA8
%FD0DFF7DF82727A8A8A87D53527DFD10A87D7DFFFF7DFD0AFF7DA87D7DFD
%0AFF5227F87DFD18FF7DFD12FF7DFD07FFA87D7DA8FD0DFF5227F8527DA8
%7DA87D7D7DA87DA87DA87DA87D7D52527DA87DA87D7D7DFFFF7DFD0CFFA8
%7DFD0AFF52F82752FD17FFA87DFD12FF7DFD07FFA87D52A8FD0DFF7DF827
%27FD10FF7D52A8FD04FFA87DFFFF7DFD18FF5227F87DFD18FF7DFD12FF7D
%FD07FFA87D7DA8FD0DFF5227F852FD10FF7D7DA8FD05FF7DFFFF7DFD18FF
%52F82752FD17FFA87DFD12FF52FD077D5252527D7D7D767D7D7D76FD067D
%52F82727FD087D5252FD067D5252FD057D527DFFFF7DFD18FF5227F87DFD
%18FF7DFD12FF7DFD0EFF7D7D7DFD07FF5227F852FD08FF7D7D7DFD0DFF7D
%FFFF52FD18FF52F8F852FD17FFA87DFD12FF7DFD0EFF7D527DFD07FF7DF8
%2727FD07FFA87D597DA8FD0BFFA87DFFFF7DFD18FF5227F87DFD18FF7DFD
%12FFA7FD0EFF7D847DFD07FF5227F852FD08FF7D7D7DFD0DFF7DFFFF52FD
%0D7D764C2752FD077D52275252FD077D52522752FD0C7D527DFD12FF7DFD
%0EFF7D2752FD077D52272727FD077D52522752FD0CFFA87DFFFF7DFD0EFF
%272752FD13FF272752FD0DFF7DFD12FF7DFD0EFF522727FD13FF272752FD
%0DFF7DFFFF7DFD0DFFA827F852A8FD11FFA827F852FD0CFFA87DFD12FF7D
%FD0EFF52F852FD12FFA827F852FD0CFFA87DFFFF7DFD0EFF272752FD13FF
%272752FD0DFF7DFD12FF7DFD0EFF522752FD13FF272752FD0DFF7DFFFF7D
%FD0DFFA827F852FD12FFA827F852FD0CFFA87DFD12FF7DFD0EFF52F852FD
%12FFA827F852FD0CFFA87DFFFF7DFD0EFF272752FD13FF272727FD0DFF7D
%FD12FF7DFD0EFF522752FD13FF272727FD0DFF7DFFFF52FD0DFFA827F852
%FD12FFA827F852A8FD0BFFA87DFD12FF7DFD0EFF52F852FD12FFA827F852
%A8FD0BFFA87DFFFF7DFD06FFA8FD07FF272752FD08FFA8A8FD09FF272752
%FD05FFA8FD07FF7DFD12FFA7FD0EFF522752FD13FF272752FD0DFF7DFFFF
%76FD05FFA85252FD05FFA827F852FD08FF5252FD08FFA827F852FD04FF7D
%5259FD05FFA87DFD12FF7DFD0EFF52F852FD12FFA827F852FD0CFFA87DFF
%FF7DFD05FFA8527DA8FD05FF272752FD07FF7D5353A8A8FD07FF272752FD
%04FF7D527DA8FD05FF7DFD12FF7DFD0EFF522752FD13FF272752FD0DFF7D
%FFFF7DFD05FF7D7D7D27A8FFFFFFA827F852A8FD06FF7D52A852A8FD06FF
%A827F852FD04FF597D5252A8FFFFFFA87DFD12FF7DFD0EFF52F852FD12FF
%A827F852FD0CFFA87DFFFF7DFD08FF7DFD05FF272752FD0AFFA8A8FD07FF
%272752FD07FF7DFD05FF7DFD12FF7DFD0EFF522752FD13FF272752FD0DFF
%7DFFFF7DFD0DFFA827F852FD12FFA827F852FD0CFFA87DFD12FF7DFD0EFF
%52F852FD12FFA827F852FD0CFFA87DFFFF7DFD0EFF272752FD13FF272727
%FD0DFF7DFD12FF7DFD0EFF522752FD13FF272727FD0DFF7DFFFF52FD0DFF
%A827F852FD12FFA827F852A8FD0BFFA87DFD12FF7DFD0EFF52F852FD12FF
%A827F852A8FD0BFFA87DFFFF7DFD0EFF272752FD13FF272752FD0DFF7DFD
%12FFA7FD0EFF522752FD13FF272752FD0DFF7DFFFF76FD0DFFA827F852FD
%12FFA827F852FD0CFFA87DFD12FF7DFD0EFF52F852FD12FFA827F852FD0C
%FFA87DFFFF7DFD0EFF272752FD13FF272752FD0DFF7DFD12FF7DFD0EFF52
%2728FD13FF272752FD0DFF7DFFFF527D767D7D7D767D7D7D767D7D7D5252
%2752FD047D767D7D7D767D7D7D767D7D7D767D765227527D7D767D7D7D76
%7D7D7D767D527DFD12FF7DFD0EFF52F852FD12FFA8522752FD0CFFA87DFF
%FF7DFD04FFA8FFFFFFA8FFFFFFA8FD07FFA8FFFFFFA8FFFFFFA8FFFFFFA8
%FD07FFA8FFFFFFA8FFFFFFA8FFFFA87DFD12FF7DFD0EFF7D7D7DFD13FF7D
%7E7DFD0DFF7DFFFF7DFD33FFA87DFD12FF7DFD0EFF7E7D7DFD13FF7D597E
%FD0CFFA87DFFFF7DFD34FF7DFD12FFA1FD0EFF7D7D7DFD13FF7D7D7DFD0D
%FF7DFFFF52FD19FFA8FD19FFA87DFD12FF52A87DA87DA87DA87DA87DA87D
%A87D53527D7DA87DA87DA87DA87DA87DA87DA87DA87DA87D5252527DA87D
%A87DA87DA87DA87DA87D7DFFFF7DFD18FF7D7DA8FD19FF7DFD12FF7D7DA8
%7DA87DA8775252A87DA87DA87DA87DA87D7D52527DA87DA87DA87DA87DA8
%7DA87DA87DA87DA87DA8525277A87DA87DA87D7D7DFFFF76FD17FFA87D52
%7DA8FD17FFA87DFD12FF7DFD06FFA8527DFD0AFF7E7D7DFD14FF7D52A8FD
%06FFA87DFFFF7DFD17FFA852A87DA8FD18FF7DFD12FF7DFD06FFA87D7DFD
%0AFFA8597DFD14FF7D7D7DFD07FF7DFFFF7DFD1AFFA8A8FD17FFA87DFD12
%FF7DFD06FFA8527DA8FD09FF7D7D52FD13FFA87D5284FD06FFA87DFFFF7D
%FD34FF7DFD12FFFD097D52FD0B7D52FD157D527D52FD087DFFFF7DFD33FF
%A87DFD12FF7DFD1BFFA87D527DFD14FFA87DFFFF7DFD34FF7DFD12FF7DFD
%1BFFA97D7D7DFD15FF7DFFFF52FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFCAFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA87DFD12FF7DFD1BFFA87D7D7DA8FD13FFA87DFFFFFD1D7D2727
%52A7FD157DFD12FFA7FD1BFFA8525252FD15FF7DFFFF7DFD1BFF5227F852
%FD14FFA87DFD12FF7DFD1BFF7D27F852A8FD13FFA87DFFFF7DFD1BFF7DF8
%2752FD15FF7DFD12FF7DFD1BFFA8F82752FD15FF7DFFFF7DFD1BFF52F8F8
%52FD08FF7D7D7DFD09FFA87DFD12FF7DFD1BFF7D27F852A8FD13FFA87DFF
%FF7DFD1BFF7DF82752FD08FF7D52A8FD0AFF7DFD12FF7DFD1BFFA8F82752
%FD15FF7DFFFF7DFD1BFF5220F852FD08FF527D527DFD08FFA87DFD12FF7D
%FD1BFF7D27F852CFFD13FFA87DFFFF7DFD1BFF7DF82727FD07FFA9A8AF7D
%52FD09FF7DFD12FF7DFD1BFFA8F82727FD15FF7DFFFF52FD0DFF537DA8FD
%0BFF5227F852CAFD09FFA8FD09FFA87DFD12FF7DFD1BFF7D27F852A8FD13
%FFA87DFFFF7DFD0DFF7D52FD0CFF7DF82727FFA8FFA8A87DA8A8FFA8FFA8
%7DA8FFA8FFA8FFA8A87DFD12FFA7FD1BFFA8202727FFA8FFA8A852A8A8FF
%A8FFA87D7DFFA8FFA8FFA8A87DFFFF76FD0CFFA8527D527DFD0AFF5227F8
%27FD047D272752FD047D52F852FD067D527DFD12FF7DFD1BFF7D27F827FD
%047D522727FD047D52F852FD067D527DFFFF7DFD0CFFA8A8FF527DFD0AFF
%7DF82752FD04FFA852FD05FFA859A8FD07FF7DFD12FF7DFD1BFFA8F82752
%FD05FF7DFD06FF7DA8FD07FF7DFFFF7DFD0FFFA8FD0BFF52F8F852FD14FF
%A87DFD12FF7DFD1BFF7D27F852A8FD0DFFA8FD05FFA87DFFFF7DFD1BFF7D
%F82752FD05FFA8FD0FFF7DFD12FF7DFD1BFFA8F82752FD15FF7DFFFF7DFD
%1BFF5220F852FD0AFF7DA8FD08FFA87DFD12FF7DFD1BFF7D27F852CFFD13
%FFA87DFFFF7DFD1BFF7DF82727FD05FFA8FFFFFFA85252FD09FF7DFD12FF
%7DFD1BFFA8F82727FD15FF7DFFFF76FD1BFF5227F852A8FFFFFFA8FD04FF
%7D52537D84A8FD05FFA87DFD12FF7DFD1BFF7D27F852A8FD13FFA87DFFFF
%7DFFA8A8FFA8FFA8FFA8FFA8FFA8CAA8FFA8FFA8FFA8FFA8FFA8FFA87DF8
%2752FD09FF7DA8A87D527DFD06FF7DFD12FFA8FD1BFFA8272728FD15FF7D
%FFFF27522752275227272752275227522752275227522752275227522752
%2727F852FD04FFA9FD07FF7DA8A8FD05FFA87DFD12FFFD04522752525227
%5252524B525252275252524B52525227FD045227F852A8FD13FFA87DFFFF
%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8
%2752FD05FFA8FD0FFF7DFD12FF52F827F827F827F827F827F827F827F827
%F827F827F827F827F827F827F82752FD15FF7DFFFF2727F827F827F827F8
%27F827F827F827F827F827F827F827F827F827F827F852FD0CFFA8FD07FF
%A87DFD12FF2720F827F827F827F827F827F827F827F827F827F827F827F8
%27F827F827F852A8FD13FFA87DFFFF27F827F827F827F827F827F827F827
%F827F827F827F827F827F827F827F82752FD15FF7DFD12FF52F827F827F8
%27F827F827F827F827F827F827F827F827F827F827F827F82752FD15FF7D
%FFFF2727F827F827F827F827F827F827F827F827F827F827F827F827F827
%F827F852FD04FFA87DA8FD04FFA852A8FD06FFA87DFD12FF2727F827F827
%F827F827F827F827F827F827F827F827F827F827F827F827F852FD04FFA8
%527DFD05FF52A8FD06FFA87DFFFF7D527D527D527D527D527D527D527D52
%7D52525276527D527DFD05527D52FD047D52F852FD047D5227527D527D7D
%7D777DFD13FF7D5252527D527D527D5252527D52775252527D527DFD0552
%7D527D525252FD047D52F827FD047D5227277D527D7D7D527DA8FFFFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FF7D52A8FFA8FFA8A852A8A8FFA8FFA8FFA8FD13FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A87D7DFFA8FFA8FF52A8A8FFA8FFA8FFA8FDFCFFFDFCFFFDF1FFA9FD36FF
%7DA8FF7DFD45FF5253FF7DFD32FFA87D7D527DA8FD43FF847D527D7DA8FD
%32FF7D8452A87DFD43FF7DA852A87DA9FD32FF7D7DFF53FD45FF7DFFA87D
%FDFCFFFD19FFFF
%%EndData
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Utils 70 dict dup begin put
/bdf
{
	bind def
} bind def
/nd{
	null def
}bdf
/xdf
{
	exch def
}bdf
/ldf 
{
	load def
}bdf
/ddf
{
	put
}bdf	
/xddf
{
	3 -1 roll put
}bdf	
/xpt
{
	exch put
}bdf
/ndf
{ 
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/ps_level
	/languagelevel where{
		pop systemdict /languagelevel get exec
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/set_gvm
{
	currentglobal exch setglobal
}bdf
/reset_gvm
{
	setglobal
}bdf
/makereadonlyarray
{
	/packedarray where{
		pop packedarray
	}{
		array astore readonly
	}ifelse
}bdf
/map_reserved_ink_name
{
	dup type /stringtype eq{
		dup /Red eq{
			pop (_Red_)
		}{
			dup /Green eq{
				pop (_Green_)
			}{
				dup /Blue eq{
					pop (_Blue_)
				}{
					dup () cvn eq{
						pop (Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf
		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne
			{
			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark
			} if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		} ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/thold_halftone
{ 
	level3
		{sethalftone currenthalftone}
		{
			dup /HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}
			{
				begin
				Width Height mul {
					Thresholds read {pop} if
				} repeat
				end
				currenthalftone
			} ifelse
		}ifelse
} def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%) anchorsearch {pop} if
} bdf
/filter_cmyk
{	
	dup type /filetype ne{
		exch () /SubFileDecode filter
	}
	{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length /AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
} bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx
			currentdict /srcStr get /readstring cvx /pop cvx
			/dup cvx /length cvx 0 /gt cvx [
				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx
				names_index Names length currentdict /srcStr get length 1 sub {
					1 /index cvx /exch cvx /get cvx
					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx
					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx
				} for
				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx
			] cvx /if cvx
			/end cvx
		] cvx
		bind
		/exec cvx
	] cvx
	end
} bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict /DataSource get def
	/origMultipleDataSources imageDict /MultipleDataSources get def
	/origDecode imageDict /Decode get def
	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def
	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse
	{
		/imbufCnt imageDict /DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub {
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put
		} for
		DeviceN_PS2 {
			imageDict begin
		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def
			/MultipleDataSources false def
			/Decode [0 1] def
			end
		} if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or {
			/srcDataStrs [ imageDict begin
				currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
				{
					Width Decode length 2 div mul cvi string
				} repeat
				end ] def		
			imageDict begin
		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def
			/Decode [0 1] def
			end
		}{
			imageDict /DataSource [1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx /pop cvx names_index /get cvx /put cvx] cvx put
			imageDict /Decode [0 1] put
		} ifelse
	} ifelse
	imageDict exch
	load exec
	imageDict /DataSource origDataSource put
	imageDict /MultipleDataSources origMultipleDataSources put
	imageDict /Decode origDecode put	
	end
} bdf
/write_image_file
{
	begin
	{ (AGMUTIL_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{ 
			pop
			MultipleDataSources {
			 	0 1 DataSource length 1 sub {
					DataSource type dup
					/arraytype eq {
						pop DataSource exch get exec
					}{
						/filetype eq {
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						} ifelse
					} ifelse
					AGMUTIL_imagefile exch writestring
				} for
			}{
				DataSource type dup
				/arraytype eq {
					pop DataSource exec
				}{
					/filetype eq {
						DataSource imbuf readstring pop
					}{
						DataSource
					} ifelse
				} ifelse
				AGMUTIL_imagefile exch writestring
			} ifelse
		}for
		end
		true
	}ifelse
	end
} bdf
/close_image_file
{
	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile
}def
statusdict /product known userdict /AGMP_current_show known not and{
	/pstr statusdict /product get def
	pstr (HP LaserJet 2200) eq 	
	pstr (HP LaserJet 4000 Series) eq or
	pstr (HP LaserJet 4050 Series ) eq or
	pstr (HP LaserJet 8000 Series) eq or
	pstr (HP LaserJet 8100 Series) eq or
	pstr (HP LaserJet 8150 Series) eq or
	pstr (HP LaserJet 5000 Series) eq or
	pstr (HP LaserJet 5100 Series) eq or
	pstr (HP Color LaserJet 4500) eq or
	pstr (HP Color LaserJet 4600) eq or
	pstr (HP LaserJet 5Si) eq or
	pstr (HP LaserJet 1200 Series) eq or
	pstr (HP LaserJet 1300 Series) eq or
	pstr (HP LaserJet 4100 Series) eq or 
	{
 		userdict /AGMP_current_show /show load put
		userdict /show {
		  currentcolorspace 0 get
		  /Pattern eq
		  {false charpath f}
		  {AGMP_current_show} ifelse
		} put
	}if
	currentdict /pstr undef
} if
/consumeimagedata
{
	begin
	currentdict /MultipleDataSources known not
		{/MultipleDataSources false def} if
	MultipleDataSources
		{
		DataSource 0 get type
		dup /filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup /arraytype eq exch /packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch get exec length exch 0 ne {pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup /filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height { pop DataSource flushbuffer readstring pop pop} for
			end
			}if
		dup /arraytype eq exch /packedarraytype eq or /DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	  2{/exec load}repeat
	  3 1 roll
	  [ 5 1 roll ] bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs /TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type /dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	dup type /arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch {cvx} if
}bdf
/clonedict
{
	dup length dict
	begin
		{
		dup type /dicttype eq
			{
				clonedict
			} if
		dup type /arraytype eq
			{
				clonearray
			} if
		def
		}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and
} bdf
/Indexed_DeviceN
{ 
	/indexed_colorspace_dict AGMCORE_gget dup null ne {
		dup /CSDBase known {
			/CSDBase get /CSD get_res /Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	} ifelse
} bdf
/DeviceN_NoneName
{	
	/Names where {
		pop
		false Names
		{
			(None) eq or
		} forall
	}{
		false
	}ifelse
} bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup /arraytype eq exch /packedarraytype eq or
		{
			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}
			{
				true
			}ifelse
		}
		{
			true
		} ifelse
	}
	{
		true
	} ifelse
} bdf
/base_colorspace_type
{
	dup type /arraytype eq {0 get} if
} bdf
/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5 {cleartomark} bind def
}{
	/pdfmark_5 {pdfmark} bind def
}ifelse
/ReadBypdfmark_5
{
	2 dict begin
	/makerString exch def string /tmpString exch def
	{
		currentfile tmpString readline pop
		makerString anchorsearch
		{
		pop pop cleartomark exit
		}{
			3 copy /PUT pdfmark_5 pop 2 copy (\n) /PUT pdfmark_5
		} ifelse
	}loop
	end
} bdf
/doc_setup{
	Adobe_AGM_Utils begin
}bdf
/doc_trailer{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-2005 Adobe Systems, Inc.  All Rights Reserved.
%% Note: This procset assumes Adobe_AGM_Utils is opened on the stack below it, for
%% definitions of some fundamental procedures.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 201 dict dup begin put
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_in_pattern false def
/AGMCORE_currentpagedevice nd
/knockout_unitsq nd
currentglobal true setglobal
[/CSA /Gradient /Procedure]
{
	/Generic /Category findresource dup length dict copy /Category defineresource pop
} forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer {readline} stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq{
		dup /HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup /HalftoneType get 2 eq{
				/GraySpotFunction get
			}{ 
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/npth_clp
{
	newpath clip
} def
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias get exec
	/Adobe_AGM_Image where {
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			get exec
		}{
			pop pop
		}ifelse
	} if
	100 dict begin
	/dictstackcount countdictstack def
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub {end}for
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				} if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			} ifelse
		} forall
} bdf
/doc_setup{
	Adobe_AGM_Core begin
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict /AGM_handleerror known not{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror {
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and{
				$error /newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 10 def
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_&setoverprint /setoverprint ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			dup AGMCORE_gstack exch get dup /AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup /AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern /makepattern load def
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	<<
	/MaxPatternItem currentsystemparams /MaxPatternCache get
	>>
	setuserparams
	end
}def
/page_setup
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==
			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf
		} if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where {pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias {
				/Name get exch pop
			} if
			dup dup (None) eq exch (All) eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_in_pattern known {//Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse
						not AGMCORE_currentpagedevice/OverrideSeparations known and
						{
							AGMCORE_currentpagedevice/OverrideSeparations get
							{
								/HqnSpots /ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not
						}{
							gsave
							[/Separation AGMCORE_name /DeviceGray {}]AGMCORE_&setcolorspace
							false
							AGMCORE_currentpagedevice/SeparationColorNames 2 copy known
							{
								get
								{ AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where {pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
				dup true exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup (Cyan) eq exch
						dup (Magenta) eq 3 -1 roll or exch
						dup (Yellow) eq 3 -1 roll or exch
						(Black) eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
					{pop}
					{convert_spot_to_process or}ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{ 
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			  	AGMCORE_magenta_plate{
			  		4 3 roll pop pop pop
			  	}{
			  		AGMCORE_yellow_plate{
			  			4 2 roll pop pop pop
			  		}{
			  			4 1 roll pop pop pop
			  		}ifelse
			  	}ifelse
			}ifelse
			settransfer  
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup /Cyan eq 1 index (Cyan) eq or
					{pop (_cyan_)}if
				dup /Magenta eq 1 index (Magenta) eq or
					{pop (_magenta_)}if
				dup /Yellow eq 1 index (Yellow) eq or
					{pop (_yellow_)}if
				dup /Black eq 1 index (Black) eq or
					{pop (_black_)}if
				}def
			dup type /arraytype eq
				{[exch {filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3 {
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup (Cyan) eq exch /Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup (Magenta) eq exch /Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup (Yellow) eq exch /Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup (Black) eq exch /Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type /stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string /string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in /readstring cvx
						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx
						[/pop cvx ()]cvx /ifelse cvx
					]cvx /ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type /dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict /Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode [1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0 [C0 channel get 1 exch sub] def
							/C1 [C1 channel get 1 exch sub] def
							}{
							/C0 [1] def
							/C1 [1] def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def			
						}if
					currentdict /Range known
						{/Range [0 1] def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict /Function known
					{
					currentdict /Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf
					/ColorSpace [/DeviceGray] def
					}{
					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq
						{
						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get /Separation eq
						{
							{
								[1 /exch cvx /sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx
							}{
								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2 /DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup /ColorSpace get
				dup type /arraytype ne
					{[exch]}if
				dup 0 get /DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get /Separation eq
					{
					exch begin
					ColorSpace 1 get dup /None ne exch /All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get /exec cvx
										4 AGMCORE_plate_ndx sub -1 /roll cvx
										4 1 /roll cvx
										3 [/pop cvx]cvx /repeat cvx
										1 /exch cvx /sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get /DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get /exec cvx
									4 AGMCORE_plate_ndx sub -1 /roll cvx
									4 1 /roll cvx
									3 [/pop cvx]cvx /repeat cvx
									1 /exch cvx /sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace [/DeviceGray] def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type /arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get /CIEBasedA eq
								{
								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def
								}if
							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or
								{
								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def
								}if
							ColorSpace 0 get /CIEBasedDEFG eq
								{
								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup /AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace [/Separation (None) /DeviceGray {}] def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup /AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup /PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading /AGMCORE_ignoreshade known
					currentdict end exch
					{pop <</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	} bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	} bdf
	/n_color_components
	{
		base_colorspace_type
		dup /DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo /moveto ldf
		/li /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2 /setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace /setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where {
						begin
						dup 0 get dup /Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[ 
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get [ 
									exch {
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									} forall 
								] 1 xpt
							}if
						}ifelse
						end
					} if
				}if
			}def
			/setcolorspace
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get /Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	/sop /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/devn /setdevicencolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/devncs /setdevicencolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/@ /stroke ldf
	/nclp /npth_clp ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin /clonedict load end def
	/clonearray Adobe_AGM_Utils begin /clonearray load end def
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
	/getrampcolor
	{ 
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type /stringtype eq {indx get} if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		} for
		ColorSpaceFamily /Separation eq 
		{sep}
		{
			ColorSpaceFamily /DeviceN eq
			{devn} {setcolor}ifelse
		}ifelse
	} bdf
	/sssetbackground {aload pop setcolor} bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where {pop /setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			newpath
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			newpath
		} if
		c1x c2x eq
		{
			c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
		}
		{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
			c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
		} ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{ pathbbox } stopped
		{ 0 0 0 0 } if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}
		{
			/max { 2 copy gt { pop } {exch pop} ifelse } bdf
			/min { 2 copy lt { pop } {exch pop} ifelse } bdf
			rampdict begin
			40 dict begin
			background length 0 gt { background sssetbackground gsave clippath fill grestore } if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}
				{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}
						{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{ /theta 89.99 def}
							{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}
							{
								/L1maxX 0 def
								/L2maxX 0 def
							} ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						} ifelse
					} ifelse
				} ifelse
			} if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt { exch } if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			} if
		} if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		newpath
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}
		{
			0
			numsteps
			{
				dup
				subsampling { round cvi } if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			} repeat
			pop
		} ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}
			{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}
				{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}
					{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{ /theta 89.99 def}
						{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}
						{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					} ifelse
				} ifelse
			} ifelse
		} if
		grestore
		grestore
		end
		end
		end
		} ifelse
	} bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where {pop /setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			newpath
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			newpath
		} if
		x1 x2 eq
		{
			y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
		}
		{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
			x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{ pathbbox } stopped
		{ 0 0 0 0 } if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}
		{
			rampdict begin
			20 dict begin
			background length 0 gt { background sssetbackground gsave clippath fill grestore } if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt { exch } if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				} if
			} if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				} if
			} if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling { round cvi } if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			} repeat
			pop
			ext1 {
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				} if
			} if
			grestore
			grestore
			end
			end
			end
		} ifelse
	} bdf
}def
/page_trailer
{
	end
}def
/doc_trailer{
}def
/capture_currentpagedevice {
	//Adobe_AGM_Core/AGMCORE_currentpagedevice currentpagedevice ddf
} def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup //Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name /MappedCSA xdf}ifelse
} def
/setsepcolor
{ 
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/setdevicencolor
{ 
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		} for
		TintProc
	end
} def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup () eq exch (All) eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load /exec cvx
								/not cvx /and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							] cvx /if cvx
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc {setcolor} bdf
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
} def
/additive_blend
{
  	3 dict begin
  	/numarrays xdf
  	/numcolors xdf
  	0 1 numcolors 1 sub
  		{
  		/c1 xdf
  		1
  		0 1 numarrays 1 sub
  			{
			1 exch add /index cvx
  			c1 /get cvx /mul cvx
  			}for
 		numarrays 1 add 1 /roll cvx 
  		}for
 	numarrays [/pop cvx] cvx /repeat cvx
  	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add /index cvx  
			c1 /get cvx /sub cvx /mul cvx
			}for
		/sub cvx
		numarrays 1 add 1 /roll cvx
		}for
	numarrays [/pop cvx] cvx /repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc [
		/TintTransform cvx /setcolor cvx
	] cvx bdf
	MappedCSA setcolorspace_opt
} bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length {pop} repeat
	end
} bdf
/setdevicencolorspace
{ 
	dup /AliasedColorants known {false}{true}ifelse 
	current_spot_alias and {
		7 dict begin
		/names_index 0 def
		dup /names_len exch /Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup /Names get
		{
			dup map_alias {
				exch pop
				dup /ColorLookup known {
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup /Components known {
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index [null null null null] put
						end
					} ifelse
				} ifelse
				new_names names_index 3 -1 roll /Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup /LookupTables known {
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index [null null null null] put
					end
				} ifelse
			} ifelse
			/names_index names_index 1 add def 
		} forall
		alias_cnt 0 gt {
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge {0 get length}{length}ifelse def
			0 1 names_len 1 sub {
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge {0 get length}{length}ifelse lut_entry_len ne {
					/AliasedColorants false def
					exit
				}
				{
					new_LookupTables names_index get 0 get null eq {
						dup /Names get names_index get /name xdf
						name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq
						or or or not {
							/AliasedColorants false def
							exit
						} if
					} if
				} ifelse
			} for
			lut_entry_len 1 eq {
				/AliasedColorants false def
			} if
			AliasedColorants {
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq {/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod /Additive eq {/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict /TTTablesIdx known not {
					/TTTablesIdx -1 def
				} if
				end
			} if
		}if
		end
	} if
	dup /devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict /AliasedColorants known {
		AliasedColorants
	}{
		false
	} ifelse
	dup not {
		CSA map_csa
	} if
	/TintTransform load type /nulltype eq or {
		/TintTransform [
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup (Cyan) eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup (Magenta) eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0 /exch cvx 0 0
							}
							{
							(Yellow) eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1 /roll cvx 0
								}
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1 /roll cvx
								} ifelse
							} ifelse
						} ifelse
					5 -1 /roll cvx /astore cvx
					}
					{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx /mul cvx /round cvx /cvi cvx /get cvx
					} ifelse
					Names length TTTablesIdx add 1 add 1 /roll cvx
				} for
			Names length [/pop cvx] cvx /repeat cvx
			NComponents Names length
  			TintMethod /Subtractive eq
  				{
  				subtractive_blend
  				}
  				{
  				additive_blend
  				} ifelse
		] cvx bdf
	} if
	AGMCORE_host_sep {
		Names convert_to_process {
			exec_tint_transform
		}
		{	
			currentdict /AliasedColorants known {
				AliasedColorants not
			}{
				false
			} ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants {
				/currentspotalias current_spot_alias def
				false set_spot_alias
			} if
			Names {
				AGMCORE_is_cmyk_sep {
					dup (Cyan) eq AGMCORE_cyan_plate and exch
					dup (Magenta) eq AGMCORE_magenta_plate and exch
					dup (Yellow) eq AGMCORE_yellow_plate and exch
					(Black) eq AGMCORE_black_plate and or or or {
						/devicen_colorspace_dict AGMCORE_gget /TintProc [
							Names names_index /devn_makecustomcolor cvx
						] cvx ddf
						/painted? true def
					} if
					painted? {exit} if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {
					/devicen_colorspace_dict AGMCORE_gget /TintProc [
						Names names_index /devn_makecustomcolor cvx
					] cvx ddf
					/painted? true def
					exit
					} if
				} ifelse
				/names_index names_index 1 add def
			} forall
			AvoidAliasedColorants {
				currentspotalias set_spot_alias
			} if
			painted? {
				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget /TintProc [
					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx
 					0 0 0 0 /setcmykcolor cvx
				] cvx ddf
			} ifelse
			end
		} ifelse
	}
	{
		AGMCORE_in_rip_sep {
			Names convert_to_process not
		}{
			level3
		} ifelse
		{
			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and {
				[
					Names /length cvx [/pop cvx] cvx /repeat cvx
				] cvx bdf
			}{
				{setcolor} bdf
			} ifelse
		}{
			exec_tint_transform
		} ifelse
	} ifelse
	set_crd
	/AliasedColorants false def
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict /CSDBase known {
			CSDBase /CSD get_res begin
			currentdict /Names known {
				currentdict devncs
			}{
				1 currentdict sepcs
			} ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt /Names where {pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal {
					/tableIndex xdf
					Lookup dup type /stringtype eq {
						compCnt tableIndex map_index
					}{
						exec
					} ifelse
					/Names where {
						pop setdevicencolor
					}{
						setsepcolor
					} ifelse
					currentgray
					tableIndex exch
					HiVal mul cvi 
					NewLookup 3 1 roll put
				} for
				[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt
				end
			}{
				level3
				{
					currentdict /Names known {
						[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt
					}{
						[/Indexed [/Separation Name MappedCSA sep_proc_name load] HiVal Lookup] setcolorspace_opt
					} ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict /Names known {
						Lookup dup type /stringtype eq
							{/exch cvx CSDBase /CSD get_res /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}
							{/exec cvx}ifelse
							/TintTransform load /exec cvx
					}{
						Lookup dup type /stringtype eq
							{/exch cvx /get cvx 255 /div cvx}
							{/exec cvx}ifelse
							CSDBase /CSD get_res /MappedCSA get sep_proc_name exch pop /load cvx /exec cvx
					} ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			} ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
						pop [/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{ 
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval {} forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						} bind
					}{
						Lookup
					}ifelse
				}ifelse
				] setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep {
		/indexed_colorspace_dict AGMCORE_gget dup /CSDBase known { 
			begin
			CSDBase /CSD get_res begin
			currentdict /Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
			end
		}{
			/Lookup get 4 3 -1 roll map_index setcmykcolor
		} ifelse
	}{
		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSDBase known and {
			/indexed_colorspace_dict AGMCORE_gget /CSDBase get /CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		} ifelse
	}ifelse
} def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode [0 1] def
		/DataSource <FF> def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict /image get exec
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup /CSD eq {
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	} ifelse
}def
/del_res
{
	{
		aload pop exch
		dup /CSD eq {
			pop 
			{
				//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef
			}forall
		}{
			exch
			{
				1 index undefineresource
			}forall
			pop
		} ifelse
	} forall
}def
/get_res
{
	dup /CSD eq {
		pop
		dup type dup /nametype eq exch /stringtype eq or {
			AGMCORE_CSD_cache exch get
		} if
	}{
		findresource
	} ifelse
}def
/get_csa_by_name
{
	dup type dup /nametype eq exch /stringtype eq or{
		/CSA get_res
	} if
}def
/pattern_buf_init
{
	/count get 0 0 put
} def
/pattern_buf_next
{
	dup /count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
} def
/cachepattern_compress
{
	5 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq {
			pop
		}{
			patarray dup length 1 sub 3 -1 roll put
		} ifelse
		{string_size}{0}ifelse string
	} /LZWEncode filter def
	{ 		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not {exit} if
	} loop
	LZWFilter closefile
	patarray				
	end
}def
/cachepattern
{
	2 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		patarray dup length 1 sub 3 -1 roll put
		not {exit} if
	} loop
	patarray dup dup length 1 sub () put					
	end	
}def
/wrap_paintproc
{ 
  statusdict /currentfilenameextend known{
	clonedict
	begin
	/OldPaintProc /PaintProc load def
	/PaintProc
	{
		mark exch
		dup /OldPaintProc get stopped
		{closefile restore end} if
		cleartomark
	}  def
	end
  } {pop} ifelse
} def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			  1 index begin
		BBox 0 get XStep div cvi XStep mul /xshift exch neg def
		BBox 1 get YStep div cvi YStep mul /yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[ xshift yshift /translate load null /exec load ] dup
		3 /PaintProc load put cvx /PaintProc exch def
		end
	1 index dup /ID get exch /Pattern add_res
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}{null}ifelse
	Intent ne {
		Intent /ColorRendering {findresource} stopped
		{
			pop pop systemdict /findcolorrendering known
			{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				true
			}
			{false} ifelse
		}
		{true} ifelse
		{
			dup begin
			currentdict /TransformPQR known {
				currentdict /TransformPQR get aload pop
				3 {{} eq 3 1 roll} repeat or or
			}
			{true} ifelse
			currentdict /MatrixPQR known {
				currentdict /MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true} ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR [
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add} bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add} bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add} bind
				] def
				/MatrixPQR [ 0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296 ] def
				/RangePQR [-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392] def
				currentdict end
			} if
			setcolorrendering_opt
		} if		
	}if
} def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict /ColorRendering known{
			ColorRendering /ColorRendering {findresource} stopped not {setcolorrendering_opt} if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type /arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process //Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp) flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep) flushinput
	}if
}def
/cpaint_gend
{
	newpath
}def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add} if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0} ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup /Name get map_alias {/CSD put}{pop} ifelse} forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get /CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not {
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put
	} if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		currentdict/TintProc known currentdict/CSA known and 3 1 roll
		//Adobe_AGM_Core begin
		dup /customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			4 -1 roll{
				exch pop /sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
			pop
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd /setpagedevice load def
	/setpagedevice { get_gstate spd set_gstate } def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known{
			currentpagedevice/NegativePrint get //Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<< /NegativePrint //Adobe_AGM_Core/AGMCORE_inverting get >> setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 
		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore
	}if
	end
}def
/lw_save_restore_override {
	/md where {
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{} def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage /showpage load def}
		ifelse
		/showpage {orig_showpage gR} def
		end
	}if
}def
/pscript_showpage_override {
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage /restore load def
		/restore {exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where {
		pop
		md /initializepage known {
			md /initializepage {} put
		} if
		md /rC known {
			md /rC {4{pop}repeat} put
		} if
	}if
	/mysetup where {
		/mysetup [1 0 0 1 0 0] put
	}if
	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
	/PrepsDict where
		{pop}
		{
		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq
			{
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def
	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def
	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end
/set_def_ht
{
	AGMCORE_def_ht sethalftone
} def
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.25 0
%%Copyright: Copyright 1997-2005 Adobe Systems Incorporated.  All Rights Reserved.
%%Version: 2.25 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }
if
userdict /Adobe_CoolType_Core 60 dict dup begin put
/Adobe_CoolType_Version 2.25 def
/Level2?
	systemdict /languagelevel known dup
		{ pop systemdict /languagelevel get 2 ge }
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal /pop load def
	/gcheck { pop false } bind def
	/currentpacking false def
	/setpacking /pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict /Adobe_CoolType_Data 2 copy known not
	 { 2 copy 10 dict put }
if
get
	 begin
	 /@opStackCountByLevel 32 dict def
	 /@opStackLevel 0 def
	 /@dictStackCountByLevel 32 dict def
	 /@dictStackLevel 0 def
	 end
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup /args
			7 index
			5 add array put
			put get
			}
			{
			get dup /args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch /args exch put
				}
				{ pop }
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{ pop count }
			if
			dup /argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{ pop }
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	} bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{ { pop } repeat }
				{ pop }
			ifelse
			args 0 argCount getinterval {} forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{ { end } repeat }
		{ pop }
	ifelse
	} bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	} bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	} bind def
/@ReRaise
	{
	cvx $error /errorname get errordict exch get exec
	stop
	} bind def
/@Stopped
	{
	0 @#Stopped
	} bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{ @_RestoreStackLevels true }
		{ @_PopStackLevels false }
	ifelse
	} bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	} bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch /@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					 { (*) { pop stop } 128 string /Category resourceforall }
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data /@shouldNotDisappearDict get ne dup
					 {
						  /@shouldNotDisappearDictValue known
								{
										  {
												end
												currentdict 1 index eq
													 { pop exit }
												if
										  }
									 loop
								}
						  if
					 }
				if
				end
		}
		{ false }
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{ /steveamerige /Category resourcestatus }
		stopped
			{ cleartomark true }
			{ cleartomark currentglobal not }
		ifelse
		}
		{ false }
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
				{ cleartomark false }
				{ { 3 2 roll pop true } { cleartomark false } ifelse }
			ifelse
			end
		} bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad /ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup /CMap CTHasResourceStatusBug
						{ CTResourceStatus }
						{ resourcestatus }
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup /CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{ exit }
								{ stop }
							ifelse
							}
						ifelse
						}
						{ pop }
					ifelse
					}
				128 string /CMap resourceforall
				}
			stopped
				{ cleartomark }
			stopped pop
			setglobal
			}
		if
		}
	if
	} bind def
/doc_setup
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mov /moveto load def
		/nfnt /newencodedfont load def
		/mfnt /makefont load def
		/sfnt /setfont load def
		/ufnt /undefinefont load def
		/chp /charpath load def
		/awsh /awidthshow load def
		/wsh /widthshow load def
		/ash /ashow load def
		/sh /show load def
		end
		currentglobal false setglobal
	  userdict /Adobe_CoolType_Data 2 copy known not
		  { 2 copy 10 dict put }
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	} bind def
/doc_trailer
	{
	currentdict Adobe_CoolType_Core eq
		{ end }
	if
	} bind def
/page_setup
	{
	Adobe_CoolType_Core begin
	} bind def
/page_trailer
	{
	end
	} bind def
/unload
	{
	systemdict /languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{ undef }
				{ pop pop }
			ifelse
			}
		if
		}
	if
	} bind def
/ndf
	{
	1 index where
		{ pop pop pop }
		{ dup xcheck { bind } if def }
	ifelse
	} def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where { /globaldict get begin } if
			dup where pop exch get
		/globaldict where { pop end } if
		end
	end
Adobe_CoolType_Core_Defined
	{ /systemfindfont exch def }
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{ pop } ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq { 0 } { dup length } ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index /FID eq
				{ pop pop }
				{ def }
			ifelse
			}
		forall
		dup null eq
			{ pop }
			{ { def } forall }
		ifelse
		currentdict
		end
	exch setglobal
	} bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	} bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index  known
			{ SharedFontDirectory 3 index get /FontReferenced known }
			{ false }
		ifelse
		}
		{
		FontDirectory 3 index known
			{ FontDirectory 3 index get /FontReferenced known }
			{
			SharedFontDirectory 3 index known
				{ SharedFontDirectory 3 index get /FontReferenced known }
				{ false }
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont /FontReferenced get
		2 index dup type /nametype eq
			{findfont}
		if ne
			{ pop false }
		if
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{ 2 copy get 3 index 3 1 roll put }
		for
		pop pop pop
		}
		{
		dup type /nametype eq
		  { findfont }
	  if
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index /FID ne
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type /stringtype eq { cvn } if def dup
			currentdict
			end
		definefont def
		}
	ifelse
	} bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type /dicttype ne
			{ 0 dict }
		if
		currentdict /$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{ def } forall
					{ def } forall
					currentdict
					dup /$Init known
						{ dup /$Init get exec }
					if
					end
				/$Strategy exch def
				}
				{ pop pop pop }
			ifelse
			}
			{ pop pop }
		ifelse
		end
	} bind def
/scff
	{
	$SubstituteFont
		begin
		dup type /stringtype eq
			{ dup length exch }
			{ null }
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{ $sname }
			ifelse def
		end
		{ findfont }
	@Stopped
		{
		dup length 8 add string exch
		1 index 0 (BadFont:) putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{ findfont }
		@Stopped
			{ pop /Courier findfont }
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	} bind def
/isWidthsOnlyFont
	{
	dup /WidthsOnly known
		{ pop pop true }
		{
		dup /FDepVector known
			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }
			{
			dup /FDArray known
				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }
				{ pop }
			ifelse
			}
		ifelse
		}
	ifelse
	} bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 4 index def
		/$doSmartSub false def
		end
	3 index
	currentglobal false setglobal exch
	/CompatibleFonts /ProcSet resourcestatus
		{
		pop pop
		/CompatibleFonts /ProcSet findresource
			begin
			dup /CompatibleFont currentexception
			1 index /CompatibleFont true setexception
			1 index /Font resourcestatus
				{
				pop pop
				3 2 roll setglobal
				end
				exch
				dup findfont
				/CompatibleFonts /ProcSet findresource
					begin
					3 1 roll exch /CompatibleFont exch setexception
					end
				}
				{
				3 2 roll setglobal
				1 index exch /CompatibleFont exch setexception
				end
				findfont
				$SubstituteFont /$substituteFound true put
				}
			ifelse
		}
		{ exch setglobal findfont }
	ifelse
	$SubstituteFont
		begin
		$substituteFound
			{
		 false
		 (%%[Using embedded font ) print
		 5 index ?str1 cvs print
		 ( to avoid the font substitution problem noted earlier.]%%\n) print
		 }
			{
			dup /FontName known
				{
				dup /FontName get $fontname eq
				1 index /DistillerFauxFont known not and
				/currentdistillerparams where
					{ pop false 2 index isWidthsOnlyFont not and }
				if
				}
				{ false }
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		exch pop exch pop exch
		2 dict dup /Found 3 index put
		exch findfont exch
		}
		{
		exch exec
		exch dup findfont
		dup /FontType get 3 eq
	  {
		  exch ?str1 cvs
		  dup length 1 sub
		  -1 0
		{
			  exch dup 2 index get 42 eq
			{
				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop
				 exit
			  }
			  {exch pop} ifelse
		  }for
		}
		{
		 exch pop
	  } ifelse
		2 dict dup /Downloaded 6 5 roll put
		}
	ifelse
	dup /FontName 4 index put copyfont definefont pop
	} bind def
/?str2 256 string def
/?add
	{
	1 index type /integertype eq
		{ exch true 4 2 }
		{ false 3 1 }
	ifelse
	roll
	1 index findfont
	dup /Widths known
		{
		Adobe_CoolType_Data /AddWidths? true put
		gsave dup 1000 scalefont setfont
		}
	if
	/Downloaded known
		{
		exec
		exch
			{
			exch ?str2 cvs exch
			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length
			?str1 1 index 1 add 3 index putinterval
			exch length 1 add 1 index add
			?str1 2 index (*) putinterval
			?str1 0 2 index getinterval cvn findfont 
			?str1 3 index (+) putinterval
			2 dict dup /FontName ?str1 0 6 index getinterval cvn put
			dup /Downloaded Downloaded put end copyfont
			dup /FontName get exch definefont pop pop pop
			}
			{
			pop
			}
		ifelse
		}
		{
		pop
		exch
			{
			findfont
			dup /Found get
			dup length exch ?str1 cvs pop
			?str1 1 index (+) putinterval
			?str1 1 index 1 add 4 index ?str2 cvs putinterval
			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn
			1 dict exch 1 index exch /FontName exch put copyfont
			dup /FontName get exch definefont pop
			}
			{
			pop
			}
		ifelse
		}
	ifelse
	Adobe_CoolType_Data /AddWidths? get
		{ grestore Adobe_CoolType_Data /AddWidths? false put }
	if
	} bind def
/?sh
	{
	currentfont /Downloaded known { exch } if pop
	} bind def
/?chp
	{
	currentfont /Downloaded known { pop } { false chp } ifelse
	} bind def
/?mv 
	{
	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse
	} bind def
setpacking
userdict /$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{ get }
			{ pop pop { pop /Courier } bind }
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams /CannotEmbedFontPolicy 2 copy known
			{ get /Error eq }
			{ pop pop false }
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup /WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type /stringtype eq { cvn } if def
								/FontType 3 def
								/FontMatrix [ .001 0 0 .001 0 0 ] def
								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def
								/FontBBox [ 0 0 0 0 ] def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth /y exch def /x exch def
											x y setcharwidth
											$SubstituteFont /$Strategy get /$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									} bind def
								currentdict
								end
							exch setglobal
							} bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup /WMode known
										{ dup /WMode get }
										{ 0 }
									ifelse
									/$WMode exch def
									$fontname exch
									dup /FontName known
										{
										dup /FontName get
										dup type /stringtype eq { cvn } if
										}
										{ /unnamedfont }
									ifelse
									exch
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
									1 index /FontName get known
										{
										pop
										Adobe_CoolType_Data /InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{ $deepcopyfont }
									ifelse
									exch 1 index exch /FontBasedOn exch put
									dup /FontName $fontname dup type /stringtype eq { cvn } if put
									definefont
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
										begin
										dup /FontBasedOn get 1 index def
										end
									} bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{ /y 1000 def }
										{ /x -1000 def 500 120 translate }
									ifelse
									Level2?
										{
										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]
										setcolorspace
										}
										{ 0 setgray }
									ifelse
									10 setlinewidth
									x .8 mul
									[ 7 3 ]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{ .2 setcolor }
											{ .8 setgray }
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									} bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict /FontName known
											{
											FontName
											dup type /stringtype eq { cvn } if
											}
											{ /unnamedfont }
										ifelse
										def
										/FontName $fontname dup type /stringtype eq { cvn } if def
										/currentdistillerparams where
											{ pop }
											{
											/FontInfo currentdict /FontInfo known
												{ FontInfo null copyfont }
												{ 2 dict }
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									} bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont {} bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type /stringtype eq { cvn } if
						dup /$fontname exch def
						$sname null eq
							{ $str cvs dup length $slen sub $slen getinterval }
							{ pop $sname }
						ifelse
						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont /$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{ /$match exch def exit }
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont /$dstack get
								{
								exch
									{
									1 index eq
										{ pop false }
										{ true }
									ifelse
									}
									{ begin false }
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{ $match (fonts/) anchorsearch pop pop cvn }
							{ /Courier }
						ifelse
						} bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1  [ /Ryumin-Light /HeiseiMin-W3
										  /GothicBBB-Medium /HeiseiKakuGo-W5
										  /HeiseiMaruGo-W4 /Jun101-Light ] def
							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def
							/GB1	  [ /STSong-Light /STHeiti-Regular ] def
							/CNS1	 [ /MKai-Medium /MHei-Medium ] def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup /FontType get 0 eq
							{
							1 dict dup /FontName /copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup /FontName /copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{ $Strategies /$Type3Underprint get exec }
						ifelse
						} bind def
					/$buildfontname
						{
						dup /CIDFont findresource /CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index (-) putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy (-) putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }
							{ pop pop pop pop pop }
						ifelse
						length
						$str 1 index (-) putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						} bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{ get }
								{ pop pop [] }
							ifelse
							}
							{ pop pop [] }
						ifelse
						false exch
							{
							dup /CIDFont resourcestatus
								{
								pop pop
								save
								1 index /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get }
									{ false }
								ifelse
								exch pop
								exch restore
									{ pop }
									{ exch pop true exit }
								ifelse
								}
								{ pop }
							ifelse
							}
						forall
							{ $str cvs $buildfontname }
							{
							false (*)
								{
								save exch
								dup /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get not }
									{ true }
								ifelse
								exch /CIDSystemInfo get
								dup /Registry get Registry eq
								exch /Ordering get Ordering eq and and
									{ exch restore exch pop true exit }
									{ pop restore }
								ifelse
								}
							$str /CIDFont resourceforall
								{ $buildfontname }
								{ $fontname $findfontByEnum }
							ifelse
							}
						ifelse
						} bind def
					end
				end
				currentdict /$error known currentdict /languagelevel known and dup
					{ pop $error /SubstituteFont known }
				if
				dup
					{ $error }
					{ Adobe_CoolType_Core }
				ifelse
				begin
					{
					/SubstituteFont
					/CMap /Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{ dup $str cvs dup length $slen sub $slen getinterval cvn }
									{ $sname }
								ifelse
								Adobe_CoolType_Data /InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{ exch pop true exit }
												{ pop }
											ifelse
											}
											{
											FontDirectory 1 index known
												{ exch pop true exit }
												{
												GlobalFontDirectory 1 index known
													{ exch pop true exit }
													{ pop }
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{ pop pop false }
								ifelse
									{
									exch pop exch pop
									}
									{
									dup /CMap resourcestatus
										{
										pop pop
										dup /$cmapname exch def
										/CMap findresource /CIDSystemInfo get { def } forall
										$findfontByROS
										}
										{
										128 string cvs
										dup (-) search
											{
											3 1 roll search
												{
												3 1 roll pop
													{ dup cvi }
												stopped
													{ pop pop pop pop pop $findfontByEnum }
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup /CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup /$cmapname exch def
															/CMap findresource /CIDSystemInfo get { def } forall
															$findfontByROS
															true exit
															}
															{ pop }
														ifelse
														}
													for
													dup type /booleantype eq
														{ pop }
														{ pop pop pop $findfontByEnum }
													ifelse
													}
												ifelse
												}
												{ pop pop pop $findfontByEnum }
											ifelse
											}
											{ pop pop $findfontByEnum }
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{ //SubstituteFont exec }
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{ $findfontByEnum }
								{ //SubstituteFont exec }
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core /scfindfont /systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup /FontName known
								{ dup /FontName get dup 3 index ne }
								{ /noname true }
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def /$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{ 1 index /FID eq { pop pop } { def } ifelse }
										forall
										currentdict
										end
									definefont
									dup /FontName known { dup /FontName get } { null } ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using ) print
										dup /FontName known
											{ dup /FontName get } { (unspecified font) }
										ifelse
										$str cvs print (.\n) print
										}
									if
									}
									{ exch pop }
								ifelse
								}
								{ exch pop }
							ifelse
							end
						} bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core /findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type /stringtype ne { $str cvs } if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{ dup $inVMIndex $AddInVMFont }
						if
						$doSmartSub
							{
							currentdict /$Strategy known
								{ $Strategy /$BuildFont get exec }
							if
							}
						if
						}
					if
					end
				} bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch /FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data /InVMFontsByCMap get exch
		$DictAdd
		}
		{ pop pop pop }
	ifelse
	} bind def
/$DictAdd
	{
	2 copy known not
		{ 2 copy 4 index length dict put }
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get { forall } def
				2 copy currentdict put
				end
			}
			{ pop }
		ifelse
		}
	if
	get
		begin
			{ def }
		forall
		end
	} bind def
end
end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.21 0
%%Copyright: Copyright 1987-2005 Adobe Systems Incorporated.
%%Version: 1.21 0
systemdict /languagelevel known dup
	{ currentglobal false setglobal }
	{ false }
ifelse
exch
userdict /Adobe_CoolType_Utility 2 copy known
	{ 2 copy get dup maxlength 27 add dict copy }
	{ 27 dict }
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		  <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch /eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{ globaldict begin currentglobal true setglobal }
if
	/ct_AddStdCIDMap
		ct_Level2?
			{ {
				mark
				Adobe_CoolType_Utility /@recognizeCIDFont currentdict put
					 {
					 ((Hex) 57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec
					 }
				stopped
					 {
					 cleartomark
					 Adobe_CoolType_Utility /@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						  {
						  2 copy get 3 index eq
								{ 1 index length exch sub 1 sub { end } repeat exit }
								{ pop }
						  ifelse
						  }
					 for
					 pop pop
					 Adobe_CoolType_Utility /@eexecStartData get eexec
					 }
					 { cleartomark }
				ifelse
			} }
			{ {
				Adobe_CoolType_Utility /@eexecStartData get eexec
			} }
		ifelse bind def
userdict /cid_extensions known
dup { cid_extensions /cid_UpdateDB known and } if
	 {
	 cid_extensions
	 begin
	 /cid_GetCIDSystemInfo
		 {
		 1 index type /stringtype eq
			 { exch cvn exch }
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				 {
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					 {
					 1 index load
					 3 index get
					 dup null eq
						  { pop pop cid_UpdateDB }
						  {
						  exch
						  1 index /Created get eq
							  { exch pop exch pop }
							  { pop cid_UpdateDB }
						  ifelse
						  }
					 ifelse
					 }
					 { pop cid_UpdateDB }
				 ifelse
				 }
				 { cid_UpdateDB }
			 ifelse
			 end
		 } bind def
	 end
	 }
if
ct_Level2?
	{ end setglobal }
if
	/ct_UseNativeCapability?  systemdict /composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring () def
		/usewidths? true def
		end def
	ct_Level2? { setglobal } { pop } ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict /languagelevel known
				{ pop /CIDFont findresource /GlyphDirectory get }
				{
				1 index /CIDFont findresource /GlyphDirectory
				get dup type /dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			} def
		/+
			{
			systemdict /languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{ 1 dict begin }
			ifelse
			/$ exch def
			systemdict /languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			? { $ begin } if
			} def
		/? { $ type /dicttype eq } def
		/| {
			userdict /Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data /AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					  begin
						AddWidths?
								{
								Adobe_CoolType_Data /CC 3 index put
								? { def } { $ 3 1 roll put } ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont /Widths get exch CC exch put
								}
								{ ? { def } { $ 3 1 roll put } ifelse }
							ifelse
					end
				end
				}
				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse
				}
				{ ? { def } { $ 3 1 roll put } ifelse }
			ifelse
			} def
		/!
			{
			? { end } if
			systemdict /languagelevel known
				{ gvm setglobal }
			if
			end
			} def
		/: { string currentfile exch readstring pop } executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx [.001 0 0 .001 0 0] def
		/ct_1000Mtx [1000 0 0 1000 0 0] def
		/ct_raise {exch cvx exch errordict exch get exec stop} bind def
		/ct_reraise
			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print
					errordict exch get exec stop
			} bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			} bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility /ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{ dup string /dst_string exch def }
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex  get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string  dst_index 2 index putinterval
						length dst_index add /dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string  dst_index 2 index putinterval
						pop dup dst_index add /dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							  { arrayIndex get }
							  {
							  pop
							  exit
							  }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			} bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{ /unknowninstancename /Category resourcestatus }
			stopped
				{ cleartomark setglobal true }
				{ cleartomark currentglobal not exch setglobal }
			ifelse
				{
					{
					mark 3 1 roll /Category findresource
						begin
						ct_Vars /vm currentglobal put
						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
							{ cleartomark false }
							{ { 3 2 roll pop true } { cleartomark false } ifelse }
						ifelse
						ct_Vars /vm get setglobal
						end
					}
				}
				{ { resourcestatus } }
			ifelse bind def
			/CIDFont /Category ct_resourcestatus
				{ pop pop }
				{
				currentglobal  true setglobal
				/Generic /Category findresource
				dup length dict copy
				dup /InstanceType /dicttype put
				/CIDFont exch /Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit /ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				  /Registry (Adobe) def
				  /Ordering (Identity) def
				  /Supplement 0 def
				end def
				/CMapName /Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000> <FFFF>
				endcodespacerange
				1 begincidrange
				<0000> <FFFF> 0
				endcidrange
				endcmap
				CMapName currentdict /CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont  10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{ pop pop /defineresource /undefined ct_raise }
				ifelse
				} bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{ get 3 1 roll pop pop}
						{ pop pop /findresource /undefinedresource ct_raise }
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/ct_resourcestatus /resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup (Binary) eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{ cid_BYTE_COUNT () /SubFileDecode filter }
							stopped
								{ pop pop pop }
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup (Hex) eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{ null exch /ASCIIHexDecode filter /readstring }
							stopped
								{ pop exch pop (>) exch /readhexstring }
							if
							}
							{ (>) exch /readhexstring }
						ifelse
						load
						exit
						}
					if
					/StartData /typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch /GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop /readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				} bind def
			/StartData
				{
				mark
					{
					currentdict
					dup /FDArray get 0 get /FontMatrix get
					0 get 0.001 eq
						{
						dup /CDevProc known not
							{
							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known
								{ get }
								{
								pop pop
								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }
								}
							ifelse
							def
							}
						if
						}
						{
						 /CDevProc
							 {
							 pop pop pop pop pop
							 0
							 1 cid_temp /cid_CIDFONT get
							 /FDArray get 0 get
							 /FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							 } def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup /cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup /SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup /SubrMapOffset undef
										dup /SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{ pop }
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict /CIDFont defineresource pop
					end end
					}
				stopped
					{ cleartomark /StartData ct_reraise }
				if
				} bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit /ProcSet ct_resourcestatus
				{ true }
				{ /CIDInitC /ProcSet ct_resourcestatus }
			ifelse
				{
				pop pop
				/CIDInit /ProcSet findresource
				ct_UseNativeCapability?
					{ pop null }
					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }
				ifelse
				}
				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }
			ifelse
			ct_Vars exch /ct_oldCIDInit exch put
			} bind def
		/ct_restoreCIDInit
			{
			ct_Vars /ct_oldCIDInit get dup null ne
				{ /CIDInit exch /ProcSet defineresource pop }
				{ pop }
			ifelse
			} bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility /ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{ pop 0 }
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{ get }
								{ pop pop nullstring }
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{ 0 FDBytes ct_cvnsi }
									{ pop 0 }
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{ /charstring nullstring def exit }
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			} def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			} def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont /Widths get cid
					2 copy known
						{ get exch pop aload pop }
						{ pop pop stringwidth }
					ifelse
					}
					{ stringwidth }
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			} def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{ get }
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup /FontMatrix 2 copy known
						{ get }
						{ pop pop ct_defaultFontMtx }
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont /Widths get def
					/CharStrings 1 dict dup /.notdef
						<d841272cf18f54fc13> dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup /CharStrings get 1 index /Encoding get
			ct_dfCharCode get charstring put
			rootfont /WMode 2 copy known
				{ get }
				{ pop pop 0 }
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ ct_str1 show }
			ifelse
			} def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ ct_1000Mtx matrix concatmatrix concat }
				{ pop }
			ifelse
			/Private get
			Adobe_CoolType_Utility /ct_Level2? get not
				{
				ct_dfDict /Private
				3 -1 roll
					{ put }
				1183615869 internaldict /superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility /ct_Level2? get
				{ 1 index }
				{ 3 index /Private get mark 6 1 roll }
			ifelse
			dup /RunInt known
				{ /RunInt get }
				{ pop /CCRun }
			ifelse
			get exec
			Adobe_CoolType_Utility /ct_Level2? get not
				{ cleartomark }
			if
			} bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility /ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{ stop }
			if
			end
			end
			end
			end
			} bind def
		/BaseFontNameStr (BF00) def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/BuildChar /ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString /ct_Type3ShowCharString load def
				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup /lenIV 4 put def
				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def
				/PaintType 0 def
				/ct_ShowCharString /ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{ exit }
				if
				}
			for
			exch pop exch pop
			} bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch /WMode exch def
				exch /FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup /FontMatrix known
				{ dup /FontMatrix get /FontMatrix exch def }
				{ /FontMatrix matrix def }
			ifelse
				/bfCount 1 index /CIDCount get 256 idiv 1 add
					dup 256 gt { pop 256} if def
				/Encoding
					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for
					bfCount 1 255 { 2 copy bfCount put pop } for
					def
				/FDepVector bfCount dup 256 lt { 1 add } if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont /FontBBox known
						{ CIDFont /FontBBox get /FontBBox exch def }
					if
					CIDFont /CDevProc known
						{ CIDFont /CDevProc get /CDevProc exch def }
					if
					currentdict
					end
				BaseFontNameStr 3 (0) putinterval
				0 1 bfCount dup 256 eq { 1 sub } if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup /CIDFirstByte exch 256 mul def
						FontType 3 eq
							{ /ct_FDDict 2 dict def }
						if
						currentdict
						end
					1 index  16
					BaseFontNameStr  2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont /Widths get
						begin
						exch /CIDFont get /GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{ exch pop }
			ifelse
			} bind def
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{
				2 index /CMap ct_resourcestatus
					{ pop pop exch pop }
					{
					/CIDInit /ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch /WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry (Adobe) def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-) search
									{
									pop pop
									(-) search
										{
										dup length string copy
										exch pop exch pop
										}
										{ pop (Identity)}
									ifelse
									}
									{ pop  (Identity)  }
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000> <FFFF>
							endcodespacerange
							1 begincidrange
							<0000> <FFFF> 0
							endcidrange
							endcmap
							CMapName currentdict /CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index /CMap ct_resourcestatus
					{ pop pop }
					{
					/CIDInit /ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry (Adobe) def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-) search
							{
							pop pop
							(-) search
								{ dup length string copy exch pop exch pop }
								{ pop (Identity) }
							ifelse
							}
							{ pop (Identity) }
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000> <FFFF>
					endcodespacerange
					1 begincidrange
					<0000> <FFFF> 0
					endcidrange
					endcmap
					CMapName currentdict /CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		currentdict readonly pop
		end
	end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict /ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
  version
  cvi
  2015
  ge
} bind def
/AllocGlyphStorage
{
  Is2015?
  {	
		pop
  } 
  { 
		{string} forall
  } ifelse
} bind def
/Type42DictBegin
{
	25 dict begin
  /FontName exch def
  /CharStrings 256 dict 
	begin
		  /.notdef 0 def
		  currentdict 
	end def
  /Encoding exch def
  /PaintType 0 def
  /FontType 42 def
  /FontMatrix [1 0 0 1 0 0] def
  4 array  astore cvx /FontBBox exch def
  /sfnts
} bind def
/Type42DictEnd  
{
	 currentdict dup /FontName get exch definefont end
	ct_T42Dict exch
	dup /FontName get exch put
} bind def
/RD {string currentfile exch readstring pop} executeonly def
/PrepFor2015
{
	Is2015?
	{		  
		 /GlyphDirectory 
		 16
		 dict def
		 sfnts 0 get
		 dup
		 2 index
		 (glyx)
		 putinterval
		 2 index  
		 (locx)
		 putinterval
		 pop
		 pop
	}
	{
		 pop
		 pop
	} ifelse			
} bind def
/AddT42Char
{
	Is2015?
	{
		/GlyphDirectory get 
		begin
		def
		end
		pop
		pop
	}
	{
		/sfnts get
		4 index
		get
		3 index
	  2 index
		putinterval
		pop
		pop
		pop
		pop
	} ifelse
} bind def
/T0AddT42Mtx2
{
	/CIDFont findresource /Metrics2 get begin def end
}bind def
end
%%EndResource
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Image 75 dict dup begin put
/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf () def
/AGMIMG_ybuf () def
/AGMIMG_kbuf () def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/doc_setup
{ 
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage /colorimage ldf
	}if
	end
	end
}def
/page_setup
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists {/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				 }ifelse
			 }ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
	}ifelse
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/devnimg /devn_imageormask ldf
	/idximg /indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer
{
}def
/AGMIMG_flushfilters
{
	dup type /arraytype ne
		{1 array astore}if
	aload length
		{
		dup type /filetype eq
			{
			dup status 1 index currentfile ne and
				{dup flushfile closefile}
				{pop}
			ifelse
			}{pop}ifelse
		} repeat
}def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask {
					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint {
		0 get dup type /nametype eq {
			dup /DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			} forall
			not
		} ifelse
	}{
		pop false
	}ifelse
}def
/process_mask_L3
{
	dup begin
	/ImageType 1 def
	end
	4 dict begin
		/DataDict exch def
		/ImageType 3 def
		/InterleaveType 3 def
		/MaskDict 9 dict begin
			/ImageType 1 def
			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def
			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def
			/ImageMatrix [Width 0 0 Height neg 0 Height] def
			/NComponents 1 def
			/BitsPerComponent 1 def
			/Decode [0 1] def
			/DataSource AGMIMG_maskSource def
		currentdict end def
	currentdict end
}def
/use_mask
{
	dup type /dicttype eq
	{
		dup /Mask known	{
			dup /Mask get {
				level3
				{true}
				{
					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch
					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse
					3 -1 roll and
				} ifelse
			}
			{false} ifelse
		}
		{false} ifelse
	}
	{false} ifelse
}def
/make_line_source
{
	begin
	MultipleDataSources {
		[
		Decode length 2 div cvi {Width string} repeat
		]
	}{
		Width Decode length 2 div mul cvi string
	}ifelse
	end
}def
/datasource_to_str
{
	exch dup type
	dup /filetype eq {
		pop exch readstring
	}{
		/arraytype eq {
			exec exch copy
		}{
			pop
		}ifelse
	}ifelse
	pop
}def
/masked_image_simulation
{
	3 dict begin
	dup make_line_source /line_source xdf
	/mask_source AGMIMG_maskSource /LZWDecode filter def
	dup /Width get 8 div ceiling cvi string /mask_str xdf
	begin
	gsave
	0 1 translate 1 -1 Height div scale
	1 1 Height {
		pop
		gsave
		MultipleDataSources {
			0 1 DataSource length 1 sub {
				dup DataSource exch get
				exch line_source exch get
				datasource_to_str
			} for
		}{
			DataSource line_source datasource_to_str
		} ifelse
		<<
			/PatternType 1
			/PaintProc [
				/pop cvx
				<<
					/ImageType 1
					/Width Width
					/Height 1
					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix
					/MultipleDataSources MultipleDataSources
					/DataSource line_source
					/BitsPerComponent BitsPerComponent
					/Decode Decode
				>>
				/image cvx
			] cvx
			/BBox [0 0 Width 1]
			/XStep Width
			/YStep 1
			/PaintType 1
			/TilingType 2
		>>
		matrix makepattern set_pattern
		<<
			/ImageType 1
			/Width Width
			/Height 1
			/ImageMatrix Width 1 matrix scale
			/MultipleDataSources false
			/DataSource mask_source mask_str readstring pop
			/BitsPerComponent 1
			/Decode [0 1]
		>>
		imagemask
		grestore
		0 1 translate
	} for
	grestore
	end
	end
}def
/imageormask
{
	begin
		SkipImageProc {
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq DeviceN_PS2 not and {
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					use_mask {
						level3 {process_mask_L3 image}{masked_image_simulation}ifelse
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not {
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file {
									Names {
										dup (None) ne {
											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq {true setoverprint} if
											/names_index names_index 1 add def
										}{
											pop
										} ifelse
									} forall
									close_image_file
								} if
								grestore
								end
							}{
								Operator /imagemask eq {
									imagemask
								}{
									image
								} ifelse
							} ifelse
						}{
							Operator /imagemask eq {
								imagemask
							}{
								image
							} ifelse
						} ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					/Adobe_AGM_OnHost_Seps where {
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource [
											DataSource 0 get /exec cvx
											DataSource 1 get /exec cvx
											DataSource 2 get /exec cvx
											DataSource 3 get /exec cvx
											/AGMCORE_get_ink_data cvx
										] cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0 () /SubFileDecode filter def
									}ifelse
									/Decode [ Decode 0 get Decode 1 get ] def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator /image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
  			 							1 AGMCORE_&setgray
  			 							currentdict imageormask_sys
  			 						}{
  			 							currentdict ignoreimagedata
  			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								/DoImage true def
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys} if
							}{
								use_mask {
									level3 {process_mask_L3 image}{masked_image_simulation}ifelse
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator /imagemask eq{
 											/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									[ /Separation Name [/DeviceGray]
	 									{ 
	 										sep_colorspace_proc AGMCORE_get_ink_data
											1 exch sub
	 									} bind
										] AGMCORE_&setcolorspace
										/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name (All) eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
	end
}def
/decode_image_sample
{
	4 1 roll exch dup 5 1 roll
	sub 2 4 -1 roll exp 1 sub div mul add
} bdf
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
} bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub {
			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx
			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx
		} for
	] cvx bind
	end
} bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0 () /SubFileDecode filter
				BitsPerComponent 8 idiv string /readstring cvx /pop cvx /putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0 () /SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv {DataSource /read cvx /not cvx{0}/if cvx /mul cvx}repeat /mul cvx /add cvx
			}for
		/convProc load /exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2 /add cvx /index cvx
			3 1 /roll cvx /exch cvx 255 /mul cvx /cvi cvx /put cvx
			}for
	]bind cvx 0 () /SubFileDecode filter
	end
} bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs [ 3 -1 roll begin
		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt {1 add 2 div cvi}{exit}ifelse
			} loop
			string
		} repeat
		end ] def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_producing_seps not {
			level3 not {
				Operator /imagemask ne {
					/DataSource [ [
						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
						devn_alt_datasource 1 /string cvx /readstring cvx /pop cvx] cvx colorSpaceElemCnt 1 sub{dup}repeat] def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				} if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process {
					CSA get_csa_by_name 0 get /DeviceCMYK eq {
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
							devn_alt_datasource
						filter_cmyk 0 () /SubFileDecode filter def
						/MultipleDataSources false def
						/Decode [1 0] def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate {
							/DataSource
								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
								CSA get_csa_by_name 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				 			currentdict imageormask_sys
				 		}
						{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						} ifelse
 					} ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
	 					Operator/imagemask ne{
	 						MultipleDataSources {
		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						} ifelse
							invert_image_samples
	 					} if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{ 			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN [
				AGMIMG_c 0 ne {/Cyan} if
				AGMIMG_m 0 ne {/Magenta} if
				AGMIMG_y 0 ne {/Yellow} if
				AGMIMG_k 0 ne {/Black} if
				] /DeviceCMYK {}] setcolorspace
				AGMIMG_c 0 ne {AGMIMG_c} if
				AGMIMG_m 0 ne {AGMIMG_m} if
				AGMIMG_y 0 ne {AGMIMG_y} if
				AGMIMG_k 0 ne {AGMIMG_k} if
				setcolor			
			}{	
				/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
				[/Indexed 				
					[
						/DeviceN [
							AGMIMG_c 0 ne {/Cyan} if
							AGMIMG_m 0 ne {/Magenta} if
							AGMIMG_y 0 ne {/Yellow} if
							AGMIMG_k 0 ne {/Black} if
						] 
						/DeviceCMYK {
							AGMIMG_k 0 eq {0} if
							AGMIMG_y 0 eq {0 exch} if
							AGMIMG_m 0 eq {0 3 1 roll} if
							AGMIMG_c 0 eq {0 4 1 roll} if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				] setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {
					/CSA get get_csa_by_name
				}{
					/Names get
				} ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN {
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					} ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator /imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN {
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget begin
					CSA get_csa_by_name 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {
						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]
						setcolorspace
					} if
					end
				} ifelse
				imageormask
				Indexed_DeviceN {
					end
				} if
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not {
			currentcolorspace 
			dup 1 /DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		} if
		currentdict 
		Operator /imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask {
				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
  /OPIimage
  {
  	dup type /dicttype ne{
  		10 dict begin
  			/DataSource xdf
  			/ImageMatrix xdf
  			/BitsPerComponent xdf
  			/Height xdf
  			/Width xdf
  			/ImageType 1 def
  			/Decode [0 1 def]
  			currentdict
  		end
  	}if
  	dup begin
  		/NComponents 1 cdndf
  		/MultipleDataSources false cdndf
  		/SkipImageProc {false} cdndf
  		/HostSepColorImage false cdndf
  		/Decode [
  				0 
  				currentcolorspace 0 get /Indexed eq{
  					2 BitsPerComponent exp 1 sub
  				}{
  					1
  				}ifelse
  		] cdndf
  		/Operator /image cdndf
  	end
  	/sep_colorspace_dict AGMCORE_gget null eq{
  		imageormask
  	}{
  		gsave
  		dup begin invert_image_samples end
  		sep_imageormask
  		grestore
  	}ifelse
  }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter /WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0 (%EndMask) /SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not {exit} if
	}loop
	WriteFilter closefile
	end
}def
/cachemask_level3
{
	currentfile
	<<
		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]
		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]
		/Intent 1
	>>
	/ReusableStreamDecode filter
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type /dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode [/customcolor_tint AGMCORE_gget 0] def
				/Operator /image def
				/HostSepColorImage false def
				/SkipImageProc {false} def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA [ /DeviceCMYK ] 
			/TintMethod /Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components [ AGMIMG_colorAry aload pop pop ] 
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat
	}{
	}ifelse
	end
} def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					} if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage	
		end
	} def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				} currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get /DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer
						currentdict imageormask
					}{ 
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get /DeviceGray eq {
						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get /DeviceCMYK eq {
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{ 
							currentcolortransfer
							{pop 1} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{ 
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get /DeviceGray eq {
					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
Adobe_AGM_Image/doc_setup get exec
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
/currentdistillerparams where
{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse
{ userdict /AI11_PDFMark5 /cleartomark load put
userdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}
{ userdict /AI11_PDFMark5 /pdfmark load put
userdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse
[/NamespacePush AI11_PDFMark5
[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5
[{ai_metadata_stream_123}
currentfile 0 (%  &&end XMP packet marker&&)
/SubFileDecode filter AI11_ReadMetadata_PDFMark5
<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1.1-111">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS2</xap:CreatorTool>
         <xap:CreateDate>2009-11-11T11:30:27+09:00</xap:CreateDate>
         <xap:ModifyDate>2009-11-11T11:30:28+09:00</xap:ModifyDate>
         <xap:MetadataDate>2009-11-11T11:30:28+09:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>220</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA3AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYqhb3VdLsCovryC1Lqzr68iR1VCodhyI2XmtT2qMVY1q/5o+XNKWSW6jufqqS3UIulRDG&#xA;31AL9ZdauGKRuxSvHdlIFdqqp/a65Z3Gr3OlBZI7q3iiuF9ReKywy1AkiNfiCsCrVoQe1CCVUwxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kse8/8A6fHla7bQb6DTdRUxst7cuscUaK4M&#xA;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&#xA;q7FXYq7FXYq7FXYq7FX/2Q==</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:DEFBE397D04711DE93918061E72515EA</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:DEFBE398D04711DE93918061E72515EA</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:DEFBE396D04711DE93918061E72515EA</stRef:instanceID>
            <stRef:documentID>uuid:DEFBE395D04711DE93918061E72515EA</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>
%  &&end XMP packet marker&&
[{ai_metadata_stream_123}
<</Type /Metadata /Subtype /XML>>
/PUT AI11_PDFMark5
[/Document
1 dict begin /Metadata {ai_metadata_stream_123} def
currentdict end /BDC AI11_PDFMark5
%AI12_RMC_Transparency: Balance=75 RasterRes=400 GradRes=200 Text=0 Stroke=1 Clip=1 OP=0
Adobe_AGM_Utils begin
Adobe_AGM_Core/page_setup get exec
Adobe_AGM_Core/capture_currentpagedevice get exec
Adobe_CoolType_Core/page_setup get exec
Adobe_AGM_Image/page_setup get exec
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
1 -1 scale 0 -480.667 translate
[1 0 0 1 0 0 ]  concat
% page clip
gsave
newpath
gsave % PSGState
0 0 mo
0 480.667 li
568.032 480.667 li
568.032 0 li
cp
clp
[1 0 0 1 0 0 ] concat
521.012 309.419 mo
511.387 309.419 li
511.387 289.052 li
521.012 289.052 li
521.012 309.419 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0.4 cmyk
f
0.75 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
521.012 309.419 mo
511.387 309.419 li
511.387 289.052 li
521.012 289.052 li
521.012 309.419 li
cp
0 0 0 1 cmyk
@
494.877 289.101 mo
484.98 289.101 li
484.98 269.537 li
494.877 269.537 li
494.877 289.101 li
cp
0 0 0 0.4 cmyk
f
494.877 289.101 mo
484.98 289.101 li
484.98 269.537 li
494.877 269.537 li
494.877 289.101 li
cp
0 0 0 1 cmyk
@
531.91 106.719 mo
522.285 106.719 li
522.285 102.084 li
531.91 102.084 li
531.91 106.719 li
cp
0 0 0 0.4 cmyk
f
0.25 lw
531.91 106.719 mo
522.285 106.719 li
522.285 102.084 li
531.91 102.084 li
531.91 106.719 li
cp
0 0 0 1 cmyk
@
470.41 106.533 mo
460.785 106.533 li
460.785 102.083 li
470.41 102.083 li
470.41 106.533 li
cp
0 0 0 0.4 cmyk
f
470.41 106.533 mo
460.785 106.533 li
460.785 102.083 li
470.41 102.083 li
470.41 106.533 li
cp
0 0 0 1 cmyk
@
506.16 112.643 mo
496.535 112.643 li
496.535 106.661 li
506.16 106.661 li
506.16 112.643 li
cp
0 0 0 0.4 cmyk
f
506.16 112.643 mo
496.535 112.643 li
496.535 106.661 li
506.16 106.661 li
506.16 112.643 li
cp
0 0 0 1 cmyk
@
481.66 120.364 mo
472.035 120.364 li
472.035 112.607 li
481.66 112.607 li
481.66 120.364 li
cp
0 0 0 0.4 cmyk
f
481.66 120.364 mo
472.035 120.364 li
472.035 112.607 li
481.66 112.607 li
481.66 120.364 li
cp
0 0 0 1 cmyk
@
502.41 88.439 mo
492.785 88.439 li
492.785 87.0522 li
502.41 87.0522 li
502.41 88.439 li
cp
0 0 0 0.4 cmyk
f
0.1 lw
502.41 88.439 mo
492.785 88.439 li
492.785 87.0522 li
502.41 87.0522 li
502.41 88.439 li
cp
@
473.91 90.1816 mo
464.285 90.1816 li
464.285 88.4346 li
473.91 88.4346 li
473.91 90.1816 li
cp
f
473.91 90.1816 mo
464.285 90.1816 li
464.285 88.4346 li
473.91 88.4346 li
473.91 90.1816 li
cp
0 0 0 1 cmyk
@
519.723 90.1348 mo
510.098 90.1348 li
510.098 88.4072 li
519.723 88.4072 li
519.723 90.1348 li
cp
0 0 0 0.4 cmyk
f
0.15 lw
519.723 90.1348 mo
510.098 90.1348 li
510.098 88.4072 li
519.723 88.4072 li
519.723 90.1348 li
cp
0 0 0 1 cmyk
@
488.91 92.4746 mo
479.285 92.4746 li
479.285 90.1831 li
488.91 90.1831 li
488.91 92.4746 li
cp
0 0 0 0.4 cmyk
f
488.91 92.4746 mo
479.285 92.4746 li
479.285 90.1831 li
488.91 90.1831 li
488.91 92.4746 li
cp
0 0 0 1 cmyk
@
530.16 94.8921 mo
520.535 94.8921 li
520.535 92.4741 li
530.16 92.4741 li
530.16 94.8921 li
cp
0 0 0 0.4 cmyk
f
530.16 94.8921 mo
520.535 94.8921 li
520.535 92.4741 li
530.16 92.4741 li
530.16 94.8921 li
cp
0 0 0 1 cmyk
@
476.16 98.1997 mo
466.535 98.1997 li
466.535 95.104 li
476.16 95.104 li
476.16 98.1997 li
cp
0 0 0 0.4 cmyk
f
0.25 lw
476.16 98.1997 mo
466.535 98.1997 li
466.535 95.104 li
476.16 95.104 li
476.16 98.1997 li
cp
0 0 0 1 cmyk
@
511.16 98.2603 mo
501.535 98.2603 li
501.535 95.106 li
511.16 95.106 li
511.16 98.2603 li
cp
0 0 0 0.4 cmyk
f
511.16 98.2603 mo
501.535 98.2603 li
501.535 95.106 li
511.16 95.106 li
511.16 98.2603 li
cp
0 0 0 1 cmyk
@
491.66 102.057 mo
482.035 102.057 li
482.035 98.3091 li
491.66 98.3091 li
491.66 102.057 li
cp
0 0 0 0.4 cmyk
f
491.66 102.057 mo
482.035 102.057 li
482.035 98.3091 li
491.66 98.3091 li
491.66 102.057 li
cp
0 0 0 1 cmyk
@
529.16 169.523 mo
519.535 169.523 li
519.535 154.906 li
529.16 154.906 li
529.16 169.523 li
cp
0 0 0 0.4 cmyk
f
0.75 lw
529.16 169.523 mo
519.535 169.523 li
519.535 154.906 li
529.16 154.906 li
529.16 169.523 li
cp
0 0 0 1 cmyk
@
509.66 144.971 mo
500.035 144.971 li
500.035 135.833 li
509.66 135.833 li
509.66 144.971 li
cp
0 0 0 0.4 cmyk
f
0.5 lw
509.66 144.971 mo
500.035 144.971 li
500.035 135.833 li
509.66 135.833 li
509.66 144.971 li
cp
0 0 0 1 cmyk
@
476.66 155.033 mo
467.035 155.033 li
467.035 145.104 li
476.66 145.104 li
476.66 155.033 li
cp
0 0 0 0.4 cmyk
f
476.66 155.033 mo
467.035 155.033 li
467.035 145.104 li
476.66 145.104 li
476.66 155.033 li
cp
0 0 0 1 cmyk
@
523.91 127.867 mo
514.285 127.867 li
514.285 120.249 li
523.91 120.249 li
523.91 127.867 li
cp
0 0 0 0.4 cmyk
f
0.25 lw
523.91 127.867 mo
514.285 127.867 li
514.285 120.249 li
523.91 120.249 li
523.91 127.867 li
cp
0 0 0 1 cmyk
@
488.16 135.921 mo
478.535 135.921 li
478.535 127.757 li
488.16 127.757 li
488.16 135.921 li
cp
0 0 0 0.4 cmyk
f
488.16 135.921 mo
478.535 135.921 li
478.535 127.757 li
488.16 127.757 li
488.16 135.921 li
cp
0 0 0 1 cmyk
@
494.9 188.639 mo
485.045 188.639 li
485.045 169.395 li
494.9 169.395 li
494.9 188.639 li
cp
0 0 0 0.4 cmyk
f
0.75 lw
494.9 188.639 mo
485.045 188.639 li
485.045 169.395 li
494.9 169.395 li
494.9 188.639 li
cp
0 0 0 1 cmyk
@
321.848 406.025 mo
448.333 406.025 li
448.333 328.024 li
459.583 328.024 li
459.583 430.525 li
321.515 430.525 li
f
2.03223 403.277 mo
128.032 403.277 li
128.032 327.277 li
139.282 327.277 li
139.282 427.777 li
2.03223 427.652 li
f
341.66 144.483 mo
332.035 144.483 li
332.035 119.57 li
341.66 119.57 li
341.66 144.483 li
cp
0 0 0 0.4 cmyk
f
341.66 144.483 mo
332.035 144.483 li
332.035 119.57 li
341.66 119.57 li
341.66 144.483 li
cp
0 0 0 1 cmyk
@
397.41 288.896 mo
387.785 288.896 li
387.785 269.595 li
397.41 269.595 li
397.41 288.896 li
cp
0 0 0 0.4 cmyk
f
397.41 288.896 mo
387.785 288.896 li
387.785 269.595 li
397.41 269.595 li
397.41 288.896 li
cp
0 0 0 1 cmyk
@
420.848 309.493 mo
411.223 309.493 li
411.223 289.126 li
420.848 289.126 li
420.848 309.493 li
cp
0 0 0 0.4 cmyk
f
420.848 309.493 mo
411.223 309.493 li
411.223 289.126 li
420.848 289.126 li
420.848 309.493 li
cp
0 0 0 1 cmyk
@
362.994 309.46 mo
353.369 309.46 li
353.369 289.095 li
362.994 289.095 li
362.994 309.46 li
cp
0 0 0 0.4 cmyk
f
362.994 309.46 mo
353.369 309.46 li
353.369 289.095 li
362.994 289.095 li
362.994 309.46 li
cp
0 0 0 1 cmyk
@
77.0322 268.277 mo
67.7822 268.277 li
67.7822 187.027 li
77.0322 187.027 li
77.0322 268.277 li
cp
f
113.865 44.5264 mo
113.865 187.36 li
125.817 187.36 li
125.817 81.0269 li
235.865 81.0269 li
235.865 44.3599 li
117.878 44.3599 li
f
1 lw
2.07129 187.301 mo
236.136 187.301 li
0.74902 0.678431 0.670588 0.901961 cmyk
@
1.92822 428.39 mo
1.92822 45.0737 li
@
236.136 429.36 mo
236.136 45.0737 li
@
126.065 187.317 mo
126.065 81.9966 li
@
113.757 44.3022 mo
113.757 187.317 li
@
2.57129 118.756 mo
116.249 118.756 li
@
2.07129 268.846 mo
236.136 268.846 li
@
77.4502 187.411 mo
77.4502 269.026 li
@
67.7915 269.026 mo
67.7915 187.411 li
@
139.612 328.218 mo
139.612 428.694 li
@
128.184 403.313 mo
128.184 328.218 li
@
2.33203 327.937 mo
236.532 327.937 li
@
4 lw
0 44.0269 mo
248.064 44.0269 li
0 0 0 0 cmyk
@
2 lw
[3 3 ] 0 dsh
1.92822 44.3022 mo
234.994 44.3022 li
0.74902 0.678431 0.670588 0.901961 cmyk
@
4 lw
[] 0 dsh
126.552 81.0264 mo
235.869 81.0264 li
0 0 0 0 cmyk
@
2.4165 402.992 mo
127.679 402.992 li
@
2 lw
[2 2 ] 0 dsh
3.47607 403.458 mo
127.249 403.458 li
0.74902 0.678431 0.670588 0.901961 cmyk
@
82.5322 44.0269 mo
82.5322 46.2358 80.7412 48.0269 78.5322 48.0269 cv
76.3232 48.0269 74.5322 46.2358 74.5322 44.0269 cv
74.5322 41.8179 76.3232 40.0269 78.5322 40.0269 cv
80.7412 40.0269 82.5322 41.8179 82.5322 44.0269 cv
cp
0 0 0 1 cmyk
f
1 lw
[] 0 dsh
82.5322 44.0269 mo
82.5322 46.2358 80.7412 48.0269 78.5322 48.0269 cv
76.3232 48.0269 74.5322 46.2358 74.5322 44.0269 cv
74.5322 41.8179 76.3232 40.0269 78.5322 40.0269 cv
80.7412 40.0269 82.5322 41.8179 82.5322 44.0269 cv
cp
@
20.5322 44.0269 mo
20.5322 46.2358 18.7412 48.0269 16.5322 48.0269 cv
14.3232 48.0269 12.5322 46.2358 12.5322 44.0269 cv
12.5322 41.8179 14.3232 40.0269 16.5322 40.0269 cv
18.7412 40.0269 20.5322 41.8179 20.5322 44.0269 cv
cp
f
20.5322 44.0269 mo
20.5322 46.2358 18.7412 48.0269 16.5322 48.0269 cv
14.3232 48.0269 12.5322 46.2358 12.5322 44.0269 cv
12.5322 41.8179 14.3232 40.0269 16.5322 40.0269 cv
18.7412 40.0269 20.5322 41.8179 20.5322 44.0269 cv
cp
@
51.5322 44.0269 mo
51.5322 46.2358 49.7412 48.0269 47.5322 48.0269 cv
45.3232 48.0269 43.5322 46.2358 43.5322 44.0269 cv
43.5322 41.8179 45.3232 40.0269 47.5322 40.0269 cv
49.7412 40.0269 51.5322 41.8179 51.5322 44.0269 cv
cp
f
51.5322 44.0269 mo
51.5322 46.2358 49.7412 48.0269 47.5322 48.0269 cv
45.3232 48.0269 43.5322 46.2358 43.5322 44.0269 cv
43.5322 41.8179 45.3232 40.0269 47.5322 40.0269 cv
49.7412 40.0269 51.5322 41.8179 51.5322 44.0269 cv
cp
@
51.6992 118.86 mo
51.6992 121.069 49.9082 122.86 47.6992 122.86 cv
45.4902 122.86 43.6992 121.069 43.6992 118.86 cv
43.6992 116.651 45.4902 114.86 47.6992 114.86 cv
49.9082 114.86 51.6992 116.651 51.6992 118.86 cv
cp
f
51.6992 118.86 mo
51.6992 121.069 49.9082 122.86 47.6992 122.86 cv
45.4902 122.86 43.6992 121.069 43.6992 118.86 cv
43.6992 116.651 45.4902 114.86 47.6992 114.86 cv
49.9082 114.86 51.6992 116.651 51.6992 118.86 cv
cp
@
0.5 lw
[3 3 ] 0 dsh
47.5322 44.6929 mo
47.5322 119.026 li
@
78.6987 44.0269 mo
78.6987 118.361 li
@
16.5322 44.3604 mo
16.5322 118.694 li
@
51.6992 109.527 mo
41.0322 109.527 li
41.0322 82.5269 li
51.6992 82.5269 li
51.6992 109.527 li
cp
0 0 0 0 cmyk
f
/0 
<<
/Name (Black)
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: TimesNewRomanPS-ItalicMT Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /TimesNewRomanPS-ItalicMT def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 66 /B put
def
/FontBBox {-498 -307 1353 1023} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/.notdef <1C60D8A8C9B6FF86FBD1638113E4B58C0B5F39100186722805B704
AA3988900AFCFF05DD> |-
/B <1C60D8A8C9B7D8BE1611CE5CC7075C01139D940851DD092B5C343608CFF2
1D54E911D33CFA904B363316F8B58058406F46B97ECC9FD96203C1E616C0A67F
7C2B01D448094EA13217076B96FAF56262A8859A9E2D97D8BE1D99D71353AC49
7AFA25DDFA44814CDDBE3AEFD65693ADA20F3622922AEBF0C5BC6FDF70B4F2FE
8CE050BA8ABDA613317EB81B5416B5B5C8DBAC8D1C0B3EE3042D8E498DA3BD7E
5FBE4E439FE664DAD284B244CBA89DF5B01575674FBC169DBF2A35797B151C51
CF0810F997D069E93451095050A86599598BFA07A3297FBFB701310B98DC8B85
12ED01E50C79B648915F11F14F73BDDBDDE28BF84565BD90EBC73B4375> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/EJHJAF+TimesNewRomanPS-ItalicMT /TimesNewRomanPS-ItalicMT findfont def
/EJHJAF+TimesNewRomanPS-ItalicMT*1 
[
66{/.notdef}repeat /B 189{/.notdef}repeat
] EJHJAF+TimesNewRomanPS-ItalicMT nfnt
EJHJAF+TimesNewRomanPS-ItalicMT*1  [18 0 -0 -18 0 0 ]mfnt sfnt
56.8188 72.5229 mov
(B) sh
%ADOBeginSubsetFont: TimesNewRomanPSMT Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /TimesNewRomanPSMT def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
def
/FontBBox {-568 -307 2000 1007} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/.notdef <1C60D8A8C9B6FF86FBD66B095379F45880CA28D0F0C4629F99B72E
FEDBB222483BD74F8B> |-
/one <1C60D8A8C9B7A73DB92A3F8C4B412A6756A4F8D8439622AB29A83C93F5
89D112DBEAB54F9ACF0D9BFA06C28638F8F8CA9EE7AFD734575522301B5C0272
0FA00A934493EC3D856AF45EEE1D7462FF2375B7250579D34D9C249B6BEBF8EF
41DB28C0847307B8DCBC66> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/DJHJAF+TimesNewRomanPSMT /TimesNewRomanPSMT findfont def
/DJHJAF+TimesNewRomanPSMT*1 
[
49{/.notdef}repeat /one 206{/.notdef}repeat
] DJHJAF+TimesNewRomanPSMT nfnt
DJHJAF+TimesNewRomanPSMT*1  [12 0 -0 -12 0 0 ]mfnt sfnt
67.5688 76.3296 mov
(1) sh
EJHJAF+TimesNewRomanPS-ItalicMT*1  [18 0 -0 -18 0 0 ]mfnt sfnt
49.7002 155.688 mov
(B) sh
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.
systemdict begin
DJHJAF+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/two <1C60D8A8C9B7A73DB6F198797B24E7DF20E340C763AB9A17095FFDDA6B
4B0E4D4AC4BE83AF302018AACAF29AB5FCEB98A93FCCD2C9A968B7CB1B433E25
003CA8A63287F6BD1729C8188A209A7171C9BFB11D2FACEF2FADF63141D976A0
F90EDDE709834FFBF963952A5213F00F39F098C30D0F91D40A57CAEF920CE11E
C41D90433CE0F55F0A42A96AF852FD50FA> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DJHJAF+TimesNewRomanPSMT /Encoding get
dup 50 /two put
pop
%ADOEndSubsetFont
/DJHJAF+TimesNewRomanPSMT*1 
[
49{/.notdef}repeat /one /two 205{/.notdef}repeat
] DJHJAF+TimesNewRomanPSMT nfnt
DJHJAF+TimesNewRomanPSMT*1  [12 0 -0 -12 0 0 ]mfnt sfnt
60.4502 159.495 mov
(2) sh
EJHJAF+TimesNewRomanPS-ItalicMT*1  [18 0 -0 -18 0 0 ]mfnt sfnt
175.533 136.021 mov
(B) sh
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.
systemdict begin
DJHJAF+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/three <1C60D8A8C9B7A73D83638F79AE86E17D4CE334FAA90E146D21CDA0FE
B71815E9499D6C6A6E581E78F34038D792771470EBF894DABD777E9B4FDE68E7
E1544BCF1EFB2DCE59357B716B4D2ADF3EAC3A9FF8BD07EC79AF5536B9B74185
F8F7489AD909079119E88D2BB755D6F6AC02C01BDFADB347EC55DAC49C8BB047
661CC7AAA3BDC1DB8E01EC56137B53ED31B24F4502353853D049BB0515CA4217
D33D10484933F30AD1EAA43CFDF00AFA5462EE9B1772CE60A3392B8D9C1A3598
CF2273E36A1FF3A58B2E24B1EACE5E34650257902678998DAAFF235764CCCA14
3A> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DJHJAF+TimesNewRomanPSMT /Encoding get
dup 51 /three put
pop
%ADOEndSubsetFont
/DJHJAF+TimesNewRomanPSMT*1 
[
49{/.notdef}repeat /one /two /three 204{/.notdef}repeat
] DJHJAF+TimesNewRomanPSMT nfnt
DJHJAF+TimesNewRomanPSMT*1  [12 0 -0 -12 0 0 ]mfnt sfnt
186.283 139.828 mov
(3) sh
EJHJAF+TimesNewRomanPS-ItalicMT*1  [18 0 -0 -18 0 0 ]mfnt sfnt
28.6997 233.188 mov
(B) sh
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.
systemdict begin
DJHJAF+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/four <1C60D8A8C9B7A73DB6B62B7A95EE6C20B94EAC94CA9AB50BFD020369D
6A63C8EA15A0D9A89B2ED9293078F8D3EE629592E255C65B246> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DJHJAF+TimesNewRomanPSMT /Encoding get
dup 52 /four put
pop
%ADOEndSubsetFont
/DJHJAF+TimesNewRomanPSMT*1 
[
49{/.notdef}repeat /one /two /three /four 203{/.notdef}repeat
] DJHJAF+TimesNewRomanPSMT nfnt
DJHJAF+TimesNewRomanPSMT*1  [12 0 -0 -12 0 0 ]mfnt sfnt
39.4497 236.994 mov
(4) sh
EJHJAF+TimesNewRomanPS-ItalicMT*1  [18 0 -0 -18 0 0 ]mfnt sfnt
196.2 233.521 mov
(B) sh
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.
systemdict begin
DJHJAF+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/six <1C60D8A8C9B7A73DB682174C160AB8115D90A4524BD5B352C23110F23E
E4E20266716093AE0643A076F6C57BA527F49BB819243E28C4CA7F711F41FA01
318856C15674E51D546E83D25FE9DB7A4B9EDFDDE57E488CC507C2304526D6E8
0E07D1EEFCA86373B2F664DD3DA4646061C700F112AB44ED3896FA596FE81443
6AD1F1DC5FEDB207A575A17735F66E79BF0D0E423C92F1E9255D38F15B49459F
3693E95DCE92EBF25C243713EDA9138A49C42AA83683249878EEA825672AC6D9
9C32B9109B3D5797A7> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DJHJAF+TimesNewRomanPSMT /Encoding get
dup 54 /six put
pop
%ADOEndSubsetFont
/DJHJAF+TimesNewRomanPSMT*1 
[
49{/.notdef}repeat /one /two /three /four /.notdef /six 201{/.notdef}repeat
] DJHJAF+TimesNewRomanPSMT nfnt
DJHJAF+TimesNewRomanPSMT*1  [12 0 -0 -12 0 0 ]mfnt sfnt
206.95 237.328 mov
(6) sh
EJHJAF+TimesNewRomanPS-ItalicMT*1  [18 0 -0 -18 0 0 ]mfnt sfnt
113.366 233.354 mov
(B) sh
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.
systemdict begin
DJHJAF+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/five <1C60D8A8C9B7A73DB97C1FD4849B14157B765BEEE66B9438731A1E1DB
F6D904609867EBF49E3E19DC6BA786F7382AB36C8CFA3690DF4F8E7A258691DF
DD71792965BBA1DCE407BE309901C1513A762BED3C73A852D4EDA1BE20A2B364
C59E2224D36D9C8BEE5DE8D6C54C49D0F66DB7448A8FCE0E63D5DEE7BBBA026A
808CDA9AD5556005639017FF42B963FB833B4B64B6445B350600BDCDD563F> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DJHJAF+TimesNewRomanPSMT /Encoding get
dup 53 /five put
pop
%ADOEndSubsetFont
/DJHJAF+TimesNewRomanPSMT*1 
[
49{/.notdef}repeat /one /two /three /four /five /six 201{/.notdef}repeat
] DJHJAF+TimesNewRomanPSMT nfnt
DJHJAF+TimesNewRomanPSMT*1  [12 0 -0 -12 0 0 ]mfnt sfnt
124.116 237.161 mov
(5) sh
EJHJAF+TimesNewRomanPS-ItalicMT*1  [18 0 -0 -18 0 0 ]mfnt sfnt
109.867 301.688 mov
(B) sh
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.
systemdict begin
DJHJAF+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/seven <1C60D8A8C9B7A73DFE31854B8CA51F015562FECC80A8475F282F7722
52E10D05B7D43981266F60616595AB1BFBC47BFB03D1BE> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DJHJAF+TimesNewRomanPSMT /Encoding get
dup 55 /seven put
pop
%ADOEndSubsetFont
/DJHJAF+TimesNewRomanPSMT*1 
[
49{/.notdef}repeat /one /two /three /four /five /six /seven 
200{/.notdef}repeat
] DJHJAF+TimesNewRomanPSMT nfnt
DJHJAF+TimesNewRomanPSMT*1  [12 0 -0 -12 0 0 ]mfnt sfnt
120.617 305.494 mov
(7) sh
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.
systemdict begin
DJHJAF+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/space <1C60D8A8C9B8707C25> |-
/a <1C60D8A8C9B77FE2CEA139CB15A16492F485162FE605BA10F460B6DC550D
EC7BA0BCA1B89C8429260417FE96BA758C22F6762386C9F1CAF53456C89D4C6B
177AA810FBB608A57F053C4DA17FD8A122DD63CD2EE0563B0FFA48FEF5CBDB33
3E4EF010579993E238020BE59CA5D3F31F329BD506C436A3A2AAAB6CBD385FDB
0E5188BC3D34A31214C941C253FAF1F818F84A3F73340CA7F3B7A85C87022E70
BF3FF56918287082AAA1D7B6CDE998BE3D8663592D3F0DEFC69D87A351A29895
DE83B0D7478C3C01D85F944C563EFCF85986470E4B8EDEEDC025A0FB3217B737
B99EB7B6E2243F66B907475D1C465D1D07EDFEFC5123FE5A4D48A8B15BE3272E
F1EF1464C3F0D45D7CBB8749AF571E09> |-
/e <1C60D8A8C9B77FE2C19119FE019B929F076F8319E8913467AECA41BE2BEA
D3EC175346E3F888D3AD76D215AD69034A954DFD661ECBEA3B145468480B6A15
F5C865D2083DC0B04744AA76DE4CC9E0C9DBDCC2C59DAA00F28A6A47092C7FFA
0397DC47C5CBBA69AD805D3DD20D56411E92B0DE9E3F19C2FDEE1FA501318984
A59E1CFFFD06EA629758085868D3F5F7204292> |-
/h <1C60D8A8C9B7A73DB904DA2C7A38531EB5E07DB80E9375E00037710435E0
27FD1F7B471BB2C47AEA703B8CB5C9C005CAA0B77F572194961F7C30413194A0
134D3FF9BA81F629AD195D96BD3C1285904670FEB33C334E260F33EE9AB1A2D9
C0C66E38CE4D3CA583879DAF16CE988CC2A14E39FED6599F4B0F3F8F061B585E
2410824AE8C179E66BD3AD9F6E34CD8CBF79298E3E4553D0E9DCA292805DED8E
36C58209B17E38B2DFAFEB881CA5FB9EC7A76A0CF0C4BFE83CE749EBD15B15E9
7FBEA4E90F2186A54E69C28F4083AB76DBE019E4C57B27760FED872C4483796F
735A795EACD82F245D81FB43B5> |-
/n <1C60D8A8C9B7A73DB913C38909CDA29FD53BC2807766C389AFB9ED86F7BC
81642DEC755C464ECEF36210D9B2C516FEA8C1248DF87B00C42E8B7B13BCCD9D
4DADECDD469C646397E88CF560CD28B02CAE7D1B9203699A1DE9CF796CD494DF
60582CAFD70B7F17C1569B79CFC1B11937F06CBBF98FB3F8ABA83215B2800261
30687B8B88299FC622B1B9C743E6B4E2D3E657B3D5566E1938323637D7929F2E
277006B7F4C91822AAA6911E494E2AD0998CB1FC1434E1920012738BB988F6A0
027198438FE663C2EACF82CEB86F7C727594> |-
/o <1C60D8A8C9B7A73DB903ADC070A7C49752E736186D1727D7954B8F3DD441
6250EFB2715F7FEA4B4F24611BB7B770A0989FFD12258A4EC0D90DD9998BDAF9
96A44DE027AE6C486FF30337F30EB574748A139900482713C8EF6F8455DA4367
02294DB22515A99C4ACC57A269598D687C25D5F66128E3441FE6E0D99B55B68D
9C19E720D771564C6692898D127FC55C985D08C7E6B95F874FD094> |-
/p <1C60D8A8C9B7A73DDE03BEEA75B31F61E78B8C94AAF630ACAE1A607BD40E
B48302A40F17E763F71E8B5595B8EEEBB33C0827EEA0DE5370DD4C7A09244048
D0DA814D6E79BAC2B8E456D2F119496FF35E5A13F4B8F71ECD895B10E20FBAC6
66023D0941B5A0FF139CBD18745BC2892DD91EE541EAD2B54AF0839C3327F759
04A81A3805CFC7AF83735A7079B305271753A14327F3CB693ACCFE5C9D6A3B84
31B357819DFFAD81BD2A60573E4CA4C48EC0A5E07291768D829E6A70067C076E
94545FD4D8E2BB7431617263A47DB04F0B8630D6AB06FF2DD1B1F383A59D02DF
1C7730E7CC0F462D79552DFA> |-
/r <1C60D8A8C9B81F2C3A9916C4CB28F21023538C2A69D3E08B0A448624D2CE
6C19473DC07A6A4C3E0D8D2DFD7B9589F2461E064A251BFFB4F1472DE500E983
E2E667F5383BBA338778795701927E45FB048834AFB7FF5E045C79CAD4F90B53
A8A93629365ECF1B64B7916DE5DAB65845D9DB9B71D2B7B722597153CE4BA455
AAC1333D36087A511839B6E1301E787D03299ED6FB7E787777CDACC74EC37D8C
360275B503E4954E912CD342> |-
/s <1C60D8A8C9B7361F027554B74948DF9D509740193A97E4C5A946CCDAC22A
CE16A97A38CAF70766C30631C22477718670FA129F481BA880FC6C2A8C233A03
9A7A46ACD6F3CA0422B1CD13AB9E5980A98B78F274FD5FB0A519013427E3DF40
BD973F22C9B236BE3D27B0A78749138244A4ED344575D4F7F677439F8C2359FA
AB210EA03D2DAABF38A6B5B4F0819D6E85CC68A9859B12239E01058FD0C7C593
B22AC00DE1C2A90508610457C5DFEA41C78C4C677B338B4C0ED41B0474AF509B
93D8B3403DD443273DAE4F97B7CDCA81379AB0933639> |-
/t <1C60D8A8C9B854D0F414EAB29549463C152A8395E080F8A65050DED29448
713A9991EC80B85D2E40BC855D0C9C1C8F48B9F54A9F2AF77E5AE0CF2D93DC43
DDEECA57457D57C32A4E7F92D72E19B411BD6A8FD776B503B1ED0E4E775E798B
36CAB4543E392F481E83DAF858D3B1A895E3CC06AB3573C04543D9> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DJHJAF+TimesNewRomanPSMT /Encoding get
dup 32 /space put
dup 97 /a put
dup 101 /e put
dup 104 /h put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
pop
%ADOEndSubsetFont
/DJHJAF+TimesNewRomanPSMT*1 
[
32{/.notdef}repeat /space 16{/.notdef}repeat /one /two /three /four /five 
/six /seven 41{/.notdef}repeat /a 3{/.notdef}repeat /e 2{/.notdef}repeat /h 
5{/.notdef}repeat /n /o /p /.notdef /r /s /t 
139{/.notdef}repeat
] DJHJAF+TimesNewRomanPSMT nfnt
DJHJAF+TimesNewRomanPSMT*1  [14 0 -0 -14 0 0 ]mfnt sfnt
13.0332 29.166 mov
(shortest pants) sh
%ADOBeginSubsetFont: TimesNewRomanPS-BoldItalicMT Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /TimesNewRomanPS-BoldItalicMT def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 115 /s put
def
/FontBBox {-547 -307 1401 1032} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/.notdef <1C60D8A8C9B6FF86FBD75DB9092FB01BBE833F55BB0B9375D47E84
581C0C7E888E7865A7> |-
/s <1C60D8A8C9B7361F0244D2BBE2A47ED6931DF3A05D5A2C924B299EDC0491
67486E666DFB6053A66F5A708226A083EE8AC5900FD251B234E429441383151B
D4159F480C04F3D3F4454A4DD26AA8AE40059EDE33BBFF27D1350A1853319D5A
ED8C69F074A4D5778FDBCC99B8B988EA76364B58074ECE73FB865321715C58D1
7C8F158650088FBE2721C86F468B8DA8B53DA36DE5037AD5BE48EDDE66AA6170
3935781F6CEBF55E7CCFD6D0215655820789866B4BA762B8DC609EA28293EB15
B2550B653437E8A882B28F097909A1A7BE61E7ADD93C0AD89CA720D5A71629BF
A35F89BFB2F5E86302E6> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/MIHJAF+TimesNewRomanPS-BoldItalicMT /TimesNewRomanPS-BoldItalicMT findfont def
/MIHJAF+TimesNewRomanPS-BoldItalicMT*1 
[
115{/.notdef}repeat /s 140{/.notdef}repeat
] MIHJAF+TimesNewRomanPS-BoldItalicMT nfnt
MIHJAF+TimesNewRomanPS-BoldItalicMT*1  [18 0 -0 -18 0 0 ]mfnt sfnt
31.2881 100.354 mov
(s) sh
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.
systemdict begin
DJHJAF+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/parenleft <1C60D8A8C9B81F2C3AC09B674C4ECE2BEF4D70AD3508D915EA9A
E12419376F6EEF231ECE8179CA4531F29291ACACE060AEF98AD6F2FFF2BEA533
946FFA1C8BC3953D72A31BB8ABD9782D71B2146F964D99646263E2D414F84FA0
49D36B9B13B7F6C8AA7A4A5EB0> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DJHJAF+TimesNewRomanPSMT /Encoding get
dup 40 /parenleft put
pop
%ADOEndSubsetFont
/DJHJAF+TimesNewRomanPSMT*1 
[
32{/.notdef}repeat /space 7{/.notdef}repeat /parenleft 8{/.notdef}repeat /one /two /three 
/four /five /six /seven 41{/.notdef}repeat /a 3{/.notdef}repeat /e 
2{/.notdef}repeat /h 5{/.notdef}repeat /n /o /p /.notdef /r 
/s /t 139{/.notdef}repeat
] DJHJAF+TimesNewRomanPSMT nfnt
DJHJAF+TimesNewRomanPSMT*1  [18 0 -0 -18 0 0 ]mfnt sfnt
38.293 100.354 mov
(\() sh
%ADOBeginSubsetFont: TimesNewRomanPS-ItalicMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.
systemdict begin
EJHJAF+TimesNewRomanPS-ItalicMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/space <1C60D8A8C9B8707C25> |-
systemdict /gcheck known {setglobal} if end {end} if
end
EJHJAF+TimesNewRomanPS-ItalicMT /Encoding get
dup 32 /space put
pop
%ADOEndSubsetFont
/EJHJAF+TimesNewRomanPS-ItalicMT*1 
[
32{/.notdef}repeat /space 33{/.notdef}repeat /B 189{/.notdef}repeat
] EJHJAF+TimesNewRomanPS-ItalicMT nfnt
EJHJAF+TimesNewRomanPS-ItalicMT*1  [18 0 -0 -18 0 0 ]mfnt sfnt
44.2871 100.354 mov
(B ) sh
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.
systemdict begin
DJHJAF+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/parenright <1C60D8A8C9B81F2C3CA029BC286E27661FD7F18B990CFF4A0AF
58404A2F35E11D14FBA406192D392AD203A879E34B8FA3132863211808E5BD63
BDAA607B8E04E23E92C61AAA8B57E5E7609689020D20EB927A1EC6CC0BC06B54
0A016D558248DC4A3E8183F5F> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DJHJAF+TimesNewRomanPSMT /Encoding get
dup 41 /parenright put
pop
%ADOEndSubsetFont
/DJHJAF+TimesNewRomanPSMT*1 
[
32{/.notdef}repeat /space 7{/.notdef}repeat /parenleft /parenright 7{/.notdef}repeat /one /two 
/three /four /five /six /seven 41{/.notdef}repeat /a 3{/.notdef}repeat 
/e 2{/.notdef}repeat /h 5{/.notdef}repeat /n /o /p /.notdef 
/r /s /t 139{/.notdef}repeat
] DJHJAF+TimesNewRomanPSMT nfnt
DJHJAF+TimesNewRomanPSMT*1  [18 0 -0 -18 0 0 ]mfnt sfnt
59.7822 100.354 mov
(\)) sh
1 /0 /CSD get_res sepcs
1 sep
DJHJAF+TimesNewRomanPSMT*1  [12 0 -0 -12 0 0 ]mfnt sfnt
54.3711 104.161 mov
(1) sh
1 /0 /CSD get_res sepcs
0 sep
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.
systemdict begin
DJHJAF+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/braceleft <1C60D8A8C9B75BE519AA61D877C3C311C2F28ACFAF7BC819EE3D
6DFC55ECAB40F0EACA922DC66BCBD5ADCA3997440BAEFDECE97E13A9AF42EB4C
BE11AB0DB56DFC050B6FAEDC6E90B6705339CB2C1151DA03A6185D34E0E1F3F2
57D6111A7AB16657D4D81ECAA39F196C00D5825644A09D696CD55D1D4D8139B9
A3380F5C9183492EBD896B9DC9F0CDACD06824D8D3EE63FF6A3A087EF91537F9
02B42F6BF439DB49533E563D7126395EC920AA61D4F9E4D09FFDEC1DBC5205FF
97FCC5> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DJHJAF+TimesNewRomanPSMT /Encoding get
dup 123 /braceleft put
pop
%ADOEndSubsetFont
/DJHJAF+TimesNewRomanPSMT*1 
[
32{/.notdef}repeat /space 7{/.notdef}repeat /parenleft /parenright 7{/.notdef}repeat /one /two 
/three /four /five /six /seven 41{/.notdef}repeat /a 3{/.notdef}repeat 
/e 2{/.notdef}repeat /h 5{/.notdef}repeat /n /o /p /.notdef 
/r /s /t 6{/.notdef}repeat /braceleft 132{/.notdef}repeat
] DJHJAF+TimesNewRomanPSMT nfnt
DJHJAF+TimesNewRomanPSMT*1  [-0 20.0833 72.6598 -0 0 0 ]mfnt sfnt
29.4946 104.54 mov
({) sh
DJHJAF+TimesNewRomanPSMT*1  [-0 20.0833 72.6598 -0 0 0 ]mfnt sfnt
29.4946 104.54 mov
({) false chp
6 lw
2 lj
[] 0 dsh
@
1 /0 /CSD get_res sepcs
1 sep
DJHJAF+TimesNewRomanPSMT*1  [-0 20.0833 72.6598 -0 0 0 ]mfnt sfnt
29.4946 104.54 mov
({) sh
82.6992 118.86 mo
82.6992 121.069 80.9082 122.86 78.6992 122.86 cv
76.4902 122.86 74.6992 121.069 74.6992 118.86 cv
74.6992 116.651 76.4902 114.86 78.6992 114.86 cv
80.9082 114.86 82.6992 116.651 82.6992 118.86 cv
cp
0 0 0 1 cmyk
f
1 lw
0 lj
82.6992 118.86 mo
82.6992 121.069 80.9082 122.86 78.6992 122.86 cv
76.4902 122.86 74.6992 121.069 74.6992 118.86 cv
74.6992 116.651 76.4902 114.86 78.6992 114.86 cv
80.9082 114.86 82.6992 116.651 82.6992 118.86 cv
cp
@
20.6992 118.86 mo
20.6992 121.069 18.9082 122.86 16.6992 122.86 cv
14.4902 122.86 12.6992 121.069 12.6992 118.86 cv
12.6992 116.651 14.4902 114.86 16.6992 114.86 cv
18.9082 114.86 20.6992 116.651 20.6992 118.86 cv
cp
f
20.6992 118.86 mo
20.6992 121.069 18.9082 122.86 16.6992 122.86 cv
14.4902 122.86 12.6992 121.069 12.6992 118.86 cv
12.6992 116.651 14.4902 114.86 16.6992 114.86 cv
18.9082 114.86 20.6992 116.651 20.6992 118.86 cv
cp
@
433.833 45.2739 mo
433.833 188.107 li
445.785 188.107 li
445.785 81.7744 li
555.833 81.7744 li
555.833 45.1074 li
437.846 45.1074 li
f
391.039 188.049 mo
494.604 188.049 li
0.74902 0.678431 0.670588 0.901961 cmyk
@
321.896 429.138 mo
321.896 45.8213 li
@
556.104 430.107 mo
556.104 45.8213 li
@
446.033 188.064 mo
446.033 82.7441 li
@
433.725 45.0498 mo
433.725 188.064 li
@
322.039 119.504 mo
436.217 119.504 li
@
0.75 lw
459.58 327.799 mo
459.58 429.441 li
@
448.152 407.311 mo
448.152 327.466 li
@
4 lw
319.968 44.7744 mo
568.032 44.7744 li
0 0 0 0 cmyk
@
2 lw
[3 3 ] 0 dsh
321.896 45.0498 mo
554.962 45.0498 li
0.74902 0.678431 0.670588 0.901961 cmyk
@
4 lw
[] 0 dsh
446.52 81.7739 mo
555.836 81.7739 li
0 0 0 0 cmyk
@
1.5 lw
[2 2 ] 0 dsh
447.049 81.686 mo
554.629 81.686 li
0.74902 0.678431 0.670588 0.901961 cmyk
@
4 lw
[] 0 dsh
322.385 403.74 mo
447.24 403.74 li
0 0 0 0 cmyk
@
2 lw
[2 2 ] 0 dsh
323.443 404.207 mo
447.217 404.207 li
0.74902 0.678431 0.670588 0.901961 cmyk
@
402.5 44.7744 mo
402.5 46.9834 400.709 48.7744 398.5 48.7744 cv
396.291 48.7744 394.5 46.9834 394.5 44.7744 cv
394.5 42.5654 396.291 40.7744 398.5 40.7744 cv
400.709 40.7744 402.5 42.5654 402.5 44.7744 cv
cp
0 0 0 1 cmyk
f
1 lw
[] 0 dsh
402.5 44.7744 mo
402.5 46.9834 400.709 48.7744 398.5 48.7744 cv
396.291 48.7744 394.5 46.9834 394.5 44.7744 cv
394.5 42.5654 396.291 40.7744 398.5 40.7744 cv
400.709 40.7744 402.5 42.5654 402.5 44.7744 cv
cp
@
340.5 44.7744 mo
340.5 46.9834 338.709 48.7744 336.5 48.7744 cv
334.291 48.7744 332.5 46.9834 332.5 44.7744 cv
332.5 42.5654 334.291 40.7744 336.5 40.7744 cv
338.709 40.7744 340.5 42.5654 340.5 44.7744 cv
cp
f
340.5 44.7744 mo
340.5 46.9834 338.709 48.7744 336.5 48.7744 cv
334.291 48.7744 332.5 46.9834 332.5 44.7744 cv
332.5 42.5654 334.291 40.7744 336.5 40.7744 cv
338.709 40.7744 340.5 42.5654 340.5 44.7744 cv
cp
@
371.5 44.7744 mo
371.5 46.9834 369.709 48.7744 367.5 48.7744 cv
365.291 48.7744 363.5 46.9834 363.5 44.7744 cv
363.5 42.5654 365.291 40.7744 367.5 40.7744 cv
369.709 40.7744 371.5 42.5654 371.5 44.7744 cv
cp
f
371.5 44.7744 mo
371.5 46.9834 369.709 48.7744 367.5 48.7744 cv
365.291 48.7744 363.5 46.9834 363.5 44.7744 cv
363.5 42.5654 365.291 40.7744 367.5 40.7744 cv
369.709 40.7744 371.5 42.5654 371.5 44.7744 cv
cp
@
371.667 119.608 mo
371.667 121.817 369.876 123.608 367.667 123.608 cv
365.458 123.608 363.667 121.817 363.667 119.608 cv
363.667 117.399 365.458 115.608 367.667 115.608 cv
369.876 115.608 371.667 117.399 371.667 119.608 cv
cp
f
371.667 119.608 mo
371.667 121.817 369.876 123.608 367.667 123.608 cv
365.458 123.608 363.667 121.817 363.667 119.608 cv
363.667 117.399 365.458 115.608 367.667 115.608 cv
369.876 115.608 371.667 117.399 371.667 119.608 cv
cp
@
402.667 119.608 mo
402.667 121.817 400.876 123.608 398.667 123.608 cv
396.458 123.608 394.667 121.817 394.667 119.608 cv
394.667 117.399 396.458 115.608 398.667 115.608 cv
400.876 115.608 402.667 117.399 402.667 119.608 cv
cp
f
402.667 119.608 mo
402.667 121.817 400.876 123.608 398.667 123.608 cv
396.458 123.608 394.667 121.817 394.667 119.608 cv
394.667 117.399 396.458 115.608 398.667 115.608 cv
400.876 115.608 402.667 117.399 402.667 119.608 cv
cp
@
397.41 269.88 mo
387.785 269.88 li
387.785 187.757 li
397.41 187.757 li
397.41 269.88 li
cp
f
0.75 lw
397.41 269.88 mo
387.785 269.88 li
387.785 187.757 li
397.41 187.757 li
397.41 269.88 li
cp
@
368.66 169.422 mo
359.035 169.422 li
359.035 144.507 li
368.66 144.507 li
368.66 169.422 li
cp
0 0 0 0.4 cmyk
f
368.66 169.422 mo
359.035 169.422 li
359.035 144.507 li
368.66 144.507 li
368.66 169.422 li
cp
0 0 0 1 cmyk
@
1 lw
322.509 144.527 mo
433.187 144.527 li
0.74902 0.678431 0.670588 0.901961 cmyk
@
322.009 169.527 mo
433.687 169.527 li
@
322.315 289.027 mo
556.38 289.027 li
@
322.315 309.527 mo
556.38 309.527 li
@
397.41 187.897 mo
387.785 187.897 li
387.785 169.634 li
397.41 169.634 li
397.41 187.897 li
cp
0 0 0 0.4 cmyk
f
0.75 lw
397.41 187.897 mo
387.785 187.897 li
387.785 169.634 li
397.41 169.634 li
397.41 187.897 li
cp
0 0 0 1 cmyk
@
459.553 327.995 mo
448.186 327.995 li
448.186 309.498 li
459.553 309.498 li
459.553 327.995 li
cp
0 0 0 0.4 cmyk
f
459.553 327.995 mo
448.186 327.995 li
448.186 309.498 li
459.553 309.498 li
459.553 327.995 li
cp
0 0 0 1 cmyk
@
1 /0 /CSD get_res sepcs
1 sep
DJHJAF+TimesNewRomanPSMT*1  [18 0 -0 -18 0 0 ]mfnt sfnt
128.542 475.147 mov
(\(a\)) sh
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.
systemdict begin
DJHJAF+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/b <1C60D8A8C9B7A73DB90B311171EB67EB8746E2EC8FC994CCA7A632F7C7E8
F4A5D28D725796F2BC8526696060F460C892CC5686CD97F757C6EFB11E42DD9A
F110BE11F49DAEFA324F62E3046D4E2410C0923EDB87332B0381414594D39992
4398EF0A71772EF0EFEA72F5940C288418E4FCC7A2DE1E6A1AEA513FBDA0D660
3C38C9676D3489A418D7163D5E50FB679144E02901D98844D885CA3AAF379A83
F23AED1F56FC130F21> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DJHJAF+TimesNewRomanPSMT /Encoding get
dup 98 /b put
pop
%ADOEndSubsetFont
/DJHJAF+TimesNewRomanPSMT*1 
[
32{/.notdef}repeat /space 7{/.notdef}repeat /parenleft /parenright 7{/.notdef}repeat /one /two 
/three /four /five /six /seven 41{/.notdef}repeat /a /b 
2{/.notdef}repeat /e 2{/.notdef}repeat /h 5{/.notdef}repeat /n /o /p 
/.notdef /r /s /t 6{/.notdef}repeat /braceleft 132{/.notdef}repeat
] DJHJAF+TimesNewRomanPSMT nfnt
DJHJAF+TimesNewRomanPSMT*1  [18 0 -0 -18 0 0 ]mfnt sfnt
450.357 475.147 mov
(\(b\)) sh
174.943 268.085 mo
165.693 268.085 li
165.693 186.835 li
174.943 186.835 li
174.943 268.085 li
cp
0 0 0 1 cmyk
f
1 lw
175.361 187.219 mo
175.361 268.834 li
0.74902 0.678431 0.670588 0.901961 cmyk
@
165.703 268.834 mo
165.703 187.219 li
@
1 /0 /CSD get_res sepcs
1 sep
EJHJAF+TimesNewRomanPS-ItalicMT*1  [18 0 -0 -18 0 0 ]mfnt sfnt
177.367 353.021 mov
(B) sh
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.
systemdict begin
DJHJAF+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/nine <1C60D8A8C9B7A73D92CE6A66BA49C70A16072730ADF99EB50B81EC870
A54394DDFE38FABEC18FB7B826889153F28664691169009324BD4E9661571BB9
1EC6E47B44C4894E182CDFFE1F715113C62DB236897358730FEA1D138847386A
CC90D129A1077A70DC9DAEA483EA5552EB360DE0397958942F0F1C3FE8C7E6CD
3CF99FAB1F16B30CA1A210BFF9DDE43DE5ED76615C174EEED6DAB9E5A77B1C62
FBE9CABC1B3A46D497C4D6EFFC96F4CC02C8A01382FD55BD7B4> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DJHJAF+TimesNewRomanPSMT /Encoding get
dup 57 /nine put
pop
%ADOEndSubsetFont
/DJHJAF+TimesNewRomanPSMT*1 
[
32{/.notdef}repeat /space 7{/.notdef}repeat /parenleft /parenright 7{/.notdef}repeat /one /two 
/three /four /five /six /seven /.notdef /nine 39{/.notdef}repeat 
/a /b 2{/.notdef}repeat /e 2{/.notdef}repeat /h 5{/.notdef}repeat /n 
/o /p /.notdef /r /s /t 6{/.notdef}repeat /braceleft 
132{/.notdef}repeat
] DJHJAF+TimesNewRomanPSMT nfnt
DJHJAF+TimesNewRomanPSMT*1  [12 0 -0 -12 0 0 ]mfnt sfnt
188.117 356.828 mov
(9) sh
EJHJAF+TimesNewRomanPS-ItalicMT*1  [18 0 -0 -18 0 0 ]mfnt sfnt
60.5332 370.521 mov
(B) sh
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.
systemdict begin
DJHJAF+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/eight <1C60D8A8C9B7A73DAB2BA6B835CAFB4C9A41096F555C470FE6294A70
7AE711C017C95446B200870C2B6A47FB931BCEBEB5BBC6B53605850C75701306
FD83F9DC906687C2B3A2C9C0DB9DB68E95D3478DEA01153491C8534F5AD89998
0F04C195BFB522EDEF282420AA1F12E08397ECA941D5934294BD451B3952E622
9D3E7987DD36FC8E43559904E0205D3416EDD1402AB05184D2018B2C7B816330
FD0C2740A24C74F80E34F93317BBB1D6B8C4D916C15B7FF1D533D7762324A101
7022A27246D93B9768262BFCC673CAD6781894C98679A5889F9338F377D1995A
EDF5695FBA7A65628522691535557B2045419DD63F87D7A64B6A962B> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DJHJAF+TimesNewRomanPSMT /Encoding get
dup 56 /eight put
pop
%ADOEndSubsetFont
/DJHJAF+TimesNewRomanPSMT*1 
[
32{/.notdef}repeat /space 7{/.notdef}repeat /parenleft /parenright 7{/.notdef}repeat /one /two 
/three /four /five /six /seven /eight /nine 39{/.notdef}repeat 
/a /b 2{/.notdef}repeat /e 2{/.notdef}repeat /h 5{/.notdef}repeat /n 
/o /p /.notdef /r /s /t 6{/.notdef}repeat /braceleft 
132{/.notdef}repeat
] DJHJAF+TimesNewRomanPSMT nfnt
DJHJAF+TimesNewRomanPSMT*1  [12 0 -0 -12 0 0 ]mfnt sfnt
71.2832 374.328 mov
(8) sh
494.371 269.396 mo
485.121 269.396 li
485.121 187.645 li
494.371 187.645 li
494.371 269.396 li
cp
0 0 0 1 cmyk
f
494.789 188.029 mo
494.789 269.644 li
0.74902 0.678431 0.670588 0.901961 cmyk
@
485.131 269.644 mo
485.131 188.029 li
@
445.559 169.36 mo
555.956 169.36 li
@
0.75 lw
445.148 135.86 mo
555.547 135.86 li
@
0.25 lw
445.898 92.4438 mo
556.297 92.4438 li
@
0.5 lw
445.148 102.027 mo
555.547 102.027 li
@
1 lw
445.148 155.027 mo
555.547 155.027 li
@
0.75 lw
445.148 127.86 mo
555.547 127.86 li
@
0.5 lw
445.148 120.277 mo
555.547 120.277 li
@
445.148 112.61 mo
555.547 112.61 li
@
0.25 lw
445.148 88.4438 mo
555.547 88.4438 li
@
0.15 lw
[1 1 ] 0 dsh
446.836 84.1938 mo
555.547 84.1938 li
@
0.5 lw
[] 0 dsh
445.148 106.61 mo
555.547 106.61 li
@
445.148 98.2773 mo
555.547 98.2773 li
@
0.25 lw
445.148 90.1938 mo
555.547 90.1938 li
@
0.75 lw
445.148 145.027 mo
555.547 145.027 li
@
0.5 lw
445.148 95.0269 mo
555.547 95.0269 li
@
0.25 lw
[1.5 1.5 ] 0 dsh
446.805 87.0269 mo
556.047 87.0269 li
@
[1 1 ] 0 dsh
446.773 85.0269 mo
555.547 85.0269 li
@
[1.5 1.5 ] 0 dsh
446.742 86.0269 mo
555.797 86.0269 li
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: Symbol Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /Symbol def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/OrigFontType /TrueType def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 109 /mugreek put
def
/FontBBox {-167 -299 1063 827} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/.notdef <1C60D8A8C9B7C3C9ED9313AFF691AF9DEA7EFE9F59246D6675CBE2
23F5D9796E7E2CD60A70D0> |-
/mugreek <1C60D8A8C9B7FBE1C14A06FB24B6C0C6F56580FD42A6827A871A58
65DB05DF3039C5CC24023E2CF207F1D838D7B8014D981A9F9D1A00175D018BB8
A4A835C6CE662182D07F057D0DB1ECE9D81AE57C1B591B886D1207B6678807EE
FAEC320EA60C8CF3AF3759683C3BD783DE0BCCBB1C9276326B9DDB23480282F6
ACE7EFD7C9F74009A34650F82020B6E558D9D13ED144999418E53AC28BD94EB3
5501670306C3A4273743E8E83C6E71B506778AD576E756E99A1A64687202B2DD
FDF9C33C9388EB68F3AE7F4EAFD16C77F25DEFBD8E057C9F96DB72C4FA6DEA8A
EEBC96F967466F8C8DF2EAB4B03FE7AC> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/EIHJAF+Symbol /Symbol findfont def
/EIHJAF+Symbol*1 
[
109{/.notdef}repeat /mugreek 146{/.notdef}repeat
] EIHJAF+Symbol nfnt
EIHJAF+Symbol*1  [18 0 -0 -18 0 0 ]mfnt sfnt
203.789 23.854 mov
(m) sh
DJHJAF+TimesNewRomanPSMT*1  [18 0 -0 -18 0 0 ]mfnt sfnt
214.16 23.854 mov
(\() sh
EJHJAF+TimesNewRomanPS-ItalicMT*1  [18 0 -0 -18 0 0 ]mfnt sfnt
220.154 23.854 mov
(B ) sh
DJHJAF+TimesNewRomanPSMT*1  [18 0 -0 -18 0 0 ]mfnt sfnt
235.649 23.854 mov
(\)) sh
1 /0 /CSD get_res sepcs
1 sep
DJHJAF+TimesNewRomanPSMT*1  [12 0 -0 -12 0 0 ]mfnt sfnt
230.372 27.6606 mov
(3) sh
4 lw
1 lj
[] 0 dsh
188.717 71.8413 mo
190.364 58.0454 199.445 43.144 213.14 30.6968 cv
0 0 0 0 cmyk
@
187.88 78.8525 mo
185.023 68.4907 li
188.78 71.3169 li
193.095 69.4551 li
187.88 78.8525 li
cp
@
0.5 lw
0 lj
188.717 71.8413 mo
190.364 58.0454 199.445 43.144 213.14 30.6968 cv
0 0 0 1 cmyk
@
187.88 78.8525 mo
185.023 68.4907 li
188.78 71.3169 li
193.095 69.4551 li
187.88 78.8525 li
cp
f
1.5 lw
[2 2 ] 0 dsh
127.019 80.9385 mo
234.661 80.9385 li
0.74902 0.678431 0.670588 0.901961 cmyk
@
446.532 83.5894 mo
444.845 83.5894 li
444.845 81.2144 li
446.532 81.2144 li
446.532 83.5894 li
cp
0 0 0 1 cmyk
f
126.548 82.9019 mo
124.532 82.9019 li
124.532 79.2769 li
126.548 79.2769 li
126.548 82.9019 li
cp
f
6 lw
[] 0 dsh
0.5 428.694 mo
559.231 428.694 li
0 0 0 0 cmyk
@
2 lw
[3 3 ] 0 dsh
321.7 427.609 mo
556.231 427.609 li
0.74902 0.678431 0.670588 0.901961 cmyk
@
1.83301 427.609 mo
235.449 427.609 li
@
1 lw
[] 0 dsh
457.865 368.027 mo
555.865 368.027 li
@
134.532 368.027 mo
236.532 368.027 li
@
170.366 427.36 mo
170.366 429.569 168.575 431.36 166.366 431.36 cv
164.157 431.36 162.366 429.569 162.366 427.36 cv
162.366 425.151 164.157 423.36 166.366 423.36 cv
168.575 423.36 170.366 425.151 170.366 427.36 cv
cp
0 0 0 1 cmyk
f
170.366 427.36 mo
170.366 429.569 168.575 431.36 166.366 431.36 cv
164.157 431.36 162.366 429.569 162.366 427.36 cv
162.366 425.151 164.157 423.36 166.366 423.36 cv
168.575 423.36 170.366 425.151 170.366 427.36 cv
cp
@
201.366 427.36 mo
201.366 429.569 199.575 431.36 197.366 431.36 cv
195.157 431.36 193.366 429.569 193.366 427.36 cv
193.366 425.151 195.157 423.36 197.366 423.36 cv
199.575 423.36 201.366 425.151 201.366 427.36 cv
cp
f
201.366 427.36 mo
201.366 429.569 199.575 431.36 197.366 431.36 cv
195.157 431.36 193.366 429.569 193.366 427.36 cv
193.366 425.151 195.157 423.36 197.366 423.36 cv
199.575 423.36 201.366 425.151 201.366 427.36 cv
cp
@
0.5 lw
[3 3 ] 0 dsh
165.866 367.526 mo
165.866 427.861 li
@
197.116 367.526 mo
197.116 427.861 li
@
170.032 368.527 mo
170.032 370.736 168.241 372.527 166.032 372.527 cv
163.823 372.527 162.032 370.736 162.032 368.527 cv
162.032 366.318 163.823 364.527 166.032 364.527 cv
168.241 364.527 170.032 366.318 170.032 368.527 cv
cp
f
1 lw
[] 0 dsh
170.032 368.527 mo
170.032 370.736 168.241 372.527 166.032 372.527 cv
163.823 372.527 162.032 370.736 162.032 368.527 cv
162.032 366.318 163.823 364.527 166.032 364.527 cv
168.241 364.527 170.032 366.318 170.032 368.527 cv
cp
@
201.032 368.527 mo
201.032 370.736 199.241 372.527 197.032 372.527 cv
194.823 372.527 193.032 370.736 193.032 368.527 cv
193.032 366.318 194.823 364.527 197.032 364.527 cv
199.241 364.527 201.032 366.318 201.032 368.527 cv
cp
f
201.032 368.527 mo
201.032 370.736 199.241 372.527 197.032 372.527 cv
194.823 372.527 193.032 370.736 193.032 368.527 cv
193.032 366.318 194.823 364.527 197.032 364.527 cv
199.241 364.527 201.032 366.318 201.032 368.527 cv
cp
@
490.897 426.835 mo
490.897 429.044 489.106 430.835 486.897 430.835 cv
484.688 430.835 482.897 429.044 482.897 426.835 cv
482.897 424.626 484.688 422.835 486.897 422.835 cv
489.106 422.835 490.897 424.626 490.897 426.835 cv
cp
f
490.897 426.835 mo
490.897 429.044 489.106 430.835 486.897 430.835 cv
484.688 430.835 482.897 429.044 482.897 426.835 cv
482.897 424.626 484.688 422.835 486.897 422.835 cv
489.106 422.835 490.897 424.626 490.897 426.835 cv
cp
@
521.897 426.835 mo
521.897 429.044 520.106 430.835 517.897 430.835 cv
515.688 430.835 513.897 429.044 513.897 426.835 cv
513.897 424.626 515.688 422.835 517.897 422.835 cv
520.106 422.835 521.897 424.626 521.897 426.835 cv
cp
f
521.897 426.835 mo
521.897 429.044 520.106 430.835 517.897 430.835 cv
515.688 430.835 513.897 429.044 513.897 426.835 cv
513.897 424.626 515.688 422.835 517.897 422.835 cv
520.106 422.835 521.897 424.626 521.897 426.835 cv
cp
@
490.564 368.004 mo
490.564 370.213 488.773 372.004 486.564 372.004 cv
484.355 372.004 482.564 370.213 482.564 368.004 cv
482.564 365.795 484.355 364.004 486.564 364.004 cv
488.773 364.004 490.564 365.795 490.564 368.004 cv
cp
f
490.564 368.004 mo
490.564 370.213 488.773 372.004 486.564 372.004 cv
484.355 372.004 482.564 370.213 482.564 368.004 cv
482.564 365.795 484.355 364.004 486.564 364.004 cv
488.773 364.004 490.564 365.795 490.564 368.004 cv
cp
@
521.564 368.004 mo
521.564 370.213 519.773 372.004 517.564 372.004 cv
515.355 372.004 513.564 370.213 513.564 368.004 cv
513.564 365.795 515.355 364.004 517.564 364.004 cv
519.773 364.004 521.564 365.795 521.564 368.004 cv
cp
f
521.564 368.004 mo
521.564 370.213 519.773 372.004 517.564 372.004 cv
515.355 372.004 513.564 370.213 513.564 368.004 cv
513.564 365.795 515.355 364.004 517.564 364.004 cv
519.773 364.004 521.564 365.795 521.564 368.004 cv
cp
@
207.532 409.527 mo
191.532 409.527 li
191.532 384.527 li
207.532 384.527 li
207.532 409.527 li
cp
0 0 0 0 cmyk
f
1 /0 /CSD get_res sepcs
1 sep
EJHJAF+TimesNewRomanPS-ItalicMT*1  [18 0 -0 -18 0 0 ]mfnt sfnt
183.533 400.021 mov
(B) sh
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.
systemdict begin
DJHJAF+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/zero <1C60D8A8C9B7A73DAAFDCA97EBBC8D8E35A41D9404C5638B059E1CA50
B5366543C3D584AD9E19987218AC5999BB0F2477597AB6F8DD868788C8440CBF
4A338EF64ACD9BF2268656755741DB71FD86387D4A7AA1CFD19937BFD209E4FB
CD1952717C8CF8C0555CB2D0238DC43B2A6A2DE4D7366DB210D2673870D0B0C5
8344E6AEF91B916BAAEAEF37B22F065E870AFE6638E56D0B4AE01785D59EE234
02242D396440157FC51> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DJHJAF+TimesNewRomanPSMT /Encoding get
dup 48 /zero put
pop
%ADOEndSubsetFont
/DJHJAF+TimesNewRomanPSMT*1 
[
32{/.notdef}repeat /space 7{/.notdef}repeat /parenleft /parenright 6{/.notdef}repeat /zero /one 
/two /three /four /five /six /seven /eight /nine 
39{/.notdef}repeat /a /b 2{/.notdef}repeat /e 2{/.notdef}repeat /h 5{/.notdef}repeat 
/n /o /p /.notdef /r /s /t 6{/.notdef}repeat 
/braceleft 132{/.notdef}repeat
] DJHJAF+TimesNewRomanPSMT nfnt
DJHJAF+TimesNewRomanPSMT*1  [12 0 -0 -12 0 0 ]mfnt sfnt
194.283 403.828 mov
(10) sh
DJHJAF+TimesNewRomanPSMT*1  [-0 20.0833 72.6598 -0 0 0 ]mfnt sfnt
28.7822 29.6938 mov
({) sh
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse

%ADOEndClientInjection: EndPageContent "AI11EPS"
% page clip
grestore
grestore % PSGState
Adobe_AGM_Core/AGMCORE_save get restore
%%PageTrailer
[/EMC AI11_PDFMark5
[/NamespacePop AI11_PDFMark5
[
[/CSA [/0 ]]
[/CSD [/0 ]]
] del_res
/EJHJAF+TimesNewRomanPS-ItalicMT*1 ufnt
/DJHJAF+TimesNewRomanPSMT*1 ufnt
/MIHJAF+TimesNewRomanPS-BoldItalicMT*1 ufnt
/EIHJAF+Symbol*1 ufnt
Adobe_AGM_Image/page_trailer get exec
Adobe_CoolType_Core/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/doc_trailer get exec
Adobe_CoolType_Core/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 12.0
%%AI8_CreatorVersion: 12.0.1
%%For: (Ken'ichi Ohshika) (Osaka University)
%%Title: (fig2_5-new].eps)
%%CreationDate: 11/11/09 11:30
%AI9_DataStream
%Gb"-6?]Sd=OXKi/mWYTG!n%umII_lb?n>Q*X(kZk/Q!?_oPeFY7&dagor>$]dsiccr8J<>_>(isrF09q(Y^WOYHc)2XT.VgZ_)tS
%Gi&-E3.CBF1XEV@RS?[8f!+G4lILf]-Vn>b6tA\rAE8++S\KF@r9:QNT:Nalc&YVI4:*I-U_Z^?aLh3'qa]!3o_-h4aD&kpU>2_<
%;1G%5E&qhg-[Oe3`QanLgZPbip@?2ImAj=c(O%N=^A?7!rlaWj-U50@N4uhdq=s[Om_uA*cL7oSIPj9/p#>d_.f-uJpV1rm8+?QB
%jMPX)\$(7,qs-IpEI[rbB-7'4_dh%`5CS$/p[%$n0@+"\4e2r4]0:K2q<)tJDP-pCnBS?^VbaIeh;)DNG^4f;qP9]8J3!YOq3u#@
%:Oi6'rYN$s$*Qu+3./R[qtVa/'k%RO$i%cgDslIE^&8i-m.T\)n*0.>pnE/Qs*o"bqDF6Dou'^cp-8BJ:\J^5]matI'bF3F+8krd
%?i>ndJ,?Farp@JrqQ%BMs'P`\f>%:!^AdDIrq`[FohU#bDu/tsrq!bff=*NjXjZu6^RU$^bN;jK;r>*do;=4*EoPkgM]n[f)?`lb
%"/JQb5p<^E4M1RbO,,?)SiqT%imf\Hq:W(n_:RA`f,m-P/&FPd6tRb,P8`7kXf]b?J,8<qp>sVm5Ju-!J=>E`-SM(JhC47r\[oBW
%<YiF)paZM3]RK\0m;!p9(O'e(5C;qu7jiH,Y@q14>^q%r;G`5e]`7fpo+,2U`(b^A6TJj0;j.J;K\FBs-TSXL=8<=$U]c./i-g_K
%'%_[QXD1)\HU":qHiN36c^m<"Oc+luQO12SbNSrQb@aVki"gf?jUZRpZqeB\I\jI%n^js_T53bLg@d`Kodn;N:HjjVI/$>Y^us=q
%mP')hmnupea7#SV;L:%!?XEmTRQpU<\%ap`s7/%GDP<[6n2G"XD%2!hH\7''cOfS_#l$:\q=a(\:WlZsUK#OK,Kr%C7B)f\Y,oq"
%:o6+7C%R%U>=5C@:^[6]01tX+.(.smao*:<m.VoLFbOb;Y&_P2=',1rl:RY1(/'"N4n;)<(/NZY+me('?^*mLn/%qJ-gRaZLE>D-
%b+M9"MgcTljB;*]IrU5bi@epY4A!f]&cSN^p]M:Z_E.pjnpZfi^[N%NY-%c2nNk>%a+?ar')p%;dW9-9ZsDB4Db%ufN3%^1TG76X
%^Sj^n:jO_Nab\mhV9hFG@DRg`MuMZgma+$5J,GRt"+n99L&U&7N1s.*i)SWp2]<-uj[MHmB$rlZ3_B_8$np%MBg#WPm?739br/m+
%_L>;c]edf!n*m^V>/!H*n/%pS^<o0]M*-^2."gCDhD<;4h@[uR)hbe^L5f5mg<al6'VP]j$QE$\]<k>;0(0OfU#e0Vei.;)9%hsq
%G'RE.QQKqPE2HI<N4Ik9C:N7FU#3]Ro$$Mbj4;%LL8R?76JY-*KDtB4THW@f1!5740b.lZ@1l?HCfjoD^%Pd3=.XMOi?*H)<-7us
%]mMV"jX3O.+.r,1HS6[rN)06u7IJ3or7!4j[G&6nrg]P$2rdhccHkU$I*0e']o*8LN)08[]Ti<`.6gK*&UBDA_d=9_\[OZrV#L2"
%O6Prh$M_7>l0>9RSCOs'c`;t%jW;1Y-]e9-O&Yt7VB`nHT7+kGe,L5eanNp+PF)&<ND!XFhM^Rl/pYki4>)$(s5d/Xp[m^.eRS'g
%o4WCVp]bSt2TduPH$-C1E`$>+BX,12G2W[%drQ>R12[d"%@@!22<[sT.0r,'/5L?S8RS5`R75<q$ohujgJNu'<W4WQ\pFs,r($E5
%g/>KerqZ0&"mZcphT:s\#=3l]qTd3,emmLY-u=>?O/B7(qXap,Y@'f=*IS_tm*B4ld"AZ^GG3pb%5>okpD=qK[r?*_Ol#,T;4$oZ
%`_R^`>1W/Q[W=*H@(\OG#;AZ_1h-==i@j&/#d^s9gK4OEcfi,:L-/SenR$W%e[]GL2a<.J*O^?5gGd[T[XN9l=4Tm:DfFB'kFgLZ
%a+nFk`!bEb``1[gmb$:&]XRQ+q1Uh4.BIBk!%usU./5o^Kag5,4oI"JdRI'5@8Q`(jIo-LK%5Wr3o6D/UtoI9\)Hu6[=!m2P57o@
%<N`t:S[.<>qJO4:=a:g@Ip:+(SbW8dSKh8e3g#gSqr</)'R@:g2,$?>c+)9VA,BC>CVWC-^76IpeQSOt`Hi$i2:$=6Bi=Kj)j,'Z
%G[9O3A<t;>rkkr3;eE9(WUeq+^"Bu/&pa!Dbj@N=>4rfHU#5Q5_^29@^1<^k[5HW@eQ[QJ1n";X'WauQlhHq*GCTcd#FQ[bI?iL1
%k"=)_XM<<fU2t4)[7j3+.i'6BB0;,3(p7GiRdW]`bU$2;m@@=U!sq0T^T1kS:eEl;&MfNtT<9pAq:"1PD'G@ql]>(U/tKDC+U,Yk
%3\S44.\n\2`R*_*edfHc`oUrK@\X(g,LJX7SIa0SCL"Bq1IglClRgXVL22\C]e^\M0Hr*Uet_?$D\rVg,<hgCW:j(3I1C4[RF^Rb
%qf@%ToZNgnX76.h*nC)i1HaMq1N*\j0oRgk=hA0,:8K)C!:RpO4R,MFWoKU\HE>U>dLtTRdQaWJJDIaPF0DBV6E*Tqm5-l1hD'_^
%%U8HC[JV$=3Y/V-`JI;#jS@:pSK_FVA"=ZTNY"3\@qt_Z<`_-%d(@VGP_$=8Pm"ZR)ofkWEa<A'phWLke_Pe:b2pt1Bp2*)Gt7_e
%jR"bDafk3$C)J%,&n_%_ml>01B3c&7R.'t7*pUH.fZ`a\pMt5Xi5U":q+TZmp6]5+fMHn%q/\Fe,,p@2ATl1!HHeG<4LN#AO?TDB
%*W)_[=D+ACnc.cfq4k;T=Y@U`l9'45[]3qpc85Z=*ht*ke$a+Ar3D<L8UJ'r5T6b:J&V6&4HHIh%+8(`k\.0(?ka_go'f=9^Id9<
%F;M:^LX!N(,M-%%[@qpWUciYF<NHAH9>.7)Bi=C&DdqrqbSAm(1"IE4S(4RsUbT(+r;BHM`<nN*7=*4)*IgDU.A`J4)`gIVs/!-#
%[?YM4@s$DeO-Q:dP,EeNU&A#p26$812B]CW\!0HK0@Q;e(M>aX(X,h$eW,a&`@(7O/[k?cV(rP"&hkkpL,s:VhsIQ-ef/q(hmn3e
%HF&'Dh%r1$rFS0S`aJg^qc4OiJ'V@0/Y=I_A7ClA(XA$;l2<E7?HQAm>O8TdeCqI8UZE#op46OUoljcemsF![Rp+oX*Ue2iCEF(^
%e@2l/PjJ"ge5CX>`cJ'+UTL([X)DoDe`-<:MXB&r?1Vb7AZV_*[a2VJ?*FfCd%31AYejiaO,:Q^_kUV!]aah^]C^4e(RkTqm6gmG
%G&i(GD@,%_ZD-r(11U$;^)P%6MlQ)ni7=Ut9]ML7k)Xl:mKY']R7+fWo]ug&Z$L^hV00/F\+m%cH<Kc?R="F@4ZD,'.iI3'f46N0
%p2[us*q(ElNq:t`[;XB,j6<>OG,2gX'O/m0h]Tu1(:+NDVK_#8d?3>"Xm8$9>3\IlAXsu_onHo.iG%mS4B,)R8:m$_>caCQAU7R1
%&*Lh_*TGcs3H!Gd5DR7$XMcjL6Z&&1dXaR8([IJGKVM=Lc;0TK\E%jP3$Q;+9m#HeVM/]u9lJIF*d>Ps3VFt(NG.?jZQ[>ll&N)E
%[+29k9rkHr[@,l`rLA>[lpZ8jSj$@9a.Q\KXD8Z#k.8"(l[m/6bA=MC8CB\.ETluQgKWp,7@o[O*jJ]8Y\Ul<haY:H5G%0,EdVb9
%Vt8cj@70@<?*IYd38Qc>VO=m^Uj<[!p$$#D!R^p[C6nC]HueED-L8c@1osRej]eYC1f<[<bBa(uXlnn,qm158oW]HZ.Li-`FE\mD
%R(P%R"?/\PEp';'$/S]mG<Y?tf(S+.2p7Y_lIfU*4o&EcR]69\bIa<hjR'1Ce/LL(/R(Hk>?]JR%bd5B<HbG:m,:ub^Q2f7R<?Jd
%`GNVLT:T5p^Np_ePMOiHA$3BZ\inP([Xr,f'+6l-'prW1hgB$<HT1:3beP$H09Pg:j&%UNP221TKt5-flMRrj6[VmdcI^p`fq2bq
%c%Po\@hGmJB(%qXo,<CEf>5*^qMsaW'AR()N]jrDYajtQ?ZiP_Vm%R$m(.Z#=t@X,c1G2e^o&RHXelE+I":/!@rcE-e*\SWa66<"
%O[j3K:%-6*+r)K.3:!\2.]q;"Ybe`:8#0:O;7gZ($!le@J1GlaSG6Kg9h"XuK4eq(@HX1lS6-O_jj1[S^N'0qQAX*0>B:[WDgGmU
%Q_JeC)V3^&.dOA4gV[Ck1NdL$X;RjoQ%snqPaUQefES3'Sr\]%ot<M.*,FGDmJY]6pHs%k^+oWH)rj%-g(=b,le;6`Vu`.rB#P7=
%;VfO*n+U)](9?>jhj_>%i:=L=fVm+Eot-4Y'G]-rcbgP^r"CU9IZ&Y>0Q'bM0oO6gqdZ[`Ncjl%^FEIcC2I>/r\"cDV.dSD>GGS!
%Ef*dORq;Nkq_EXKDjY#Ek')efc(a5f7"EsIDpqYBj``hh)V2_55Q*&@^Pe-MY4#]_%EI<S;4.43M=_0YjS>3I4d!e?+qfMeNPqo`
%8DhoViWh.F#+dUr<eK_b#Xc#!Ra`SL_l@NP=X/*g[E*%joQuqNT4/1[r3q/qO'O!6CidJ>?G<prnX4dVs6";a\:+><oA-&-6@8Ws
%DdL)jIJ)t&B6Ug4/O07$jn0G!f]Vc!m-1k2Qh8P'a(I'ilc8mlgS`Bcm]IX=?JiD@IJ`f;YFjW6]m]gm(#(nNH%4gWMHk4>O0<Jn
%]tAW3s68A,D]W8H1@k?#=+4YEhsuuCa1(X'mI]UZJ+T..s%LQtS'!kZAY*u9]>lS#ljG9>@Oh8LQ[L#OGp>c88C9AkkjIu1?M<XV
%B:n"oI/K3IG^K>_L@G0:ea(tVGNd#HgDfLAH2NRZGB^O"++Jb<&fCEAQ]LBfqs3E@IrRt\H:\3h-Z5P?^3T8EQS4tZp<2'K?ba7&
%H@(/?nlLmK%K1FIcX4>6HMcseZcgDX^Uh%+ougVGI=CqQebui;DakoIr:9RWj81c>nEus>ID0t%o[@$ElIkc5r-s4plK6>3DQLW2
%_=d2Fq<%Ac3r/EeYFe%nrQWUCof`=JeFi1jqMlW\:ORQ`Jd1tR)5"U9Tt\3inbV\Ie(<VT0QDG`pZutnr70u^2n+joA2);nf_"4p
%nI*^bo;C*6a1(g@_1YK1k">#1lK#PX(Z<bT?T\FAFJO&LJ)()$o]<K>kiJ;#0=[k&.D=Pba49PuJ,5*bXQ2ZcIf)4>kJ^@2#`nZ:
%ZX6tP]'Tsf)_1^\QS74.+qiQl5+>+8Er,f0.-%TlmSZmQ@tFZ)-J'@669gc&mn9AKVu!LPmn8M098T:eebi[dHA[i2p$15jl"M#k
%qs0`<T_Fe^;XF77)+%G/3-t>oQZ&IFG5_!VrS@.9f>NFtT&9P4n]`pS\,5ZXpO&f%roCsuDshOnFRiB,;RXBGR(@Zoo)dYrIrt7<
%Cd5:4Lk#D+!KRsJ]@T7Ea7:q+4+$V\_j>:Z5Q(*DgNS+q_=#;fq]4r"#JeB8&,uQ3eTY(Y]^>9oNW$J+;b(]>`tm!*52X'roLR0g
%mgiU:WqdZ]nE2Dc(#UIBKZD":[t"59qMoIaj(H\&,sh>&b=T?uppgCLNjmVJBADiYFc`mSj^16a^3f_Cdn_&!:@>;g@!qtE`R?b)
%1^?.<)IHu4UZuWAr;QZ^B@eLmf@".Aq2gskY*I&ZT@3nWd8mXNpu;#8p%=/c;8j6+f>"nFrn6[qNsc<POl0+QpuE8&,T2V<BR"tq
%gk\[a]:XP4DsA]7]6cnPrR&e)Da+3ko1r`[IW5#Q`@l*84kO<Afua-+pnos.rUAkQ$D@Fu_Csk(r:p_8&Uh5Ta3C78cTfFA?Z:SF
%lXujin?&nhi!)7q?_3e&I.QWi-Qg'IECZ99qb!IC2nT"Z^[OGc'jgE"gYhSs&cUSXedsh=J"[$1]70_%POgl)]3b/3bO,5QnWJ<M
%m@.emkgKcarplW:8H!l6rc<AX@F)?s@F(9ZepI/En#ZEdiAB]`jm.[@6=9`lV\/fA;S-%4I<K\5*CmhN2<^+o<?@e$ccp`p5Nfd+
%mU\]Ym+)&Bg'Q3.2;\,SXQK!BY,f2#Qa``RI&eoG4Yu*NgT&,pdWG&E`6&='T"ViYpj@)]3H@TZI.5>Fc`Q'M]2[lNr$S'6X[A_.
%CPdCXqrs$*pS/Z/]mTgumG3]HDqALo8+Wd1UO>fVD-u599*LX_IKuIZ]7,5-nq>u8%8WRD!G87?l'pbjQNqaP*D`']k?76#UUNpH
%n`9WDo^s;7"t"ck7jgOrqR?LRf>%8k^AdDIqtdA.qtGU72dcUYJ*#/js6Aq-rp,(6GCTMYroS.uh7rn1s8CjR(I-]gF3,)>i_Rjl
%P**HEro5#B^=#Ge?fI679NPB^d[%6$I+ctkZ!8n_%bkKM3pDMSOd8m9a(XnbS\)SIT^1$3q1Z?&msOWP-_GZ;:%N#sS?BQ?n<a,(
%/6%64+iKI/%OKWO_HAi/qf!-"l+2aFFOA,?@n\Vt''h0YGS\Wc5$l1NGa4TUi7^^VV3FnM277OlcI4s_Us!k6%V1oS%QW[9F"Y#c
%QI#,IhWKfERBLdF.B`FY8h?rPCre31S<`]O0A(c#<L<!NYG&t)C9FBWGK!]JYP[-?,`H$^cfOH'R'-C0SPRkjF>^[RoVYGcRBAYX
%Bt@cg_K:(6G5U=q[>\nOjRI:G?2K)AgU3e@BDlSo<Muni/!#TB[d;ekH_6hC"MndZ%sO1!Bp/OHY^>i&/bo5Y8tMn*Be]Uc5KbgI
%5Op*`Fah_@cWKBSY54L/./uI%NVuY\jhVg&I^g"tp(R)hHo\kU\TAfDot''sYLiT1kT&1l?VR`(=5b[qQ1U6KfoP=>l*]l6S`nL!
%^XVR9Y<?7UHCa<Npo8Z1U'n6+>\WAD.>0@&SaCnSk/OgMeZ%ktY7&&;I%BSG[Nc*0X793_.XG[?P$Wl:l(,O_pZ*uJ/QY$/A%jSf
%g?Wn,f9or>YKBqoMrb$I3k=7qL/(QZ]sAM-Mm<1+Zh6=7DIq*eb^Em+Kph1W=lt[R!^)Ps,>j">oIM7$/h\h0p(um.B,Bs0mOlXN
%^.9'&#fID5((q=JqhtE%J%e/%[sd)!IGUlM,f9))d=m7ojnZmkrqu]lm(An@o5^GKds33bnq?7=7hXqSm,Di2G(+VSC[gF:T;Akb
%Uul@o(6UJ?m@s"&GrofDeQ,jkWC8!s:Lg_mi45p*F\bp'N20b8Ok@i&rZ]aeVa4OE"QJc>9V.BVX<]\[M9e^llY/$hP#.Jj?hYgY
%cUcnnP.R.CD^9)k1sF.'`7?5kkWOdf1D8B+7!Bsi*dJ!lUS51AnU<c5rg^oT_j5[^^<"O\R(4i;S^*XMlAjOD0meF"(?U/UVYN$F
%EDUgf63cs49WT%(SnC`VKrH^\[1SDcR'&'/Nm=#0$<'Q-_Ji*SS`Ju"@WUoqfD37*B%NJ?``3PPZFTPg;F]A_NZ($fk,iY!K5:?O
%rSG(r>g([6Fh,%82V3D)m?CJgFgej7_,WEqRBKoZlhO/B.rMM/E#JQMh*qlJnj%Y['Qd4tZ9aYSSKlj5M"\S6l0f[frGPL.F+[W[
%>C*3Kf7F+BNaXN?8gp#KhZh&SlWcp/#1s,da?dqD,>keKkS7'pPfr8Kn!Ki/dZ"?^1Q6I0Oc78<on4K2G3T1pG5ODuZ)LGE\tk\;
%K/+t2*%<\@c(?ndmWUe,g14u_02KQXTT%4XD>#2q]$9_&j-Lc:!2^6nH6CAI\R)"%>j,aF#&>6MXppeJa1X9_`I:4G@F^+o)&'m6
%rb(&:Xna'fqn(EDPl=t?qVP$15GI\O(&m#NB`)f!pUBGembRPaRLq4='p6'P)@/0(-CQe"c(9o,d;taN05+D"g(=iT,*"q;D5(_\
%S*V'!p<[o/6.>B>0o%!J#rH!:R^W[Lhi6dgF.1E.BO8FtVK#!uJ`chto7#AT!mjIM3%'F<JeS:i5WL$p5RKk&`M$O9dNZt-S(Jt9
%cc$XhR3V81Ui@[.4:5dFNAQc=dRYu]1V)4j!C<-LZ4OlDIA'u0.RUBd[0@QRro#CCf$[sIJ[GVgcL6]V=M?TgDW5cuEoh4Nm_RJ,
%V$Af#7MZaD'+adWN4W]T_5q*imO&Jbgo4Ph;mmYsafO,TEQs&eqpo#mga:7Rl^VQl<qr[geVu!sZjl<W1PLJ$0?'/c6jn`3'0MET
%NqkOejb*77dm#gb0c,?N^^5AM#4M_tX)8/(jpfWlL>0%%4dlSX0XH:8)RBj>k'YAeDR[\OIo([qTE'0>R%(VKAtF'BjV$j]Hkj=9
%2P;GhH"ZjB>HI#Z,Gt&e_jPd^\$;G$b&2[\A3OTZoAmYJC+lJ0`q%kXjiLEQD(OeT,A-LMa.LoX[IVU-]8_,cbWJ($*'\*Tml"A?
%0sc+m4ZdW?UueCto?dtsH?2VKL6LfMH#_N5g&6!YgWafe^0-IZ2gn?Fl-!SkZmN6W>IXR^l*mQVPKbG%N'_=T\+2J+p"t/qeNa*1
%X0:GtqTo3<l`^<"YJ9q#E7fX4\*uYrj]d%nH>EO'L&W9L<=1Cc6hS5R3]TTnZBl#sIllZgqg\<XLe.&[3(X'7N.2s>,t9i>"E9!@
%Ij8uN6gh\'&\5=nGMh;6>hb@Pmr(UsD91Q-2^6j3jR2maO_YnVGLVH(;Sp'DCn5B\\TVoig40!8G8,Gg)1:U_\%:D,*5BD!>C#8C
%mmUd$45qag[b$*)orZgfQ;IQ7>thhf$&Ch@*rk/Fm*g\.FKta0>5UZibf]#]52q:t^9W#BE41-@=Ifkn2-:=e`KrL@H"HUiI&D.Q
%1Jh>E=#3r`(^&ic,9\]Kk)sV4<df&Xk&gAV!G<W2?Gfr,-q6rIqWI3kphr/LAdpc"V_Oa\dnG@_Y_S^2q2SYTAf?NfjNkR$gHVQb
%s![tuI1f>)Eq8DnA3"qXn3?eKqNu'1[sP7Hj9Yh0ECcT"S,;ARrL_fr'lMBjcttbe-bndKr!@i@V7+6"Gk(t8deg"4-t%S9:ai4u
%HVLmb?nR]!BcJGoDZ2\pe%0jf!Tl^$c#rO3Wj-D>LB6O(1!]aZ]2^ZQVS`V*$^Is\YQ:iPcZb_(B7nX^E@TG1`.,U`0DhAUVU0,V
%GG6@I]B@Ka/`Nes^P2\joM[1!IJeddn$FG?F7QAM=js8^Xo4C5pM5Lp,0QetY)+4+gH3@h'l^("C&NChHd]Z(nJ%mQf_9PN$H,WU
%>d>*KgJK(M)T*JqJDEs(4LM0`?9iF!!M?;f]aK-F^35dqP^4/4Ft,aZ>uIlADPn7HPO`C\gtC:E)(C=k9Qh8HbI`=#7Sg(cZ5ofR
%X^4IbMlX-([OI+u]2_FVCs&GeDFpml*O[D4I7W>(d58T&(QDn'd3&!r/o*-k]C"3TemR7<dYkZ35dodU%s(<pD9H*)kaeNJY5?2F
%eIMI6QgHIY]C"3T[_k"7V&+2EKl"n7+6J_,[OH!?5YZ\`?D.+5AA%'1#.(ViIa)F5[Oj#CQqIcs>L*(!QSd@'D"#7cj1$!\6-H]@
%F4!0V;KUZo\S*(eF]%PC<)<g8?*(Mb.bMdV?'JI9[1Wmq5Co,,#]r_.pftm*UC\#'BK==k$oA=%EnZ=$k!B9@C6C75MWEZkUY"45
%,;ckK4cNAVXf6Bp%bm5U(=-PRCfAn'5*tZ@D8"AK<OE1^P1uQG:X)$Y)Eeq(WN<qEANT%PZ3K'L[/lYP.`b5">AKC=DQQKfD/8=?
%]a(%4L@_rl-a6<Jlc!,;pNBcEgod[-cF,S4>;'eFRX56.%e6c9F'4-4b??R]Z3K'L[9h'g%<bRO1k/N-J?7h?B>pE"eO=ds8XPbf
%"?%"^IGGUF5"nCl=#WRM$WGI0dqu58Kt1+KV\Zr"]RE;U$JUa<]5$1%p](6=^AdHuj6OJZ5JR3`s,n)beLd1b's]Gj]jtp+s!?W9
%pK]WGWNLT[Q0Lbmc:7o/hoGEW:tFIEB>=?/LBbMp1jG0oq'8mI("rhPA^C*/9^S'\i8,)q:L4baoouGkMA1Mb0'bk%@*7M0nMCe"
%S[sY'$I,7u+F@+6geTfTK4Ndu.g2%pVJVgn8P%lYW$p"Cf1dGL)Fg-FMLAg?#b?$c/k#YW@FZXg4?_rg^eu4L9s:<=/>I,lh"Q[g
%A#]19jb:4#L58$fRlL_m>-BGA(hASqX.rdm+_VAG]4<XC@ll9)$ignGP<N'H3_([RC!"Vgei`3WVo?-m2WAp9^&2RS6/#@a"Ade#
%AjJj;o;/pT)Mnr#5NC5od^7I95n6PNb*(5Fcfdo5''X;3V+AK0:oOnd!-rZBOj"s4H5`=IZCH7+-03P=,TIU<3aX:,E(8Ur8D'QS
%0O@<2#`1q`m):GKjYXLT[mt80rLUC'"pX[rds6W=d*li27e?[2M&I=U*_7u'M4#LF#()VsWJf#K6OW$gP('/3NGdhfV@lQpOqC;$
%V)$bXUTI>7_Bc:&b@&LN0*e)SN1-0jlAFL?dhZ8(oe<0;9rWhQ7S)bso?<G:<J]#C1PQiJ>*DO8?ANl>.RfVA]4Y0`\BJLs5Espf
%Fc#?;Vbnou^o^Fp\N@_1f(@0WfsIch8J4dpefFBj@7%L>iqn_no.4@+,]_JY\URpRVX'64h"8k<&?r%B0&O#hF42/6Sq_K3-@%PF
%%#Hhe/HIW^DL#NDUfcALJmUGWU9:Uq5iQc96?GIT>6Z+@hRLQj`r"eh3g(H3lF<h7M,^rRH_.E-?5LbJ(r)Eh!ta'p-ZV>p`9I&%
%o=:m,l<=6'\cWj@jb!c9ScS%!$5c<Zbi`<PBN7O?l(ESE-br]F"'Y&6O^ApV!uH50UFs.J^4WsC1'[ZPA,l]qD&WsG8TW&WTDuXb
%.2iF5:)J]Z_INPYdg9tb,N$PE8X&FcHu%=?FQi"@P2Ph?S@B'M$u8ug6pHfkCD1+89kTV`CB@,^W_nVPFYoVC/_7uM8?$[0(eAYE
%)Ip3r(!\-=<Kes]\k_8LF?5DYVSg'0AQ2H:qfPIc?."o$6R6EbbhS-(;jH2#[:LkC8HEm.RGNfjGin,Ah\r6uUn?ea+G8/ikTYWn
%f(c27SQ)T0TUV2j_^!i(7F377HF-,:L6^>S\(mL3-u$@'GgQ>q>bhr<Cj6l(LtHs2dL'2BaV_RK/I2ot#aZ:76l$5W"^s!#__dVk
%MOMI.;3S6(MSqn+)M1[/]D$)T<)3$IgW1AEmNj2P)CcLCpN"SR##0<$dc>&*<d&<)Lj)]D[m!5GaTW]f</$8PG9n2%Yh#FlAt,$-
%LR*I0B-BW"6rltG:sN7&=B:9BG(ta8MF1X><)ob4(eS$I*G[u.VYZ,09\Bg)jipJUf7LTAR*;,(XjPDs2pfh`<EKXa]Ja[*&_eXM
%9H/K*Z<?3;*niJsD6_#HK-d]q&U2/+M/+'J*K#8Fp<!6dB`"VG;tm9H>2Q5eZbimq3n:L_dE113Q#p$@a^j5khc/L/J?*-R`R^J8
%Q't]g;4>o%=_jm9c>#0$W3b\a2.0tt&pZK\np+GNEm/-E20ULMJL>R-8m!%*JZ](i/-j'8Q&%.*AOQf6aJ!dcrU*,(n9pmr=N\-r
%OZ8VN=)Z1;s&]6olbEE@rr0Z%g6D+lq`%st(:"[s^25%Sh=k06PZl_kYc2mOH[(6b_<RiZfDk,,-2.pNo$&hCo>@,(n7udcJ:q:O
%0U>+J3#U=BQ[E5>L'W.M2<#7[/Y6lJ,Sp2H*qCa;)NQ2,>t7Lf=g5CW!WaH0I%bh(!E8?=b)nHH$IlF:K83RO$.5KB#n#d86Y3A4
%#5!K-0M@tJ"k+]9jV$L"00V+9`D#V'D'S?KA-Vm`FU(FT:D.b`#qoD$Njrr_27c5h$^X?i/2!OF\FA2d\"#M;n2f3d`-I"RORZW[
%CdO,_GndEdAZ3QU@2_6>F,!QX(,$+@:kORt+]sQ.=bTOG#&7"026t8p"FcXA,5$I)9<'i[?A/(%"l*1o"O$lPk(0W*Kqs75K]WdU
%Guu&C&Sb@^Z7Fb/*80@Gi[;%E9_KO%0G54%:!8ZgSq?/uM7Z+)B9E=<+&d4N82sm/)@kU-i"P)d9d-L$@GK?+R(,\)Oa,@S'=F(I
%M\d[O<_Y+'*fkPlKM_#-W-f+m9ZN78a6BhUW:N&/29"a4UFp"@O9^mKR^e^+X3t*io-%QE`]+3@.`;t6LV!Qk-^q3V'k5F<nTV4a
%S`;Sq&7tY;]?GMk>b]Z5_2&^si71Ab1R^pn/1^OfQXu!"iUGAf;Ng0`2dgHUKe^p(inc%9K4Rb%W[ZT^KE7ps5eU/%SWMKk'l!$t
%_$Nrm+r:7jP*?H9GRV#t,NeQ!0dofb[5/l1)Aq2UfJck1/&!6K9N]lDqc;r=`!24@8DcaT&Qh@*Mj19.R"/JYE3c@c?WUZ]8;KO2
%$ZMXr;M@,u=oei`#bAX8-s1!M276_a"^jfHiWi.9cL^83!9T%B@UTDW%$MFI_lMUQ?I@Q5'IEasenBq,`eImX&]56?acGHs80+Ra
%deg%;AnX(O#X/Wq;3N$""s3*j/F4-u'IB(-lA<q0Ale*qHe*?U=/A[c5[mL\BGTP1U90"ik>jlGWrf;W\KVY2Z,k'Fj#34G.t#iU
%)&;@dn=*9Z0Ig5*`&nNT:%EC/ip$OH_4S3P/'"B=&1Bq@@uNQr`(T<W4CC"9@7qj`72?pc!]B(nWO2mE0*U&756,-T':+e)m=GmB
%B)`4ecsF,DlFFEWT<da>13"*oWL9$58T\/"?G#PH5p7O!j=fLlRe0)8-a^?bXEkY&,c88^dh1c<+<lWl6fZjh!GXO8i!t"*;!&]R
%M7D,(Se8V8mZ[frm=dr,'G1[A`[?FkA+R.gZbZ%QYLdZRi8?&C@*u5-iopVb"*)\T046qX=eE!-=bJ75!#(F^UK#"4p=:?";"KjX
%1I[4b:7)dh0fCWd%?mW#in(YEA]1-[/Bf8LEDk`eFYpq?5aQ*kXQa+eX%R%k%#ZsW/<3GA*]WAGYqQPTb_H$h'7!$(3K+j"';QkG
%BZZWW82t*3-LQ_pOa;4B[ZNJ\KYW7EZ+@RR_dbZaj(To$,;?(MK.ZK!Lm[&A)j<WGGp1NS_NSQ3>,)C!E!XqsL+kJ!pn2t5ooVr,
%/pUdk?5u*"(m<#cRHP+R>"sS*`nJO`VeZlq6i1!45[>^s&>'O+L*Rc)AbtIX88Vh4KokT1"N_1G:)<B@pkZ-aC5^[]5D`hQ+UoHK
%RY@q!%Dn![<Ht"18d>^d7qb/%"Ao@h]^-S.Se\q2Js-(PTenVGATV>%<G=u5#\8O+O'Dpo_!Zp!rc/bmq?Tk%!<R(G"#bHLBtA3l
%9*nQ\ef^WlkS#emW'%"nS"_=-To,opK/5kYi%9kEeHF,(lhXa@;Q?K[XKds'>J.%poCo9)n2'!S`fkQo]LL?]["g+R)A<Dp88T2%
%<@&a'kUS8!*A:+*!gI*o8N[FiBj/$-:e(1oj<SaFKLkHiFeU3;;uuh6l2WIB<FGV[k\7/.TbF81q5?3cO.MSN2S%;0+RKWtbQ23r
%Jssig+"Tt,d>_c.,*OkE.6h8q-u+U.Q6UX8H]GKn<Z/R$g`LMU_,6sOW<bSim[LG(6hi$@jOqH?bd0B&W5]mp#Y'J?WfjHiiMKZF
%*83u7Mb&?&Yhn%,`i;S568_)X,l<;_i(!8OFN&jh6hS=c@c[o9?^UOk2VRf2MOU^RrC.<nO[&t,&W?-8L-!"BYMeQ_*A!W75Y4p/
%Aq\*%m+$>XcBS*k.!%J7EUOaFK_o_oPsZmjW:)i/&_.\FIkTqE)f<e:6p&,?eOGETjMFFXQrn3#K3'%N@(6X(V1;J,q3FQTFk@gk
%)n^WmHa!T'2]*pAas1`6H'-t[%,5[(&hoFN<>t)'Ug7'a%j2u]GHAd5GW+I3Tag"`+sQ!;a2ER)JH6m%CWpBC^k@?r<&mF;9fVir
%7Q(D%L5V6<#Wg-qa;/`9'e9cf+gJ?+aCZEXdA%08,'Frkam^%Ol^s!$"a/c>Z7-$P8sF.()4PZ.U9:b\`MQmnp?[$XOA._Z1"K"i
%4`&8lb`^VgCs"%]l!OS1PQOX&V7a)_QS=AT<s.*>,O5!X*@I^(gk(X'C6l+R7i\d!Yqq%\K]=XX)Ctt(Cno?o?T.":d_o=6)&RE,
%":a!(o*.lK;uo:_j2lTTI'.;_,l(-*`sa^7Q5m:p/ZO$a.L13\>+[p(&Qket91rbR+BrXR)K**K)I%6D/C>hbg(U2`-5J>&0]-A;
%'UG:n1'3)d+gP_l=sG@,a7Ci$Ed2@r`BPoJ"B3KA'ZnOQ*+gk4(S)C`4B/.A_hK.c1NTZu#+SA4iQW-="66Gd3&V77&nAlNCraAW
%*$F+4fPu;BaodJ,[c8R3GPhjWAYM9Gr60`tFrW>nOR+i@a'kNua_DDT%M!3Ei4KnIptk?36Ylnq68'&cHKpK@%gB&CPt$rpQQ5pj
%lK-A-<gJHMannc&VYa&u^=dR:0GU!G*6*TaKGbIK#(mdG:(@Y/#nJZq1^0J;&fYd%+ug6_#)QCAf`3NM:n#@r$d`Ih((To4?9%e9
%DI[H9VAtP\%(rL>p/r_8P3Zp!hBe4b]F76UEsr6)@Vunt-4's:"25ojQ''1A*h_aQ-<:gol:YmJ"HL=L+L*It+s7#C7+Bn)HGDeC
%H\f!3leG<0#h_l4=gaqrnc7F!`^NHuB2F($C<Igh0uZJu<26gGk)Y6^%L?OfL;[MfWM#Q_oOp\4J!2<<@@L#C9?jfqU+q9mN#;ok
%-=Bf<rE-doW=s_lSXrB@4!aLF66+BVYbJ'!H]g)R//JR%EQ$?NN7>O".)VS]LhpKeO?H8W@@3IW,4%^]$#7t@5gaNDPn;qA@q@A\
%]n6]I6i5h,X4`FmGUT5mqT("BLFIl+!>#N1*7duX=<2-:M3umdPOH2"EKT_KgVCCXMqrJ+`Ud7@%6[pi*f^PkJ^+D)'/h_64%h:Y
%BE@et?D#$AS*)9b5's`mW7qVh<._H274^)g&U&N2-BsZ0)*+Wf0XAK5c8sF!>pI7>krB)7<"6q.OX["bAQW5LF9Ze#Q&-*V@J$;F
%Js@2pbTceY?_B4&FiLdm#c5W!T9[dVRWMs+W[a4#F;umm69"-g/qs(4[csa<Ui(Lbkn#rmTWk@hQ^L2#b,3?Y$*s"X*Q^:\]%M1.
%AasTd;45A&Jm*<9M-=;!>lhL8->7R.JKI!8Zg4h&e\o[A]<4P!$YI#2b)d4t\m7g+pgM]]eWCEJZKb8<:h)s8!Z,qOh5Vt3*e^c'
%l3\6=k.=VpMRZR.W^D$*\I2-Z8!tb`);B:9'?[/@Fa+?)e]OsDWplK\=5[Rn>W:u!66bNV=\#\o^$g+bE7Bk.H:_jE=;c78K/n=g
%l3_o#`HS?m&Wo?uAl`1<hhTjd3[2\/SaTT"Q@#;qbZ8"eUA:9YQQZ?MlrK\)ctq6@@CCl'<ZT76#1ot<gs\[!ZKd6n'9/:qF[Y^R
%;9R1`b7JiO1:?BI!s,>tQf3T6dEb9fL8!shn]VGpB5/;b?&"JC@^kV6lHnlT@auX)Mu0PU*E>aI5o`mL(]n\geR<;K%AOE>D+UlL
%FdOf1+AFcZnfn$6Rgsuf7$?B'6]E85-69[!L#-7d!F\V,C=49>+KKX"-6;(_.cc;PF;[t:\Wa-81AURXC?E"^kZd-f4rhQ,q8#jF
%J)*o-EBi51-YN)KB><<:ft!<QcftIfh.k@/pl[!XGWs"DK2\l5A_+COL1C9uYQX_(_"JOOJ,IEn3hPc1;sP35h>9:PK2\bNV3X$Q
%\\Obd7u9&ncC>HE"u/?@,QSPj_:4j<AC5>1]>EUm=If_t`(k9OQ-=U=@!GN`9nTH2\.2*p\Q5F-bX5QLn+iu[#)iVRHK58YDAo<.
%emgQ]JeMCE/>4?^M,;SEYSE\mGsN]ofi4EYPAmpEdAg(q8H>-oMc(k>*%=M0cR_CqY*2Zrf^P@B\umh-6:o7@KYl"Eng^^Vd8W"9
%dKZE<fJ$=kI`@C&m69'cU#[qi%CV,W2Z6-M@6*lD((".H(ot*'[[*8uFK!c%5LL^RV*lmS"?#:c=[\U<;(H4'I8YE8Uhm0mUuATk
%5pG$B,@rqRrSt.qV?/*;X=ttVCimK2>IY)PB<JUm-N5>,PfCi`g.Puto+CM(d'?J,Z7qW2'g*04:M'-t?7\s'V"e5)dBXfnaB394
%^h)Jb&hqHh_*dQ0Fu(3!N#nQp7CXW5/hro:a8ph<5+IX;<T##`m!#)iY\=5E7N@7R7q.V%lK$P1qeV'dfS;n`Z4Ao$M]#J,C3@`N
%P3hQ,_='\0IIMTGE?G,(A_[O*%iP,Xmm4t<K=%d;aWP$#ZU"YT<Pb5iV6O1?*?Cs5S_X/$pEDO\f_p3L:4D]MP<\q?ks*`Y84?\G
%)t0SW/1WmE>GrW+l7BP.P1[Ek'DTZVS2eSPH.,!<6)I.@o6>b?a>p/<;EDGu$Oeq0@b"?%&un7t?kkEd#[pV]$\6A(nJ?\VUg0?]
%!fjE@GsA`k22JbA@#lm>3O-)mY=lS5SJI#5YoH%3*>$'1@pb[,M)7tc/.-mV.Gq2)pK1`i)lg"&%\SVr\-U1>@Bdq5U';B!%Wqg\
%-HNnoo"%4u?$Zb)3:a/-V?JK]6/'@):uCUT9sQ"27GOrie$'[M3j:MnM-^u5-AsFa&.fe!U7rrDAXUpIPE%Kf'<)e9PQ_=_f[4n/
%_?3q,JgdF(%aPi&`L=*>!R[5XNCc5N)3lc/LE-`N:u6rW&p^'Bgna>SWn4LWTa?@POQneMTaf8.7XGE[.83NnoNb/M&B-5[$q.&2
%2^oCp49#Rg`38^9cHe*t2?AQgrPVm!+?HZWh7!BITT.6'8(NpQhL]nE,1;F*<JZtgg+$Qqa\?FZ<d-,>3n_^ng,%8FJOY"Y8enZp
%kr_fdb7:WT<n/@\PfE"=a3'ks?+mV(*AU-I-F>-YcRCUQ+R0`0-JnQ`:@gf=J"dCnSnY$Ih@_2Hl#\[>W5)YInuGOFkgmO<AuhEW
%$=);P,C?6j,$e#,hJYZY+<]%QD9>>BnCfe.G2Tq8"$F!"f/e%iMh%;Q0,--lV#k^ajh*7pM5;hM!XiWnO_%i,P"&mi,YGpOd*6G;
%?6iKl<@c<j]WSh\JH63;)*[_9=muW2h/f\#\8&h[:Ta#lcM]f>JKY8E?VI2_YcK`sk#FoQYV>S+6PCS4MlhP-<on4BCG63_Eo0is
%QRJVO$P[9q@3<M#Ct-2$C)t+#"VZ-fG,f]WlOX;YS-33_&k*-rQhqb[I#%kS0V=8eRA2=]g'J&J=&spE^bjq:Q1UhLF_@i6YJ;*B
%YO&Q!Q\DK,Bjn/e!*:`hi2O,Zf$UTO!Xpe?B>B'l_d$b-V.6B[FN$j;dOJL<>dVReN[ht?k\=\-*AaSB7[\a-PB)9`/LtZ-6".Fc
%+jUBrUuLPthFf\*20iC=^V#ei4p5R7LI#,JXXmd>^b._LP:@-C2=)e"-V#lke@a2N7!h4?Lr1k6'jT^N*ahik'!hmt)_V5nJ`?L;
%fr^pDadUAPdXn#ofq5>a?pL]!Od5W?=h*sj$gUt$E,NGoS_DdJSU5L0!Mpb%e8S!EY!V9"2o>p1D?>aQ5n]*r_Mb15%<SnOF0f)'
%(Prc.eI!OT8E+11!Ws?YGTC[%2C%4526s44#roD%!`,rc[Ee_3^qi8GLS1jgii"Y3l<(#'?r;S4:WniF%F3c]O<ZN!G&&d`HUZJU
%C?7^LG-Z":!^#AJYUN5p_!BdV=sr7`Jebf)G18SGlMq0E*/*"OBituWfpR`,MkpaXL`KREGnn==PIh#GM=\C5XhjPWg^9h)aAIl]
%pBsZd:(f+g.Z#S?\>aJ`<\GQQWM-*4WCmKP2nYAm@9!V*0t\2U^]g6-1D&$:Ra;]q;CN5kW8c3H'@\PT'LZXL/HSsZ.B5i/>+:Zk
%WtoBbNB*;hp1][V2@BQ:-0WN3hHbXqA_"mA:!qYr%`_QUbA/EP!jYV8aC;>/f-(WSSD!BR`X9?A-Yj3H7c5_RC>j-lq\>Lcc@tjt
%>`!^GJmi-u0<86'Y7?\k1=<nnU?3s-(U1WsAN;+)A((FjJN87j:O_LG;N]J%L>#T1<o$1B:!%?A5R_2,[dj,B<2O$Z:EZl1*0ODN
%a+>K9MqFYKe_-IO3EFp52%ql0c]oh3@7?_<SkUhN=c"ApV(B[<&D6Y!b8O&?^dZaQ;9jjj)2Li)^$9EM3\rap<=3.'>.4=;YsjM_
%&29up=!'+sn!@eI>YVuV5o_=UD)?>H37?l0_M50qiNRM]O)?F75s-j]pLY@5Ve&fJ<e52U#se_#;>sZ:`p7pQ/D@&&-8>(-YjTMs
%'aICT"#\=\.k;eXVPpG08Nic.fPT*ie_5R45qSL]@kJ/*b_3c9M5psQ(n?osE3S,(KfBZGP-Q),+n?NhT!_dB1&WCs'.2XDB6bDD
%YNUl>\9Gc:61!'b)QN7@;%6^9HRH$&5tY0t'^WH;`?WC:dqD[GHIeKrJi]J'7L9)?Z;lIdB\<M..8Ysb,>[WmOpA2?RL[n8;&2Zh
%ZG=+n/HSG24g(N13R$ZNFVaI,)D>,+[E2B5Nn1/*077`_J:O]#)'E:iAUQBgSZAjK.SLmRR"_b-.D:28ku,4'n7X&(f%,L6#)Bh0
%Rg[g_O>om)SLW132C4ZF[0^]36C8O$'![mt0OXKa'?kD<jWepiRQs7bKbTT4D/(=qE1Kt/'muf_,F\@*b@G':!No:=+6e1%(:M#O
%b6>lE^fV8YrQ)>XRG8?#TuJO?0p/I>Mu(t;3EWuAr"eC`+KK#]bY.+<,XW@jX7^g>16URHM(2`IfU*kUQ^!]^"ce?PF"\l8O7$/(
%1C\?=1@$R7WFL^72J?n:M*9c2],kru?L34M[8FpeM>IB"OuUZO7ZFnFnS/44:&rAY*_B%\]QeMFAQ;&1k&j)_!_=T&`9+-61iHs#
%Qt@(2.GOEd\eJS9+>cg8-CY9VP)sKoDg#"o_-$?8O*&Kp'U^L[hT$q`Tt*PFb6G6q7qH@f+$l,8!qK)MIT`nA3J>#LX]0*AXLsLn
%TrMKga?D>K-#jjb/qsB@4V/qH!f*mr3_?[83a'iU2R[Mn1eu/tW8Y<U7@<[8Xmt\fT>!j<-u2YfCl+FNau%fp95G`T=BWVo;J58>
%?)F9-3F(<r3IQ2;[SK=!PH&13=8$t&(GWN6gEXMfHL#X3I7^+Ui<4dmoe:L<.VLim5.8iR"Z';^r!85W"$._4?+7egn@gG"He6ba
%kHXMe[5qB3@"P[*KO(Rgb/NVFHeIK0fJAQk$V%%?\7$?9Vi?-Wb5>@$-.V".m7OS=$S[&\lBZFGVYXDk;Tl_KJQ6W%VD@E"LdSg3
%B<H)oPe_>5b.:C]MMQr-@toi5kaG&m."F[e=XpWjGZ9cH,0c5*<F3YNG$i&tZ_OVWjl.A8UbdXmFC"F]UJ`cB>9C,UX',iGNY(/$
%'ia'ZV(SK]$M-]%X\6oE=j8.S#g?.A!b?/?JZaj<Mo8X['bTfF>AUKL2"gm7Ab\fOB&7'J`lI4DiXPUK>Y:-$2oGja>aT'4`\`.6
%i'LLs;g2h=Fb[FYAJYYVA$BZi#kQQV)qtsbQ8OU!d$jc4<gYl7;cm$EgL^%5Mqo^">_F)+OmkCabNln968&?bCok_i@9Z=]Kr:eF
%WO<ee6Ge+';>4sDCkL35'7b5Ra^SUL+/3ucM0XCHji:tqWD<cWU^K%oE&A6,Xq>u:a(<*44(i*J33#ig=NTb2)d"(1<]0T)5'0dU
%A!To$93ACAAX4T=\Y,#dm!3V[)b%nYMjX-Gkn>G0ot%S3-Naum>>R"ln5L*Z8q9J@HDI5c[\Arn9rq(D)\T=g@OAuVm#SPmW>)ID
%_7"5MNXQ@4CRU1mp<'nD^`YA^6IL>Q\t%AR2A&*><*HeL&uB:6LfM!ehV)M@G4:`X:%U=UO>I.Hi4/CdJh(+2Bs\AWl(Eo2WD9@$
%j<PAOV?J[_=06=6Q:a>=@o!dk6l/6qX@X1r@).iI)45Kl8;*qJHpMd3?Cb,q8:@o()R=6A-/I"99!&O0KOuaMU%04n2P@^:;J"7f
%/"JB\MQVX(VP%()b_m.\P1_[TA>Fu!kd1B^@K8Vjdo9A8)=6BcNL.c$K8"3c_H#N:&Fl=\3/[cP!*QZjNpsIl]!`;_Fq1sIM7+_^
%\MC&s'PpDI<,8oK4JpiO&d]8;$YHh73%"0T&M5.>Q*lMpTL:NW1*n-e<f"DrM4P;V&<[NW9g0,`Xiis\Isu4^eHN'6,?>_uW'O=5
%KOutm=<&BXCCg`n#T&&,"6IbLP"8MGd-u9.b!02aiVuY>AGkmK63_]?CRN<2aU4Ot48'X:ZNV>,O--)?p_0)"_!mk0YmHrD@9ll6
%`F'B<_Ib/RK/r=LC(<8(V<HFF1TE=j=FXgQREJW8(RSr#Cp!tm+LF<bjs>a.ESn$PKm)(*2R]U7JOjuF\.85bOM\=u<21)pW)7Cu
%F1Y+2"Ic3m)Do5h\')pOhZj&^(CdlgWq@OXmMAosGaIg2)XU:J$r.d6:K4:@=R\p_PQVRoe5I<Ll*n3\V^:N/aZA,OEV+D)%V#!D
%_3M8C/iiB1c!)r6^EC/$:`Ace-T\+C=]4Reco1F<!2tkr6t&=g-XaQ5.Z&DI&e+!RpNk1im07a-M>@_dU0.W??lRbI:r&]j'GPI(
%Q3ErJ++ec%H"(oCS&/YHeXlHXW&6Y]J[`E\/ebb:MMhNt]lf0Wcj^qkg*rF8U9dZ"-5T_9+nDl9jbXV:Bk0ZpM'm%^<$[3.D2:,]
%#Ru&,-r&\j3;P[Q7p9`OAWKX:!&/4a0&gShdgMl2A6Fjs`4P_2%0@nV":>TIE$k9^#,UEd9i]r\cIrkAZ]j%CLs6q,&=!=Z=K-^V
%feDRV9P!'lf/Io%.H5qFiuIrYi,qnXi8Nu+4s]\*2:Lo%$R1L`>!RL28JaAu1DA9C@Ok!S)<N'"((:&V1u"HO:%Q(G"nkCOW!`3J
%D+JPp8TKJZT$7ODrM$R/[R'QB3"iii>>fgXl5CN5e1=I^cGfHo2-2@RUW9T(=)#cePO^@O\#G5KD=M8?">7"8G,#s.NKh^1`5rcq
%U.]P]0k7G1T%k?Oln%Ot+q'0LniS$i+I5VoJP5WNTqnnFP=5'c,r,;-Ph&iH:!U.l4bmPO/K<6mb'gN9SPlg]3+oG3R9aSel;;Ld
%_@rI7oRpMFYA3oL6qFKC!%tisfN(.W?U@=i7-3"5+'<4rF5L)C/J\qMG"Za.UR>e/(-IGa0@kLN>g8H:`WcZ:<tcsF:qY`je%XLh
%]IC9Z(9"n?Z5t8V?<CX/XbGhNOrb5Dg?agEOR.N4l)&V>a[,W?M]B*97C/PX)&HN=L1`cqY6pUd[*94E0nieg9hZb0Yd^DuN@ZF:
%Yt&>-N.u^P3f!6kg?lPo^of4W[k3Nsep4N7X:pmH`'IY+`i#oE3&`^+o-n\M/++gd@Og:m*3ZS[Z&g)dA`8R\_2OI$DMTQPZ]<2E
%RuNm8SX&M[C`D.kCY0D&^Y/b@G;"?Q/TBH*7F=<S"Gb*2Z/Ci0D:/X=<j>G_.odifO8a@UMHhKiR))KGU'%I_R?cBcFf%c]E!(L)
%M-]U&M@d9ps1,\*Fgc_:IVElrN-Nk>Nfj:!%,7I`(ujBM""Z\BOY8tB.5u>H1(^=M1^Xndq%9n<Url>+7CM/3obZ+/5&UK</@rCK
%.?E<'"O=>PS6\)o9B3uKGW6[%Dqd%Sg.S2,IT>tl0`kMLP'0h3<(H_Iq7.#*@'^Zip68[m('MVp6*/oWK=WTb7/!hu[XI3:4&U,7
%GDT_*l8G>)[0pAt(P<fHFufB4e)t]"eC`3;SG.PJBL_ULajMHr_5#8pPjH/q]gkP@9d9*.EjD/6"(Jn8TWe+`HlpZ0"seYAQEZ5W
%H?0%6"ipq`CTgBehqdZDq=WCOD&1kG3$FP/cmL>Wi]JQ]G-NDp49-FFf\D!o8kY"3*8U+r3.0(TDYGpq8]6P:^K/h.i]2p!f_5`]
%`D7Hd.F`s'RaRq7:dM25(HVXfhC?/-C::M?C49S4&p@''Y#8ARWL6&J7Zkqk?`8_/*.+D!&puMDjAA(LWn[E/j5%5o;#CRpf@;g9
%<c'Y*[\@\!"Bntji658-+Kag99PT/:b:Wh3"WCs1c>7Vdi[%!j8lV*fpb,T)CV:\fYUFdT>0T[o(WqVe8TlsJdIkNFiT>pI=^I`E
%?pQJ8dqrWRWO5jf9Nj8cgZHUNru.O3Mof#+"pXq>Zd!+:-TVU0RNY_8XouT=d[c4s8!?@Fj<_[d^/-C\_42'K0o]1maZO&K.5do-
%(cYPSR=cCNO#,"c$]\0>0BNEP$>$[T7aS//WOXknY^S"9;Q&,Vd4#sM%C7c+$F$YE/BSMpe0_;,Vr<If]=?j%j+W]=Uou\IMK3MY
%>Gp%m1(,6m0<ModK3TF9#kWe"S$hAlojKM+6$-"U_J^U^#L)_WgUY<C.8DMH;&6U_TS(Z;gBMdBUR;YBZ(rp[pp"-"#'O9WUs9NR
%##@ah;"h.bDe3[j-tpu[&N]r"GBBACF[U)>#7h:^Bl*b08fY.U)4ZCYW@Ys@@PCD_orR;4J.>"umGYHTI$I"+rB]6\2>%fI#MOkf
%Ea#frs(Y3..mj'f:SmkK:SgglM!5%O)pG$<>lgQk5f?K"dOoX]ZjIiS:K<A@^'JAfVI.7m-JNi<,O0UE<3as_KS,M*A#IMhfG;i(
%#*ERa.4D1J*['>!B>NLA/#HsY$W,)Z3'hXj3]q9=n3Kn/W1ZbERu!JEU"kW-5M6,U/XTe88,RTi0+<H_QE&6RX;cN6(>]2<_C%u1
%3M26CFLKCB%kimQT+Q2WK.R@B$X+9PpETB@<*sdUNC0Va5"K>&:q=1m3)#cl+W/G3($=b+G&E[K2AB@$i6516H=)jriYL4"gQ8d(
%%nE3\;.HRd,ce^i_=S9IB`N(S'nM1+60j'hmB'M8hF(!$(@N0\Aar;SkMe/3;$qbm`<g6E=<Ng>kX/+%85j+?,JkDQ7?.(`cn&W`
%E;2cfA.)\d<Lo[1>Z?-pPUleZ[)l:ZfRjBZi#7XiY,l(SU[b,'E7e]8<`W:=PAFG)e,_0H&A+s1b"fZMI#j&_X_OsXP\j&o(3tSX
%)6uf&X"F=:3m`5((H0l@&N'\"SoBSJNl?Y&h=$@^c<@K[X9"U.lg?*_jj@iD#Rf_&&-V>E>9Mm<A-":qhSZd1[U#5ige+;8jBr2n
%l\]$!XH^/6_s&2P@@W6_)qKcgWrdCqiUu&LVRaJh7`rA4IH3mHQKs.oI+^9ZSi*3=f0XG3KCJF!_#ZVYZq$Q6b#<E0ifJ$U/`Gbl
%%:nUKW1lb[=q'4XD:sO_-tsZj(:LEXIiEMSCrTN@Eq>h)1r%@G%]UMu9ZQYQ^1NKf[C\']e7&QbLnKEEZ07'jJ0.)Uh&P%nK6#tG
%]3*^=[hVG/;_/kj]XJVH;iW[<YQ.7?;BUb?gL?+:(DpASq`qij,[nV*bO)XPee+Ws_LRb/cj^bL6$a`;8r*[1<?Q!T'6^/9;AL&I
%P4kj=^4XM.jQ53sArWl[7`Auupj@s[,pMATFqPjhEC'p?d3Yq<$)inCltqn2p%BSc#AHM@8^Hrpb^'WA3L&_fb\0jQ4668Pfo<9u
%1q`QodA;9:DJ_R`cIsX-:1>s46DITVA^)4`Rtg<ql5Pr#_^R1MDt"]lEjYD4c$5o'X`)DRZL_"F._1Y:;casDfh.%&fF^sN1-UX^
%FtDk4%E_mkoNAbQA=][-E?ub7pQOWcHU>gK#?W+Y!)=`"iCM^T)od@@M5D>@S,4PY=D[:<<'\tEQkP,6H>u(d%s$?k0&Hb*;R>RQ
%\/BT:JRbq/j/2S74pUkRQS/,NS$qdDEefO97Ho8N`G)UL90NJOG+j8+YaM0JjSA2?\R:h$!3X`#7QIr[#Yu8NKqL#'d,lroM][O/
%R%V]<4?psF0%@WJpe?p_Dd7golB*C--P?%_IP)K]-,VO'Doa\Kedqie;X=<*mZC7Y:(=#iOSBBIDbdm-M.?Q-EG2MpLL>$t?SFr%
%gkDL[F6pN\+rn\K[WlL!PXC,jG=Q:r-OSE)8,*fVQ2mkLi-[ML1gg\_4Z*qhbPI)Q/0!%]PZ8K=Omu(fc=04CgNA<*PHg#g(]l!+
%'Z;9>5tC?e%sIdtH6,?5;7%D_T4>4E>K#ZTOL;T;%0AkTO?'fdMq*R1T\BGg:bWqg7ZOK#)ogQ\9?,X7,a!N?J[JaTMiGp_SdB5p
%9RWTN-I`]O*p?'"%ZG7:)(!s7#,"]lALqs?ahD@KeWfXWmjB:c>FM'm<uF*AZ2027DI1S-\Z2+I&?m**#FK6=,G7tYXrV[Xk`a[A
%o,J($)$,oSAVGX=-$IZc;Y.=7Q8924LD-_V+7HXG97)eJC_B&YEjDX(%9iMH#@Vk$HIT;/4pK`To=g6,cjA+UcrHF?e(W[]]_3%c
%#@h^pZlU,gVi)],DSabK`8ie4?uZscN1c][U)&aLX.F:IX)-o35=Pgko>'E`^9_0bO]7U/:<qV:U7F>#^e\!=KFfdB&UUg`j8naL
%aTtnT"9n*[Ysm6[3%6WkD6)'QQ'\QqbYDG;E&UfJl\`0!UnP)T$l+<hDfd>gE)lue4pb?,\n`3l?/#Fb/64ZEP#<r[3sA_<g)5[(
%MP6!b/=<p8Cd+#11e7eRl/:!!:'h'af5)C&GW(H=B'bq3ZKuVX&eFl<8>[H_%pq.s+"7_S<KWjQE<S:9l9!fDmCGN@JOpLljQnJT
%:47o=TC/&qNKtt1?]\Nnoi3%B"D"0o&4oXFOU;X+Bu,3p2L/ihK6jG'$RGHkb>sc.=1D\@K1$0pZW;mA3LUVSal!M&2Jt4W1]\!X
%2M@aF"^+-uBhYWOT):F%B,1fiK2jd-!KL9EHm74kj=D,oC2.eoO$Hf2rfpJ^SBh=fPHg+I,uJ=-3s1CR&n"_WS?2l_4f^u%hCBnl
%'Q#In\Y7%_j-\Gm5g*^NSV<O8LpZt:`m1kU&Ra/-q*:[SAbl7s/`XI72$`'h=[^bd]M!?.hA9'cNjA9$EA##l8]eWSS.4gD2qO<#
%=Fg"q5+k3V8PaDR,UQNu6k6$DL[NHG8J7*hnNf;N#HGu[3!:N4gDA%)SX@Z(3O$cQS:H1,k+Z&\/_C^OAE2.i`sb_o,WR<YfP"E>
%R,"LB3LZ9daI%V'(<aUWq7N#l?k)eH<`QE'!0#2I8GT2U#4ccI<e1_u'MdK_$)#3DJfedS=rFuXDVtIt((4S?^Ili5YXg)IQ7gFj
%@VKuip_W#PP=Ld]8=;E[[]DtfP$;o7/G?M$n*u5Xm(D@7%B=!a99t>Jrg3!JNe)!a6$OD=84,a@iU"X6CJ*iJ'UD[Ur%8bPRe6e_
%"fa_ka?c/>'<@%tlm7)u3T.RHJslmL+4@Ej,g<]6SbLp9gtgVqohWegj>n'HKcN7oQ>WkF(>t]6$'q/*boSi^T`U]0;6UJl,DdmN
%$6['a!oB%j6-#tWcr`!s#hUfH;N`/48Ml1II;')4Y#TLI?r<aPVV<W4!:1Y4E+W9\Ip#)+%'#PJ'rkT@=3mV)8O@qn2AZAWgfW.d
%du&Ccb`RT&OT""*cSD!!I5<K7a+qjt=V_D#7BeLo&O#Spo]inl8gdKlEIbKa?pWm<99p_q!H!E\(LTK@V-0-BK`Gb2=Y-H)p6Rbd
%6uS;aQ-IL>qQU+_qN`:!j1kuV/H!0$Pj;(=#22fo(^)9j64]mqc54s:c8<tCAN;Au.=k8^HGgl$i%.hk=D6.2PINm&C*TUEF-3Ci
%kcC^6a"k)UD+Z=LBDCC7HbM>iC6g,8MZ>W;NK5sE*ZU-tc1.JJA$/,M*4/X6!qR6teL<X90frNjL-(XJJL5uL6n"M9e^e,[APe-q
%:M?VaE/?^?,NMtM^6)h5^/H^]#n3ua>IGp6%2;9N2`BRI@MdAgI9BYD,.RPukZOB$6O([c4h\16]L!/V,".4![=q6]O&%q3"c19)
%a%TfP+U[P&q,9bS+93^\AY$n8h)`!QeS.U`:Lu]\>Ck&S*lSZik^%&`NXrZL.SUD5j;rB6SXq*+B!/`;1mGY`W2G3Tm%[jO/X#pN
%UYmWo:8,8p*DnXC<M7s$:'=.)90NXQG:)qodq.7C`gkuV-ri)`BWL?ud5UQ&$^mioQtFXF^'d[W5,M)E9Ub/LJf%c*+N3c#F%/eA
%n=>.gD-#3Y[M:2K$#giAjf'rC\sLZASOTGg]Fh2IkaJB<"u$hIY.>LUS)XUM,7K?mp+FHQ9=C']KRo4*abe"NoupnmP9qFuG$GhF
%!uFV2L<UGr4!&;D'Hh<;(SL4^h'NY?8L$SiX6*nsS>P:u1$*PkV=0(XaPCUHk(_nm*BEVsWb7"V5"(Z]Rd6)s!DMe<j=rSpX"ku6
%6?Qlqo>+V9Y,[>5,*)F*\fJ&qW-Vk<fhmj_-n^en@O.(X\n-XmfZ]e+C';bVT#M7TL[KLU,)>B)j-?I!k%*OQ<@G9l"U.aY.L=]#
%"\'AYWDsU'V.eV4TS)n?P+:=GJfqs//T5Ro)kX__)J*!5!+"l"i*t)D#4gDO)T<_TI%07$YI4pm7B.9H(c^8LQrT#r1)JLiWh.6X
%-'uS/,DEk\K<7$6>BnQb<+AQhPmr#Cj\"DXd4@LUlmn`"R:Jg0,gChSAOA[+6`hmb4#+JnTHcV0mJHW@5XTTl*T]Z3e(e4i:bSj9
%Yi_`7;=0T^(T*D`<tL(Sb)[!Kc6iVhDqMMO1,FG\R]OY#F##)fd?"cF;;>Mdp?pV[k#;NiBojOacB5etS986c9+b4c,;Lj_BNf]a
%YhdWjcAh2&6klaQ"<`$`SuZ,2fc:7R.9I5hYmICd@(^T:J^IA2qjptd",a0dgILMi\6o@.3iS?<#29R2c1)B%=e"NS7@"Y4ZB"KQ
%f+M)O,s-niMP]P-.d*[0TP?_O3O$uBHI6IF%ZtKl;k2"1F.Ssk!>7hGX)Y[2MjeNYQ:[//6WV=L\lbsHfceL0KV:9\W3_kD6$YtT
%SV9o4LeEcb2b+Bj5>Bt*AO!VV#3oWT>_28T7Mg^CRsWX"!MW+[F/!bZ$g*U8qG";P8Qf>iDlRY;dS1c[)3Pm67Oq;&(.(HLV5F*?
%:"Z<*SqPgTK]qRhL_=M3Dk3H>e[f7ncIlQHN@S#`=!QWSp)feW)Qcr,l1ZU,\T^'V17KY'Z/gEmg&=Mn+YMb2WQfgKQrR*IJ/!&O
%B<1jMRM.\0)R)8.i8']:e_3C.GgV4.0aJ3]VY2jj>O5)DoY2R^S("cihMS-j!3"T(NXSZ8,kqmBRe)t>WTk?$d.1B`F>-/>KX;02
%]_:BR9(re!7cB9&ZF2;=<Rj*k:n1KT0C+jm!D`lAOi&+A"aZ[VUgYu)oTE-<_3-e_4%1t:d?'m8YfC:i?=ZFjY!u*CnGV%n?DO0m
%VT^Gdg5mbFO&/D;0Mu>"M-gfFEhgRL/dIoK(1jp)Q3<"f:PYMCPkAfhI^<0)#QbK=FlH;G"TqlW,DTAn+#L!Hj8]2-/lgO$H'2G8
%ZgIeTE+.50\Q(SG);U1$..nk/":/koaQ7u)6QB9aD(N=]NJD/Y\>Noa8[j'$!ed?lnI!Lh&Tj<fK`aJ3nl_PY906:&_B[(5G['u?
%h4Sc9EMUWEHtLmp#X'+@k")E(JSigcE*JVfQ*g9!?"gp"8^CU%F:aM0P4dWN`Ao6\;M59Z7KQ;\Ce"ca3>PQ.%T%E!2fE@f\I(7(
%XR</t00L=[Z60k;fi-pYp4r(=2k[]Ie`XLr)dM:-D6C1#j/mH.69el\q[t/)*lMRU]14hrSeO%0`oo^OKQL7GL6gj:\F*<p#97C8
%XQEKgZQ?L%mSqY;UtF4RWIbG4F-WMtUZ9%%2odY"'_nL3OMt,i==*^]s,3Sup4n0SH7Q#8*?hLk:!X-*#l?9ko!$gS%)nOR3$2Go
%kD+>@#j]p6=]1);]]$8r6c%fo9ECe;0k,3\\'V6<(:-$Y\/*U$'<mXH$MnoFNVT?OF#Hcug^cAD-T@3/L7[EipZ6M'mn+:*WB\/V
%S;(%\@+g#a`JpTid-G"R0*euBX@6$>01hdk+X`$g#$Z#_H!-m!22s]2dIq39d6t#MT]n`mi4Ar@EL"AEgG?=D(K9M+jod4dVJEb&
%<cH!aC!LHeoqBF5H&EQW5t<CiGtUW1@&0'#`K#NIN)U?6.>n[15FQ?:=tGS&kSgQF-TYYhYD*5(7%J\iS*&huUF<Y:bbS4!Hu6r)
%CU8!m23E*tp&-L(Q#UQIZsb:\d"U33&Z\u`\dN<`oMP1!l@(1_5SosFaP$ZfCf-[QIH!bC\pcce@!sHsDD7;Cjs*[*VW9kX_+e!2
%F?OST-sdJ/7]1!V^^DKl;%TPk3.n\4QInIah5(VUXmYWaOp"Ak6Tr$iR_@j0_KJmuB%^:T&h2T$j\3+S.TdA/M!h:I7JmcXT*m)n
%X8s6R$JeeDp88r[OUDALU?hFudo99M1NH[Zep$`N!/91V0"uD*9Q\%],^uV;O";18TR`:djioahfd-$5EtB(]C<"-EQUh$QMs2eK
%iTo<6;TB`X8T@T(71q+5.WQ:3cat6Y*/b/TAKs[-?cEsRea.#=KLuq,4@UpD/WD2Tc"mH^S!0a9<n7,h('C5*U%V'2g>8]#M%K0U
%4$`i\1@V8iOVqgIjR.b79jCKpF32]/cl@<P?<BXRY2K(9l-#1_T!\l3A`aV9a3(4BZRI]C.*VuRH;,m=B;Watk`b?M;5!!tnjpS5
%D=,l8WdtD%X$@F%I-bHD$+<JE\9<:'Hp[roP)g#M\/_%N3;o)!QtU9K8<C7gUKTE,8)7T%S&dGp44R/S?97-T'9%Xi2L9Me"^P5l
%H=6gU(dt<O@0W.<,)!42$M/l1V@?95FFR_N;Gr!uV<8kNoTT'6YXmoV0=5Z_/d>E`G6_gV6IW=c1eJ><,iJN*Nu,"5(-SVJ2E"cH
%0\=rtXY-[Z%Bm6.:A!HiJ;\Y.0[IneGs&iT@T?`EPjW7#lpjL),H6Pno,t?:=9^!B%&h*ZY]$Ni\>]>`*9TGR"W4PMCJg7H0.q;;
%X<#O#VCj+1gOX+e2WZ'5#]=9:pHkcg5.T=+*R]*0#RtE-,"'\s[D3ek2r+HQF_T[#OGdX'eM*7YCrE:sL^7`$I4;dagPioKBl,F]
%-#&U,*gpKXS#=+qDU`gR^9^SC>=[:.b/hsWVrJmd$ej@U[d58o&P&E/4&8Zh2PT@O"?Ug`A'Z%-B!*.PP9q&8=GA@NGV;@/r<tXl
%f(MjZW<c=]e8T8p!Te-UTn=+9ASN`9L4QCGT[Y30m?"u?;LtB*Kmbq$cA#]EE4o,E"ki_;Qdsd1S-Kq6>r7H_(.Epg]q8&D!-hrG
%p3rO/PAQ,(p\f,W793M_GskOi=k;abV*CS_h$OgI-M9lZ3G1/MYVf?GYUUlq+*i"5/)A:?gaK3nI@%*(paCS'F"4]B9Ce1o2@+Wq
%.Q>Nb6t]#H!Tkrm*rZCm51fl9fYgu1mF@A_4hi-A(#Gol<2dioQ'T^H!uQ:n&$0I;N4BT"'@9q-W.E#adDUY)!tlf%&sF:HYa$fj
%KK&(,d+D0o_!;DrIHm(MNU7k4TQV$BZ`PaFC8&:C=\U$!&K@3t</L^_5j&s+AW,X7n6!J$(0\,^_&&SkIk!kb.!i$_'G@oWE)?QB
%8NiaIK!iS7@!#@7li@hr(kW,;,`0?Ja0-eZ$p=TV6`S(F#pTU:QJp(+)\=()BV7gpNX\G*Bk^e"#F<)pV^HW-,U*&mp`M\%B*D,$
%V:iBoW$rsT9L:[A6.GLLYYL:^[A@#4Jl!6KQfX@Z3RMf=d>;G9SVAh247LpR\gnQne,(kq@H:ThO0ns(3P!FUlmP\>Tf?&1Sb7[;
%PG8+;nYiN3@)1kp5N&Ta]Q-OHb"%7`/W4e(]e$Hqe8-"nSa!_)LE6'MX^A<O;)5jF1G.S%c99`YSFol,P,7AO#6Q1AU`O`63+-%H
%G-YR#A\FX)c6qfIAPEP<=Ca410.W4fB9:ItfHAR.\di.oQ*>g:lt];G]"dJ0$`X>\1W:`"oc9!r.RD"D3qt:agq$R+n>lcOj?np*
%n\m=(p9*WQ#7(Smj3.nlX6!+8P[RRur;.hpLo^eo;@8@r[X=9N$:A*XQ7&M4G(VXdPJ:\p.__j:bZ5AYEk.Qc>5DZ2R%%Z*@WQ&R
%h.#R$2(,CaQfSoJ?EI?o:IBZ.Xt("%+[HBAOJkLI$``S82)9r2BP'=W+nf1e8=6*kl\=->77d"I7k.er[mMHY>md<"*@juf!2V6^
%5uV<6GaMkD@;ab5euVNY=\]65kO>q!hiH8k[>-8_FS$E),-F<_)_@g7-q`O'&#i-c+LE?F.2>ZfmLAG4[)p0Kr(+Ngm(at[<*hD:
%0Q/DRdIoU]G]*pUoEa96.ZrE-,+Y[WQ9]1lb4HSu."MN4PY"-`@%ATG>(OQ\=KcGM)@<?360<Wt)*d#&(:RZ\(aV1Mf,DHHc^EbZ
%3+8H(W%>NL:/G?H^J4%9(s-M!8Sf6\@L?kte?B"]Lp8/7\8QNp/p:?c7X"p48%WK<,mBT8%55.?(5"#EYG<3Y_*G1hp@B7K!gVTE
%fe*BF>:&$JjGN?@^nt\j,b[@mCB9'2pk>G>eZ1_d;o2@T[ZR!,h,r@7oOSJ;^kG?3r.gK@][t).IV],s4amSrX>jM\S@GNHL[U":
%Z%X^.%I<_RhoD(Xof=(KOu+MIVuNN*pu6k\@@Ro'd4m<(TnhmZ$[([43q,K7DS0c>,;Qu=(15?U+j%=fb]E#WQlo05K"S`9KCNLF
%kQBc-q<-mUUKJ(D_qr7;WUEo90SnV:@X5_CY-J/9(Ft5q_-4mCUGY9pPdJ+-5oNS_,MSWXb]U!W`Zi$g-E"j=UY$RXl,EU/<<HD]
%\:tSkAN:N,r7=NkRfm)tfXYjHD!ugs'`;LNY+kS+VuAHs[T\#[Ji'P2qr2m`(l2%tqE>"iEE(cqC1JFJG:1r5SK5Nb\ijN;gAr0C
%=[KP<!r(lM*7VJj,s",@Tl\Dp=RtsIcIAL,*/"DQjWk_q$gWt01n\uq(X$es)XGD)^e`O"e6J7XB[o6R[b4a.#3+ID<](NY83A+4
%#S=]@j>b9l\gKW"KLHDpMW0K?a#"sXFbKMr+`?p7cNku51MoJ"-sce1OT*7_-A2foKaAnBdV+c9'1.kY6pjq=D3jRC&J$cCA_Y0O
%%ikKF4ZME41-u:`<5hSco`:?l0\]:^#ETZ0*3!qK=I8XR?uH*;U0+:n&eVloa4LMX+J,9i=;t0?id9c-YbW(a[?kASji+YWh+>-6
%(YTp)]SntfEjB4a-b,`'PSXh&"Ah"l!XKV5StF>tBF7S\*EQXR2(P[=1l#@u%KA/'c3)BQ&)u)Gohj^":oE"\^nHO$EV'K[R('"T
%Q)@=d[R&(nX'P$t6gd@LUY:MnS+\&Kl&uO!Ep>]9Q4LJtR#^**dj2=NgW"+F%2L9q,fRgO:4+TQ%\faZb++9_9RYc>mf)Fs>F,jt
%Huq%`(q6HC&.pO]GqVpD'Ao]OLVF:*a)HBI'Fm3IR"u+^hU#+ZTcgV!iWII;9u7qtOG`Q/QW,apn'#9pnE+Imj[C0SB4*SC\>=M1
%+6o.?*)+Pg-Ubb3Gs2SF,.cLDEge_u71S-)n,RH##mLIa+'I8cP#cY.ongIplQcNTF[>Fdp\'n]Yt@'\.[dV)5$Ca*O6"*F#,<;S
%N]2LhX?5)Bp)ujbTs)VL4We_[<ED7ApeiC?r+:WhKO]$;ABFQ(^JiakJ9)C.7deT6j/PjkX0U;_]-+#Ro%;&=-k'pT'L#.;-iqKY
%2uri9n5>]uBsCPTP^L:e(-'EqBA!=kWF6@oO/f_[R_c[h;j&P+BA9m&-f,;$F'[G/Y!B&ka)GN3,`P-$Kn2mPd&Ch;`)cX=3?4f`
%!tl7mjBg>=)H/JoQDf[QQCtu;*F<e//$dBAS8fjaDrSIjh0]2M#8f;%G]AEA8i]X"+)/t4K[-Rr,o6\oL"@[PbS#M_#"u6N%RIS3
%%"O8aX)<i*:lQBpcA-kPbOs[E!c1Jr\dt9;jGd>g%H'NYL,"1p]1//)ZQV9(*\OX)$]J?Ib[#<m2,-q6\6oi7f;POTFB3Q_8Qf@F
%@Z_F;E,_oIOq_$0E:?:<:NeE?K3_I`)TC%<M?CK:]=\SbmfZ9.p_GS8dj@im6J[E1;!-jjJ:XUg+3MO7)jt6\HUN0#O`C[>d5miq
%0cc42cD%03%G&PGB8^PPE%I"^ktuJM5ZBoi<o5BW]<L-cZ(g^8'4')6lm+9URNC<`Ye)P@C7ju*s!Pi[57%7q^P\gfVtK`\HiGuZ
%#sA9h%I:9,l](7ABMHeL'C]Ifce<KHkC`/MTQep!F)dEaHd2W@lmF$L%R=69:`Y&cOG5LK_(-Q<kTWnPas,6H17(alN_cG8D3A1^
%CYJlhe25WPpLG)c]Ap1t*)-l&I,C-IjHgjm$O_EM\e8a\3V[8pj?s^1Lmjd#'dMCJ?4_*"P%!mH<2]p]!L51^`!_+<8YpH:E!oiK
%lpM%1p:0HW=h.B4>Rde228;acccKU7$5>SBJ6W,aea#o-a72^(bW4.3QNI2bH$@c5/9o8=g5@;AfG^!o5c,RiQ#geAOKAQn2jOfP
%!P2Y6a:R,H+.54a1`,#C.'5b3csh/cdR[:PY:=@m*DuQ1/XD+o5[c;M,$rPk-6Xo?(YPAbo^_q"5g9fA.mXYI"u'1t,R,V\K,)HN
%^C8UpNe'r0co4+k_,3+N8?K<&9K_OeJ=Hj<*Zl4dr]?O_H!P76a)tHK_4h^KFRerdg7SZWbSJ.<$+(fnaZ@T^:rsbq-&'A>&UcSr
%"tJ@b^P\$&Oq3,C"#U^PU"NSV9&WXbn-)p74ZQ+;2ofXMLrORlp(D$`SrKTdI\F)^HkPIZnL@3(Yfjn')1k?fo=@fV_ifrCmA6i5
%NUq7f'g9qo"''o.&r#!hi&mnG*fjAY&7j*D"$*<NJ]PoB@kR"8=;*JVd53tS:PY+["ic'fRsnlJ?uQP>hWC)+_cH&6QX0^5cS<e,
%H3Dl\U@L&]B\=.1h6L8La;E\P*uZ*)N!KjbT^b3CPKh,23&R7Bp);Td:m6,K:qeSWdh4^*XFR/X/Lh@jK!Nji1^ERU(gJ'rE"EBR
%(RiL7742:Db._Y*J8YXn`["lCU\FsM=_?ekKuH*LlAoI(dg;,DY+(H<mTGbh<sIf]VP2"]1U,L?asj<9"iVt<biVfS$uZmJroapK
%*$:S'A<J5C?g%hO:HM[Qi4eFW/[-AP;7L>C)<&$Cc^hRC0!/]iZEcEUJWc]>5hW-^^gn`O20uGK=aQ(P4'ZRJ[d%::$rk)DTT'he
%)%a$sAsUN(Yor#sMuf4<<QndeQmCN)E6)'\kE4JdQZoY-P$K;7JUJX3=G2j;W$Y#hi9&\%N2]e9RJDq/KSB("X$P(;e*pa=%SiQ]
%br2I8:1RGuJ3RY#cI/\/0k:)r3H:qFfk%Eg4ogpp`1&WC8`m/h6Ji0OIS\_U_(^]fPQ;:q0[J:(Z'Vm8<M)QQ0Hl]n5BXbd?e4\"
%+d98_/fMND:kdF6NB38G<]1\8T[hbs[%8Jm<G-aPe2\P$R/1dD2DP],S79T7`TkO(NhJHll`:)pA<sI^H=L?L*'Goq#%M/NNa\HI
%V(+0LW\sk19Bt5aHI^DHdlal0ifo=Bo0*^Nb-&-0L,cEn3]M@?$eTZ<Sa`):S7RJZ2NEUQIF9RD)C`O?A!OtPRWU['5*RDH>'Et@
%'-C76%;'3+T"!CCRD_jO$nA6N*WEp3E7#@Bj-s-uoqb'G)PZa26;`\,2=ZA#S]XpEYs1IGapVJ=@aDM_%(PHtS)XQY#^0?(jr"q=
%]^N8C]!iZ[/<ZZ\OXO+tIJ'I,F$)*OKgc)NTY7RV=XR^b47<S/h#Or7T>RAMJZ8nUk\]0f$/4^Q>dq"]78!9o(I.3WhWAjJie-Vo
%j't0UHtC5ne:)0Gi[l"O'G:;&(LF4?-]O^qC/W[u97X>TES3b*5RF)!TN=0`D5UIn9[@,]l,u'+P(D2cXQRuR@->WE["9orSF6,^
%U((^M7a34*-E4j*WHLsI?U\N[-aAmn(M=+s<Ao"k,phZhA>1efKdZd_m(I%q.nc0FVE`H-!H$0mdf?BTjj4baD:%.OgC;cjk_<l?
%2uEA9TpZ^%%M`H+'HrV`7>W?>Bh9mJ7I5oTQ'T2IC1]u.p+IhBAJNA(4O1*]Z2<tES&i`7H1L%<F&!cDd:bYoOmIQ99-&PU<FnPo
%5hZrj`q`A+UJ<b'D^5`MKu8B(!32]Rm3//YQ:>"b&=CSRAq(`_0hIP$9.5(\fXEaN+/h/hN,)BR9p,;m;NOMI%igUf5#5'G#b,C/
%j-R]>U.,j@KGrP,8Y(5]dUEcdRG?Rh)R+c2#pX%.-=A'I(W;:A?NR2aM"D!'?;&LiS"rJ*d/&a$%,lmcqBpe*_G=(1&*cgEcY,p-
%Zmp=-kl<[Q'fF2$ki%b3W0+#]j#^)Dh\`q71=M:!be`M'8]:=ui2:1G#F^c[_+Ypa3ONRO1FKJl68AT$Agp=)+CtO&9sTOj4lh/Z
%jV5$H2:S=3U6orO-C%UJ5`J/A-&kSq8L_T&Wi(Y<%s>5n=TSo[6TC/1Z<0DS$k\**gF+m,#W35)U-M'a^#9Cc08_St!uT94'-V>g
%*JAB_?'1FYW7c*LZ"m>"cu<<'\nc>DMRc;R;,Cg5pI3L6k#bS1d;Y*UAjR)n$J14Ukm"D3AP8dD)%;\r)@;%nUFP?p)+ck'!c#,5
%NJ=I-OTA"o+'P!`;W46G]$++g/M8h0QH[8ifLkn)'FTY4P0OtGCh:t4dM>UEUWkd<%1f*E=HQ24Fq8?]>=8-YTOjRS%Rn8'+n_iB
%Q.q+14[]cTCkAhD'Qli0\LNDOV&C*d!'HMp$0-elF?422-HFjDL2_hq<[jK*'bAHiH;+-JI[^%=P)Tne7!]_J#md\*eqmEp&p^8F
%$WQ1tiCg+08Tf+hPt;loNV-ie$/ugGO:isX!1idWBguHp]^m6H_KH0!p)?AB/=BtUAHd-=\mm"0&U`0W20p<SZL&"-Yf)X\"McU;
%BM?i#_e+T35jpM-U=,i@KJTX`R,!+%C8Q/nQ'k4K?S\0YdqP;oG)R3KB*GL.RTLdhD56bSo_hB9:+3gN'P>?\EM%;21tS[``c]K_
%1W)^\UGiR,?*m%Mc$iaXG%ir,7n8#K;#+l?FO@-b@[^\&AbU_nhY$r'"%3])+Gt*6-No,KO_0090Uh>8NiKED<T*qNhpZCS0I[OC
%$E=",UJRnCP6grZNGc0m/pW9Vo&1<lgQ=l+^@:Dj7iECuR`QQq)0R@BV$5F@/827b9Zkr^24X%NYDLoSi1MM[(L!ahqJ5f:_VJXh
%+AqD\?ChkJQ5/aI7k\P0O9[XAb;?d<4h3m>Rn5Xb9d<0.@3R9L7;7Jj8jeS!^%PH0[1tP49=&(UO\&eu"uj[r3e0gBK1R<$!N>BQ
%1#1_u;UPtP4aU?T[PA$$MR"1S=R-Zi&.1:hPX3m?PY<A;_t'HS:90K?Dqn?efHsD9@p;d9h&&Ka`d,mmmiZab7q-.p^0]5,=/7kp
%I*kUo<;IiC,LEb^<9Xd@:>\r_1MKffdRY!ViC;N7fmhWS7Pcc&TM_\P43>);)g*]]dRNq4Qt!8)<3>5JQ.2`n6tA4nBV9*p3^imh
%:c$Ru:h"S&W25kj9El5NEEkO)f1^Qkci@$*-P;k,HVh'+RML'0`"a%bM(+fTT"b%f6!GXQIRpDF4,H<LTj&d;[Um*iT_IlM7enp@
%+p'p]2;Qmk;Nr1ZC\3<=7H1]4]8S5"2mO70UeW__Vc^*)/P.'ONlZ<_;;iFQLDZTW!Kb6$GY,7q1YBP*Vdqj!DQ(N>-W.EdIMX^1
%K!Df7(S0Ym`m"R!Aqhq'eO<7g7<a+]CA.OV[kW_30MBJS&@t6UD,b0U6F]!@A4f*ZU3L'\Ma5I\6KA^X:R9K<QI;Yp<+%LRVioJB
%NC23ob-^Ln3?kDaoeaT+NTK-KR7.@?R\JJl1lXddnj2M0ogT?@V#is1ko5sdpm^=Q`>HtC&s,":)'JV*7?++"\8B%-W=b5(^4LN0
%VDt$5W=#:0gG?jL'X5K)c$!1X*o]M6U5F=4V'L7!NIube9@DF>;W.XSJtc*o;8>KrW>)s3,arX'Q/XYkM8oRn%'^eO;)h@;kogE"
%N#:6*AdgrYW&4oG15Z8?kh"H&Kc3D5d)&?0?9#X<r!l9GBuD#;HG4%s1ZF:/4OI"=@.7t0W"MrX2#M)SQr]@Wobst*b!VhBr/(#T
%[d69(IU`dLNeH(OU=JKc#e1Kr\<>9SDF\5/`Do%Z#n`QkWMaF(/rk4W2!mDA<]-mCi!2EpLf9e:7Zra'a-$%2!1]67V:3qfGVY[P
%b;^nt=B0&[HP_C_icLW.A]3+"Xc"5?;Q^Yk5c,p$<O+p8)@_qhX[]gD!:mW4kPumd+&+%!"&L%Vpu'$j(dgX@AD:Cgfl)m4#M#30
%=N#p9kik`3<5')d:)rnb+]&\?RD+:R;42_%+Ccud4Z[Z@TcseZ'W=e?'hM)YZ>lR2bb%PHMB*_&q@le*!J5h_-)!eS![ZjN,N=N'
%]ImKf@"Ff=3\X,n]cdkloDhHN)%s2!!6&#s3\]MrO/NYK:WTSn\cX+r.Y3UQmLbstQar5nEkli7CA+.7GsF**13+/.iepD[CIssD
%#<uOkLd>#Q'LpQq9InSf`2Hhg1tjM/pJE*Q)MqF$C.-c,)h9oi^pkh.IRCsXDSr0Z(]XoC@EUsPij[\g9q?oRb-\@4dpO:4BJe<r
%Mi5N@dJ.<GbrQ#/dHQ'K?'phg',]WN/2mo_924DYI+qAog$]A_rZ[@d,T/TuV@YZj!S?5Ir/',^7@MU574APm-dhE?PhAug81I<,
%2FV/PX0^.gk4LC)fMe3;=_1krjq:4T(!uTsq2[NS-<4ZHKI)Egl8;)hWF3"UZK!BWpR9uaffdSn<Zk_Cejb@"I`Oq!##JH0_pn`G
%,$[bBZ[S<$TOtql/J=BO3MqhSH,56p;Pg=aMHrkGUaYjd-2(M?^_3M(7%#3l5n,tGj(M%-GLD7qNFj8_#oT.HMGE_J_c6$I$\]qr
%K,M(>SN^2oGU#$Ff*i\:73h_,,]>sub81Ur+9u._\]RT]b2I%5'WD2-isbZC8QEjVV-r\pCh]4*/PjQDiY2YHSj90LJRLSOp51&V
%8h8p8?DDk*gB6G=C]Qku[00q';iTK4BWMDSeHj%s\ciT2dnp`PR@oN$9;Q=K7Eqc^b@-=i75X%i'N$gXJKg-A$j!_O>n`n^%94A^
%LrmTVHir[^.6;b-TuA0_\og<6P<l>2HGSB1aFi&6VV#K9UFqG"X:'L>=#Cc[@u2(2JLq3d=@-rTZ9?9=WtUI5US&4qBNpocC-pB(
%DJOKLCHB'Hpkn^jAqEYOTf=1iY$\W0Z:q%<<9+:E+u#^F@0EQ34S5'%^4"W=IHH(h9HcSJ%^C=TED\J_%ZY#4E"tHoMm&4VEa@Hk
%/Tlf/2%%]<TfjS/bsB?FCt'[_KFU9e[_Xj//[#1d5O)c9NWq=j;lkq[QbT)L530Ig%fNaP-.Ki,Rc4/tOK8U7Cd,^qQ9^4qrJ"eX
%K_hS^&@jJ6Njte)VEI\-RNRWQ'g'iR8!6?(Rnp4s`7^RA]5pLSiY\sD;8\os@7*;,]NLAq`2jR:213^al"_L91*DS#9gGJ7N)[QG
%O!R1-d&:k%oKF'+nslXu0u[7i5nUQp85e%N)G$O[PSn]q9bg3+mV*Rf/G)5--'bn-&lbD[X&SE*.E(`9WMTi8&X+FM,:j+kK%;h&
%-D7&I94bSda<\?b2:KS+Gb\h2$AVAkrBPs"n'"aP`W`p"*MnZf_b?p5nZW:7OZeG4fRT*Zp03qo:*:^7YS$cn^]G\/Dr1g.dBI+>
%)h</TCU@1nC_Te^4\,`'NLH`lSq:CUU:[MTl=jp;j@)k`!CR%qjF*GsR=S[9fEi`nOPu*/%IhhK\-NdD%=q/!F`c#+aE2cB&dBbT
%$5<YcG?!]7T[N[_2EOjDSBC)[0aMjD:T_IM&"4hdc"0g0/;Jk@)&\jBa'($^WZs>66OI/!YTs8I;hT<DjOQp+?Wa'^7<=qA1B>[j
%YN#s<.E+hS!)n<oq@4qk@?0r/lDto#b477&nnTLp#5?%DRn9:d;u.,lUrPeha=3,"e('EL)l2mHbc.XX8IdF2/kWO0NETj1Ac("D
%*C(%od5T"C#%%Ok7alNr,el3[WaI+rkg<2boQfR"@$DbXS8'mu*DnX<]a?4T,9#5dFcel<_+%>d<L;r;0Ps5<_L.0<WXRc$(+d=+
%%QA-[T=i/LKL/7aGa(V8Zm&UeM0KFoh[u;$*\3e[Ea23l$I=ke1Jo>i#-60%Ldj035%pC01'k%lY*1>Nkff4todDq!<m?^L$]hGn
%EG[P%E%PiNml6@C3CSmZ4T6&i.&q#_>f6E+3)k\%$^RlkAFlb(S:eTa4u%^0bpKO0bcA<g_7BtA0+s=]?i^a&>^d!%k3Rp?;KUt,
%T6E]T&h=_.1\s@H=PM74PGI5DE^je$G_/K"/"!jXBD\QcBLsW*/C+(5oh?$J'NBQ]_!./]'Hp)uR&"j:N+SVCDj8ARjB2XEj#"L`
%MM4mND&OqJK%odfn8V+*Hn?#mUVrh$jsEc3N5Q94ItcJ.P,JbdJeD-nQ=f%^Q=hC!2`V#<E(.7+4h<WpK7%oWnK?mrgbq+/jOg8%
%"kO%Y5=j`b=:c2`b#MOX-f6Bu<u"F%7PS\HcaAVROgtB=W?)1JSk'`E)*^N_@:<JFKp=@2\4d5D5Hp-CT8..WESUpYBtP8J-r71F
%E6T4a,],$2H%^#J,'h#Bb@2om7@B;`9OEe:A9HsCN9aRPfWEo`#ZOts%7W-)ejPCIU?k1UL7h#ZaGVb:!DZ7c)\0YKK`]'LP^lF>
%!J298KUH9MUbDfnZ4c@T>8D8T_uoMR8VO1HU;A+hAR%e=2C>\<X.pji=L-Nj$_SsmMCZXR;rZ"u&SH*:[U>6_qS`%/8H2pgJ?^gu
%ZRN:)b#;ba7KD@r;]>ut02SgLd4en*T-kABXcW5k-#3)3"r*a6-h5%_7CC:4kZD1q<YdQUgm.r<prs?Tr)$G2K-r-*Eg%&m,dYoJ
%3_TJ_a]69g:Qhb$!u%"6)^T4<NMOQAhoIdDGlXUB`G]a-;_rRS`,4!a/VX-I$)?$b`$9Jb=>RNd;DR9r.Z:^-\:J307!9pa,Wi?V
%M]/f3+)d.mbIP>@7OKKb0Q)P!;@",o@1eM*hD42)$MBjcCLc.Y6\</5;WJnCfeZ4cSYkYi_h*8-SZ5dJ\iE>!37eG,%IbSY.Tqtr
%5tBX_d7b@6+rR&8@Yba9.2k&?.C*JNT*A4fl]N"50U\%Q=geL1btsg)5t6QR9lNQ%$3:4PBVt:-M"sBS/jZk42!WTNQm<q9)B$P8
%$`7O'J=!*p'!M`aCIOFQBck*_P?)L',.[E@9h`R<+4M'F*]YX?-mCN9Ob=fGF3E!*_?nJeNeZXbF/-siJO(SK``5?:S/;?t_FUdJ
%Q.8rfgE>G(`3^*WVF0s0XE)Q;64Dr"T,RitN5D$;0q"&L.n(srI'Z;u\PXTn2p[f52f]baO\'?tA$DAeG>+`/Rh2_:aVVj3%_P98
%-:Z^0k-MsDmeDVgj$PaAj]FD)`o;[)AYF*N_:LQ:4W!;X0r:Vo>oMDZA\0[:G$+t"#lsJ>oO3WH(Y76U<Te$ODF=fRZ(+(T,!AMu
%0V]VM)D.fiAI;V:9-a[n@#8Au$PZV/,/pp2RYNpm#ba^e25G#_gP8gZKk\k)<^3!!Kn,'qE&r?53a>6+<;WG%4&QuG]AsNd@c$?=
%;i82b.Gh=PSog0Zo\l*(1I?>b:UP$6(dj8qb;e-tLG_\+%@meS'VfagdZh)m&=eje-5S7b4Z`Z)o)Ve]#(Egb*Wb5p9otG-oAcom
%$H4fLnjF5+mGZAC>aU7?in"u-/?Z%kjg``]6Zg[p)KFL`U#V/M2BH#?W?H@_&e<+C\kL<.6KsVC`MU.:.JPoS%Qd.5P_tYM#r-ce
%7AR%`_3R9ZZ#Kr;ot^`8%;.49FA21>9CZMBOcd[=eGe-W<q[_@o;9ip'=_OlQ4m#u34>(FN9BY=V@12.?[STDc)*>*3Yb=j`[k6V
%*G<oABK"`QQL)""_X_+^)O*%>4MYp2VI7D+>4%*Q_J6=EDaooFnJ:\,flk"`.4\r96[Pgo2Gjf&.`jNK>mpMY3YQ;#.He..r#<=t
%0P`6039?W$*#LP4U7rDuc'Do1m)<GH=\Wp8RX;Y)dmqDt\B!e9f"@[_Yu$Q^S7%mGQVG^?&6&?ueufn@DpVoL+!iLV8r%":j_XQ8
%cV@iYAt^lVinMi3GVf624>roeqLZao@\SB<*:[-Pg!ji09V^^%/_a]5'm=44[W'mh'pK@=^ZE8086t;FbGJl-,cZls9V%V,LEZX0
%<lSY(9W">>?Bgil$</&a=k_fg$M6EW+pKd;dH7a6fn'8dLdNsWLh#BNQ"D\)Ld<oc$kfEh*08]32Sjh,d*04R`OR`U2(P?<JKk>k
%V&\2IR=CKX9r?9`TFfKQ"o0At"Y5r'q+91o#udX.BrI7FW>_GWN/6uJ#R_lu?^b*Y[1k4fR"?(&'O#$jXI6@Mlj/KK!+;./<3qh>
%)OGFX2AESF,-*#D,d"MX;@)2(_-/pbI'H(rlE;rlbCZ!!WV?LBLuK>^H)rO)=OM4p%"[%3:bs7+8'RJ7M"7W%Rl?,<'J&Ii+]-'J
%jfFi4E#*!=AhsKchF*kJdQeq$5"Z,2LHt2WPY,*jLf8dO-3V1!+;)Z)ENG+17NWjD9rD]>9pjE=]o6At,DJ?&PF@I/Xt?#/"X=c$
%N(Nf[68H:pR"SI;'MYuE&iH_i'pJ-?CG^A]`?b)\P,\I=`?_Me.r.^,/n$b;;W!#`;Ib9h*%o;%i^f$0X8+S.'QU+>To_@\%#*im
%bb<BCbo@(Mdqh@EELKTM1eoho+b,pu$Mi/p:hW&=%#*J^Agl`do/L&soCDZQ[JsJfks*cnqAW9f8PMo0?ZS&8&s\Vi;UQD)R&JN3
%fhF^MV\'s$I2o-sR69GsBLJ&[E>h-&j"s+"EZ;+.&2Kgo81f-<NKE:B)Bhk7Af=NGBq.X,R^pd=,IFY27[U7'(i!ZY&UeC/9Or/@
%.K&gt+6-n#6]<pi:!N/QU-+HIdi].Fg`RWL)I(R!7NV2Dm-[@qBd>tipSnW@7I%+8&li2#\PQ$GFG4c>Y>DSiM4@/[bf<Js^:m^\
%&4qV)<"=dBlaV-I(O=Vr`-."6?8H=n8W>.`<ha9Y7[3[1"oV>^ZjJ4$O+hd=.8<2-$ug>VkX)HdD`s6f'fp6j4@&,S^tTS=8qKnY
%MFp4!C#HM(do)Yhnf/HkNZm9uCrOq<@Sf$6Ncm]jJ-g5cW3A;b:"$.PZSe6[a0W[1!M*ELQY#N9elc8C?:0;*1gC@_0&sYqMfP$@
%ZHAcVA<E/p5uCUk=_;PN&h_bf,"'G)U67'T5,DZEF0bJM7&H/=<D$6<KNQ?Y4/ktRQSG;Z!f8*e3$TA,:6dNg-2="OoS<6SD:n2u
%.fCFk)k\XU^bekqWSp,%@b>UBh?'Be2H-Z9g?7:#"a1=[ej7>Nn/k_0%DI$+&h!6WYTlLa:gbXO<F+.2![[-!-kqJBM,l'XiQ#U`
%6Aji+6%4tV/e-f=d?:</Q=:]JH.10SME*COi[Hui$LQZgHksuWOHWR%N@LB"@W>SMm'T/t!Fjtf;ReP7?7!h.G"4))Wh`Ke7-*!?
%m+onkG^M,XC`J;D6&ZF3$C.&$Bs+lY.Y5JMVkX<gF$q4LRM^&H5o*Nqi\WMHI#q*d<6R+XqS@rMV>s\:#i2"YRYs/.:N*"?StSO\
%<h]%_&5lbSg"_P]6'C(9P&6-IBufAMU>\'E%;aLeiiE\u%\-lq8%!,G`B)/`eKf6Ve@6C#O"-d+S6U30Q+02e^-=rIP6;e__tA]n
%p#a!XLo[Hg20I+e0S#(7`J.2sH0hJ!J.CI:VM0l:5p>*(jJjq!`F[:&/':,B1,"Q/rR$Q*es4,gm>>#9JQW0W^B4mBo1$9K=:/kl
%543Sh!Po9Ic,X;'),W$d_npDSUZp7Y#lJsGrFj]8$_^8->AXMifR]eiVt/F&#>Y-g7R-8=>6+\jX0c'T[sk1JhQ2j2QecO0&Q"-G
%D]!^%qV%\iJH$n6pq%^gIg?"Y^PbF1)`A[l/VIr\#'US!>63W\kWe]`%K%SH#rg5XTP+`@+8?n+Mr:(P4?+#dM/7o51JKgbjIi3g
%SAnK?fa5H1:HF$khVjQ0)E'4&:kDMX(b,\UX4_sEIg%3^^`#Ui64PCR5YX056erYH5dt&CheA.7.YIcfJ[Wjo6nj[s!6h*r_2dZ!
%)CDFE!1N!'4b3[m-T/E)GZgaBQ\$Q]T3g$oZ+#/f0V9';`ub0b=L*m"db&Pgl*A>P!($u7=efaG_)FsGHUIq2>u7Y5To&0!-u_^V
%P;X*U+m8^CK&(l9!t?[]:^U%tabc5^KVI]/Ta5j?2HHZQE"F^rM?-.qL\o*2,0\`0E,6scae'T&W3K4X^<6XHO@P+kf1<CP6DiF&
%2)Z0(;6We-!253^(Er`c`'Lu!'&c*G>sY?gA'S/;"$6We%H`G\rEoR'DuT5:J+Fc^"`/bOSl5Z_h80+e$Ks\\$XdlA:,fjC5.q^3
%63pCj@1Cr+cSr7BZZ=EIs'HInJ1LhF%"S+o9TSUE*p[K/3&1@"k?L"_+27dIpV6b#YJ1&/e+]J`N;rsbX*A*H#fFNT5L]8)rTjP*
%U&b+@$N7`#`R"./fNfU"Y4'.%Erb.mTDm+0TDmjIYPqfM(AQ/3rq0Xtl2LcC0TZR-Q'OggrZBZl7.>D"4^AIM-"]bs3W]$)5Ce"V
%eXtM[UmM.f,d@?"#m;Xb(ufUXL[KX]M#6)GT6;V=!/(p]gpm4J5PR=Tq)A?#%T.fq;_YEk'h1ok`rQlZ$c>PTGV)Ba9#pE.59IOf
%q+q%0DuQ=KWQEr@U0ULX3%kKQU#[;mH(H.VWt:Bo3^5j^iEjIGi1#nlJ#[1EG]d+VSJ0^_+T?liYQ*bbrB#Mt0E:A\gH_i4Q@E,t
%Ppn"F&jd-Kr^Lt()&M4\qbM\>gOK4'hu;#qgB"K[8BJF[NSb0J4FVDs9[.h4R;=2@UpP-H&om2dq>I3uIfIrji^K@#8MbEu\.!Ui
%7)Eg9J&KEg.>VELk8>S=_<9qp*b*:JZ3U3'5Q(N0T>:?c=9%U\TDf^<ihk`ZfGnm^E(L0&3##8",(Ua7NqXtL!XT)02fI>uq`k#-
%EF>UG_6?J7#QIk'-t4W#M-r'mNFN@H?iJZ,r;Du^p36Q9:O`%Ns*PeKW(`TCJ6k,<9X,<2&%#eP1LKqVqu?Qj0E:,1YPuiA?iH`.
%SZ3NJ3/J'TV_uH!iNaT+RYq*$hue<YW%_Eir84,ha8b^+s7Yp\]>&+`[7m6JR4#e8$3(Z,P`e?\LJ8MF)m4u#B`N:G*&dXXIUSh8
%Mkohqi.AWZrn(ro((uCnmOpWb++Xm*h@?o!-]T_E7UUWfERAUs=q1<Y[e.<0[QhZY\+PHnBa)9`fN\\-nr6`?^G^-7h+Dd[=8^b6
%Q2X_.qs^(^s%gE.-i`g_J+RZ.o5F[!P6\Pds*\pk@doN$01;N:7#2HUknnO#8PH%I<W`mm!ogSu+;3'Yo^MgW5Q:Y_s$.<O5=Y52
%T7-b(Iflbl/.R1b=RbO]E*D:&)Tln)JKs[A*Vf)B>MsrGa+"<)+mfgW8PUhb7>-)^m`5hM=3S!!A()!LD!o-#,-ji`GCmS\DMh/t
%'P:Qs^D%a7Qn^4VMh1Lu&EI>oa!ig<*G'qb`qP(UA0d1sD@2n5L>A$DIQFqDe4mET!G/uu+jWVJ%8Q69O+U36Khf[@Z!P","uA;O
%Ws_gUC2lKXrmed\ra5WpqbR7PpRhF*P%]:bAf$cS'K.+rKr6bs?#]b*)^"t`Aak332&bdnI/CO*o]I9&_&fC:-0snZT(ZN?s4&3"
%l2RsdiX`g(l<g<m!%u(en5k,0CM`nCX2"GASj<)j"bI;[5Q,TS1aN(8#B'I;5`bAn55r_irC>apq1!knjhLipbJ36+Hd`45Lu80?
%s7,t>s#I_?rHrPU`kW7:nZU:Dr^20.Y^?NX3mBGZ7bQE>[q*$0(lklg0cl3u9lh\?!rhHDa*+lFK#@L&U_sSOBlk2^!1`N/7dWZX
%R'-oKnF;tH)nfH'/FV4VNlhDp-4kc-"^YD0I-CVSV`Pg*R[loU0^O!J)[$#(mF?L7pk'aX.6@+foc&NQs+a(:qa7.9K@#gU+X9SF
%"!F^QoIC"d:rRk`Z;.kNW)d)e:9EJ=8ZgP0"_q=fNW)5:%oC^AOBE4*8*/cK]jZhVbs:J'g8tk[3<ht<2li\s?$IRBmoOJ3T6lAS
%N6h0s]f00gIY7D>8-Hp(=89i*`u[NZBXKX@*k_J]PB1HrHi?iUNG)DG5&f`;!J1aMI0e2[li/F(laVDkFoC0t*jhBDL7`%(db=/.
%QR*O4/PMZn.P6trp9hGP4&o33-40:q.UHoddEc!Fr-bc&EAOM(<4g%V[p<ma%Supq^utZtCAaRYmiiJ]7S-.6f9ZB0=WbBT=Wlu(
%qd#Hqe).re59?kOD`$A.LOPOXHhuop5;1Ktk`5MI7^bDDeG\sQT+@UH?i8/\_<@WlU!b%\283dSO4^Ei4*@c,d0F[l&hb0@@tY&)
%%.V#\^C2@:l#rR^k1A5Meik$q5AR#Ws8O6UJXpOVWia&#Z5,Lb[F"tZ_*?OKs-psG2Lb//38!o-_;4k'`h3C`8>o,_f("+%qWPHi
%Yl$?[jnFe$G%4XRK.WN,Nms#,/D#`X`=JM\SZTm?0lTbP,aXKT(^:??k-.a#[[P)UR3@==9#L_9msqMWo`F5IkA=1DCBRDE]hr_'
%E$GSN`.@'DgStZ$!O.RIau(:<b^M#qlrQ6#?3O`8p1*$_hlI%ec+hd_mi(OokmsiN9"uFGF^*ZcOnC#'dN/2f,VUghS7gH_IY2O$
%BAYnd#@Y"@`OVnf!T;Xr"2N&jP:DjpH^/p5K(*qpn7gS66*EAWoW#9eKWAf$qt48O:)6N,!%<7b4dl76Ai/iYcB3C2m7HO#W)7Jn
%g4Ai"f\6u@o8+\]4*i>2],;g(@DEG9*6@9K",)[%BF'^JV%b7Bq]3ZX`8=F%nBPE/d4cP.6tnE+EAAI+^l\!ADuc^9]h/e84_V8o
%/M>o"F!pj>Qis:iFo1i$I=,B(M<"#CP+V!Q-&d1#!RZ(Z00\R1m2c8TmK?b*9<e<DTRdN`Q_6Q+PbQ@jPZd@^>!U[&=,,Npj;?h0
%>c!5O7[)\tDW?s('``]%q*&Op4-aDni!M"2V?ln]VGY$E2LaUJ5n7cu^AEfu^/Y\pTMIaLgubhgAgIeO[E80`qea+e1Y(n(o\b(E
%$MP%gG6"N#i18f,ZVe]oG$%;hj&<2JNJfM<CV*q=rg=aqk-$+!VYSt<E!a:L(mUDJ-GUo)dQ\q:\q$QhpUfgI*BKC9)`mB#*Fj5p
%)ZiNK7]PfjmO>(KIurn*]aspM^Y(fNoKRcnKCd*Pc^osFZTs$0mWo4:ZJTrpqI,).D`7G'KM*Z%$(R"-D0\(1d7nc\i8jPG>a.[-
%G_!M8FSh]W^cK_a=_++pk0*@16+uV'184;PfiFkF2cf%rQ\3>jo)pc:(inAU$uiO?Ke:n4HSMNeUi\]9F!s%nO+'E&.t(ZY=Ict`
%"D:f`m&JO9!S)]mBJ)Z(hm%iH#\]_:AcC&S4=*";mmD]U*3KYKcaR4f429kQpt4g;g[B@+CUPa3,/REYf'cWi_fFkZ7c,4U,i`/=
%/"J^49>,\Dp:INd-JS"=J92#-E8#.d.8@@$8*#aA+PfUQb;TVjE^Ul7pCg58i+J]&&835Dnt1\".G[%q60(5EFb!qY0`]Xppe8eW
%\o7=o\j(#F2B2UO7KN6r'+jMk-7-kJo75$VH;pLC?+pD=":>Y^h=jC3hKZ/]>/L>J(f1qa"FfmtkQD*T+5kq>:4Ue/!YALcaoF=5
%5Pfbil$Mq#:e9N+i(rrP5B]PJ*]VOJ^`47pj$6Q'iSH'/:7u<iBKZ>BA"RoEb74Lm((=&U"I_^1\IrRUIY>9Y=;W/&b]j>eg,fFU
%^B4b;q:79T_6\7a!uh:)]!'-Gbs>aeq1LAeESn-)lSj1G^-D*8b%#O>Y\]tC[Mh"Zr;pgVN/q+cNr<j*9,L_[m7uIZo\q`MWeZtH
%3M0+"'/36q1'/K-]is%L0!=m5ETjFOWq>:83"OMcCOa>C*G>tbq],"Z>rG%p!YU6XR![l$RiIFqqXr^WrP.Fp@MMKA\.>Zp,<O20
%3d+k;j"4RAZ6'c7IMX!!/j1>m2OOR2fWC2FJ&PsfE0q>[pF;AuIBI0Q+naO'mig5ThJF\0>C-/d^WK,l4sjsR$`)q1ConbK[pSS7
%ig!9:la"j8O,:U<cJ'l-Q1\/sbi9X5$NfZjkeQ:,5TT-bBgk_bH,oTT5q@F*F_YaGj%I7;M#9)K&Ur*\#LH2nf?Rbj8'bh0V>L;T
%UK\`sL\-M#]o^tf`!>arHDBpU)T#7/+^CLNA[\A%HeAbH!8St6=LM4.5d,Xo:/\Req.B$Yd#Zs"-DB"A6hfKtmlpUG^o:N2]`tl:
%X$Oesm,rE(i(gtORl$$"e2d\uEt%pS3NK/c++/rmrRWZC:3Gh[!.#oY/SS!CXi:m2QHOgr`2cUWq7BO4VsstoKHFGo.Hj_e/3k9T
%3^_tUi6nMLer[l)r;L(mA?S)QUh&MJ@>m)%,OD^WmC9th6W`f9Gi5Gr%HP*c+cq<t6Ph[/ViTfP&!D_7eW0C.g`L^HaFc\'5iere
%UN*M9=)7j2l)S;1aIQ;WJ!aPA[):0sfSU>F^5&gp^)/$kN:cT6<J/XW]fOr-<l[-q]t3[K0dX%WCrrm4pEUU.LWiLa1hA=.Jps6Z
%#kL8Bo]#i:7)rV.BUe+Z&?h[!"B"feHV[si9%mWRX=l4_Ghn,4,LcU/_ga7/Epgm+aCV;&Z8d.?B'D4&\6pu^r9W2Dh"-%+TLS,g
%1;f.90N<l6UM!)WO1=na%'%Q\]AfOb^ok2.oqqH84SYV^E)pcIj!Jcp[Kk=uHX4,X%/+3t)-*>l].lJp!Ak`9;kcYA\c;p?A8(E3
%e8X)<2I:;`>pBOV.fSqWJJX2<Cki_GlpH+HZH?JBei_3%l,C??_(p"ic&Gk4ehXp8j5-V]V%-Q=W-%=Ci9Br+NB\m[-o-5K&TZ4%
%IO&*I3jH]9R%Dh9V\e3J_qf^D%X4OeH2+FsejmNb/C;;7@4s+',6\b[<B>%N2\575ph]X(M0<,p'R&e$T^B)57JR$kHc!D)12PST
%nj0_lT:S"tp@baV]C+Z[0h0qYB]mYQ481aRk8'T5_'KcUrV1cU?1J:5md(H.1\DY/-*g7Vq3d/rrk>Pr)j&=\+6D=BeVEA>c1]k'
%j`^SF\U"n3VYd4`qo2iQnY!D%*a6`E/+LH5HF6gNQT*>oV4AiVGGG)GG*MEUC0Ikb*U,jeQBqb`OT3D:XU?ZDc#<,CH>C2Q8.Q3,
%`'Q/k=^LID:'\]'gYQ'n]d5TiEm=!B>!=!7HQ/HS>e^C4C&)4W6b=u\o,gb2q*)6YBm7aQbl5TN4h@C@O,A4.jX0lP>.[oCk$Ngp
%WpO1E>3],"5'qOu>it%tcBIht2P/?$T>d`#`ZX,uk1>6\@]37U>mMWb'jmP.7etZ6)_Kf:[r+-2ZgYfe]65ird.+E1YDMAEo[`Ha
%%3>b)4NMqtqpkq#>Q)_5fCp)f1&YT.EtMXE?l3c3p!H)[ob!)4$8porP^Aah2n(QYjD$Mu]`&O<kLQen\]-&'F+(:j^0.L:52kCf
%dDB\p*R?8DM2Kl&Y.SR-^E(h1Xl/VNX<2j1A]bgi?P*3UHLp&X\I__!YFj72:2R*Rh*0OdB^Nk-VPYXDYK9JQ[P(*72afQ5/UoIa
%#&)K:)VRn`W,FM6M$hmBnRsuu>An%Vg1_M0i3"%nkOuBND[PeZAH;F8s$9rId;n&]dB2a2_hM,rIR:s?FFmmd4)/:DDTRNWURlTN
%Sp%E3@5UMFo=A6D`2D^lI%mpS>$R$CpYdYQr8AS5"a*rR$Itu$)>u_0;qrRHgU\gRipOAM_@%DY\s)ggl.ucpSXmX/Pi$oD-KElt
%Df+&iNk_9YA,q8P:9k4p"a%m.0E@[Q!6!7X3UG7W;4FkYbs*FPk8T%Z=hRm$C739C7l:773;b7*.VgP;[<ct]3XsqPAPR:!e,8N#
%o.0e4[.1R9bfY-rcPW)ECAkm9/4QhLnnmNbR/a[Ac8@i9`9(hspf>VP7RVdBSJP!^YBQ!%oS]pH@HO@*3@s=1og=ZWMJ,]\@/#Gi
%pfV_5](1Ok[%loOo]G7S.<Bbg*/uVrJlrQoF<b]#Mfbm*E,n]o_hDLW^)hZc?FG%K6Lce$6mT#0Z;o*NlA2N3Zea+ilX#u6bASrf
%#Y[7jmt24h&m,O&Vh9"=o6_Z)MV3m\2ID?8f>Di&fXe_^_CONP0HatLW2&r`UDR2%Klc_Jq.CjSNY`-s"UEtg$TZF"TaiM.%1ZBb
%'eF2^S9oT9%(+:5eTjWrQYrmOE4XZ42N>CL.`Bo=.D%0'I5VRV$c1'K;*>7GbYBX[/`2!16&U&0rCV:f.l]?h8WZR8d5^4r:Q+2\
%en-Y?ge6%cdS"C"BWMTCWqKUIj:s8I`_NZK_hj:ufB[+uI,^t=aaOZam;/hEh9B3=hl_JQ%O5e??=CNo//;5rg-b$#omI9sG.a9C
%G=,)D?LSMkj7Ql+R&D5FcLFHpoiESEH:hUV?'aC)oukmnUXEX#+#iknIR5r=VLAi\%fjJ5(#r$iB:o-oYI>Podf&:^Tu"(_Q2k7F
%WGq`TGq_i*C7ek6"Bjn"bVC2g"['=qm(V3QhETaVc<O!)EIcu:8Et:SH^B*Tbbt!7_o(GVn[TAVAhHP'bsM*/&-@d&H-.5s04(ki
%'9nZ8j^K*L3^d%BP37GQePpYb-MgFuIpK*HiVga&<(LU/;SF_nV3f/'#5q8$&*6\eI]pF04h'%k>h_msR71I6"SnY^#l[XM/?1`.
%iCbqkPD\&3.JedH9dda:i5)kqMGitbo3<b5[dp@)l!,XP=Uae--[m$l$Xa=-+ZSE5(Llbtc!tE@8.[a;$A8H(JsV<`KKp9E1)Hku
%%u+,=B7XDo:h5)mRC)haY_@'!a+G3j)shTP6Ui9N@dRI+Q<q[PW'o+t+'-emMhfHCJHCeVpf?^JN,lXu0eg3NZttuoekWjiQ>L$9
%gmjW`Zk-'hp3bcP+a>c9"8=VNM$?>j75N]6@)!IA>Con+s$fL(T:,\8a9(^d'4Eka76L-=k#Q&TM@Hl<%q$/7A>-D?9MfhMCPJBs
%Oc!h)6O#t%`L(5en/F,))o<!mG=_8/L[uCIU@I`Ki)dE(A%0[oMK&kk7,9"5m#DE5ORP&N!&u/kKAt_-^JBf'07#o48#-HW`b:<J
%]^ZH"%t6JA)<*6AbCpd#-Q1389SH9`h[oYC1@RoF1F^D^0BKB^1B['Yoe$g)#9e6Q8j:Or&hTZd0S\]fPB;9kH7[Q8b;p>*=2?J3
%:_GX+hkco_ZY,?98q)7sr;p`VH*R,a?@7N0=X="_$h%OjN<kPH-u#0S4B'#(=rHR$:q!`G;6^j'>Vb2V;,2*EZd4WTGpf-*eb_Fh
%`I`QQB.QU.]It'W172Y5=Ni^d/p=pFRRL=R?a#/UL$3Nc^:/L(]kR:"$^CXLHLpX5O[%K)>d:5>7)4+Rhr?"b1Ld(DdCB*0eiG-o
%A?0YE7\k!@;A@@XeBUjrnr:"J`A9@Q[+DG+G]^:'nZG12ZC((Shll+#URPO7bN_^+YKe]B6HoQ?[MdmBKo5\lQk^*q%IckZBMs\u
%g7;A+?O3)K</iRHG8"_uT3/+Ad6c#QR-Ko^93$84hYqo=HXOobA"!Q[']:[/lYhu&Dc!m4<.CB>HNS:Dd++A\NJ_[^W!ZakI&#S+
%(E04+Rr#:PGhRMg+(j%\5To#8,'uW0/ZhmU-YNT=k,D=u$p^KXYOJHZm)CKJo;gds3<6OJPC2UNfDpNlfbW3V-rC>T)`M%QTMSA9
%g`LWFF3R!L"\NO<R<sG)K`R-&0B9s1knBl9gX81E0Xm%ZI,]<f(]8B`Sm4Fm3?u:_<s@u4<':u=LXdGR>VX@j>\sh[RkIV"a9f&L
%gcjEid9SGId`_'p=[lO[>e_12Q1HF7p>t7;-FJ+9@m;YVLH>!;U]Ipg;s)TD0cg$e95bm./HORT?R/ef7/mHJURYjI9(e8)<aiTn
%V6:Y5=IEH%8N^gE7T(JCGIdR-Ipf:UhMV(%co$EZXUI8R=j,%a<*JIVpWO"28s3p)N:Rm!'55@':QaaJTeh"WJuQ1rN3-m'nj3!9
%1jpj-n(Ph;*h46X>U,CV5MUW3W@fO:2S-HtI-VPEa&ss7RCg$[<*nFUdDGSD*[Ua4Y]QL^knZXAV'b!m"6#pBQ%RF/%IOY-amJul
%hF3>NiKBX4bua#H"er7VMFkd1?IS'.b7Eb,oGTY2d)<WCmp7Ppd#YhaT3`!=Ms_)Cb&$nLSSIuULo"o\I=!XXRUL3j307SmbHUp/
%NBNdfI*-t0S.>TAMal2tj,/`eT!R>&f.4`^-GJlbbHH;fQqUo4+*>$rLl!KQL:X-LW]!I#+ZuHV5+bs2MHR'V8hn)`7Q3_`n[KFM
%4!!lNekJ<D0n!JLGEY&%N'8"`eD:c9m=Ua60ZV2Eq]!8Q=!-#e+]!Q4mIPN\knu)&cGJ>_fN&%1<&]Kkk/D)L\=,BHD:t5h(?VJ1
%&$,A4+WjG\,#)G,%gH\4S$.1h\+I[7iWe+Fno'YLp@K-_6kt*CW*>s;5F*2g@A@rI]:8q^I4\n1HiaR"AMD9ed7(ckQ[[1$*aX`W
%fLDWkKH#72OX+qW\oLYq?=*R7[P=P9:O4_;a3X(VoZ$FA-[38?]i(2SSK+p'P.#DtlXI1##jlF2BIpX%*9;S6DOlZ$Vp!*YMY7SI
%CA9CTp@_P3,_q;U!;#+m(ge3=:JPbL_!\gY;G-[:2I056<amca-&ubS$W<XO6ikI_/7iC(j,6eFj"TLm"Q(5o[3e!m>D6hO^1TeP
%5aV\-]+l(1e',p'i@qs5m;^PtTnqKM35,-0Fc((t=Ef-';B\:QVr,p,lJf]n8P`YJ+dd)?hTT"-0<qu%\7?*0Kl<67e'.Wg/Id:.
%"VI<.oJ^^8K8[=AhNi3&\SKTS]Er+e_,!<3W?o?Dj]t-Ug0O^Noh;[-B/7.8>O:HE-_K"P^B+mT-C./3=O;J?T)fIQg/aCAPq[im
%Kg<G!\_d9YDsd2fJ;%k*L&5'HT&#[qN_l(/^aX$2V7!"9;p)`pai26gkC[UfrI+8q-XO1cdHuR56Tf]dI:`hQ)(g"1"tl\!8*9:f
%HSdVg+I;*o\FE)Bp;r?SDl#kG1QV).oF=G/'P0o@pIk$uj-+B1?7^MQGhW?`jR!P@BsJ1BUcEm[SZaq2BQ&gnYMEC"2!N^BUK;e\
%gf]9M<U1`\oS$[%=GS4_oPYfuK>RUTBoDUop2oqEE\+ShG?-B*qciB1>O/9_a5pY,nDNt\Du3CtXRm^-KpnFYLRgrNa"BiJ,9j.e
%B0r:mgC^coO8:6Y:d&mI8gcAAWActa'Rp*!;s7@*-eS<=GVn"a085&$`ppnA$PX)*C[%tgcV$P%]=PSZPR+-M^+/=8<dfOV9`s'V
%$cCNn769d..W]X<=3R1Y\">J!ralnY8=:2XN.QcAemA>9]+nWYepqE^XK!eoeRUD$H$V"'FuNFh/5e2njb,]T"CRI*Y^`,2QMTgK
%h:g0V4*C&1c$$@5ATPlB1>9_462i`?!0Y:doCb/LQ9R1JhU?r9FJX/DIqmglgWaaQb$<$6-&3XELRF(^gd.gD(\oOu'l*n9-e1oa
%Lg)nO4u9q5Vh3XIme)>,;VoP<5$]LnU$e>iG>;`'d(6nW6kT!oGQjlNGe_0Xl^(:\gQ$g%0SnibpMX-+.acBt[_=>)c6A*\pcu%l
%Kd9O[`NJdO(S!O-ZkjL`X]Flo)`=#888&DS-40@oX4@,s]30i>g_qimOqC^l6`*jtYXo!`A*%-JrT(#>1a8S'I?#.B5EMn\c*CNO
%/ZDP(Cb5;)p("`fg=P2,)*R(u^:%*EJQDW@Ae+8^3gQ=Kp\Ibd2-#G7mMlblhN^c8fXrY$:Y)8nQM)omeo0`MR!Uu$!AbPPFu'5g
%T?_kKhJ*eCG3$r[4HT;LTKJ:a@VH+)ZpeZ5Y^amCJre@FW7O:<R;`.JC!LmQR!CchGI+DrTp>TO3)/T1lY"-55q#]c-[J"*ICW^9
%H\H,a@U]j9l@Cn":V!CT?`jJ4Ok0WU4kGS%>$L'Um(mB!aCH*=)teOEEoZq!F]<ba-FEl+GE\!@mkYd1hCCM28DB-)0o!;aH(I+C
%&+8BcOk&3]LODF`m:Drd<L`:0ebLrp+o"`FN0.hJ2HkFPkcsmq^e%Y9&DC0aeH)'9XOl"gX/B`=gWf*dmC^/dKV\7k=n3LC/%:hs
%ZSCL+m).(WA[MLaRhd-HZ`#"KJ(70-ir(64T!,iOGtY\V+Dhl]qj#q.+FLd(m[#1Y!6a&eR3M,t5uI`Lq,R)\9GJ.H<Hl/$#PhQ+
%nsPOq'=EgpB_!<fH+D'S>0;jB$Y.uXdA1WLhJ8H2bC+%`Jl]D+Do.G/,n-6QO*"Xi/<eNHC32O9Vup"*Ao@0Xo$\tZjC+K5rS]@V
%CJTYOW\o@U'Nr9h,*b+pB\UAkj,JO,]gLtA2/"[h"S2NIEqV<(p43>eRh<74rHg8<K.ZeR2hbsJTUHm-(*hed!E+dT`[nk`2HDas
%gf883kMVTkm$02q,DXK*M/[hMFIukRCfkmK]D<;VTUI8qed].@A)_(a?GD/9@f`o_JKkr32i&.0g#`^a,0rSC8.8_feS./INoAO"
%fj^sJlY*B0$su8Do<2rAWrNf?n+kQC[?Bt=cAqHk+7ZG[*Hfq/J2##gc$d=)n(cZW%:nhCpZu$p"j1?GTVH8UA^AZMD4I;tr+gI8
%6D?QVqe(u55SDB-R?PP0%<S^d!qKJ5Nig8[M]8kQr`Z1gGn':sArQ?KYY`PFmj6-gCk-8HoC-8r#]9MuJ$A\t(rllpM4Xe\qP^n.
%:>fGM5M7\<FT&ks)fVA@2kYg6+reR@S'AfrpKf\$Uj6Qkp9MdcdNO\Q'q`WJn_7hfXdC`!Fc4(bCOMGN(.4FH+ml.PH%uk3\-QPf
%4E06V,(?3A`-90oZ<tXf&YrTVP^cnd>f#-0!OD1sYb<p7X/9ZPhQX1@<3?+9V2ZdO_jamHE2$`I5Ik,0$a7m]UVtR?QNF#D"*l#5
%Di;0(a>u$qj^1KuE!0a$,meYu-1r60*(<e[BI*HU:1\>HjR)I0J%<Jp"=<7T(cXg$UOtfQAKaFtS!ku$I\;'A,:c@,#e.cJGqaE@
%Mn<,?$Mb;/kgD3c8u&\I3>FYufY]/tTr/t1D#o?ro.@CgHdNi[s!dE.]^,pseVc9\k>#c1jhpj:RFRK^OR1]q>HsN((\qleTC"d#
%ErH"*i[F\E1cieGWO7qLeP7nu;MI^+r-e,3!Z^UG:ag3DS`ID>]hDrMZsK88f"9p60t$pac930nb3@MNH#5(!pr\GUbXPZ:b_=C(
%6#m-42QI--&Nu<<Xg=#3jR2+`$cJ[c-T%Pt^qmP86,,#TiU;:/T<%F=iFXUL\:4Acd.[@WGs#5)/OjqVMlUC,pL03bs)P=Of(,PF
%pQA!14"<XZau@D:K)V5=N$ehPhWF%h)B=P1EasO4d!tEJ@'/7Cc!BjCcS*m?L&>iL:t`KGaHlM4XelNX*6A;QguM?d(U4AckF`9'
%I$[@P_tBR.JC44Hn;7_;k^Ms-oXG/9L>OVeJ9W>hd.N_1rOt**0!7jdUW$muI^0gI3fYc2*Xc\la:#5f:S8UJhfTaQa\pm6R]05F
%l`0X1ibk[p']t$I\=['PAJ5;-)c*A%WVh0npO0)L?&=*WV&!1eH8rKW]!c4=D]q(PQBbLYn-'(cfur_2)o;Gio_fs1E\(L0L[!W;
%nBY8HUN5hb1riGG")EI;(D>JH1.H&f4#l@6N"IK$RmQ-.;mUXu7+6Xe4NIM>qM:e=)B;VaoTD&BH`<b2K%::<d27%JE8,jLkDt:L
%HkG@8%F,1Q2L7#08K/92RFpIV*_lKQV<0@nP#I47<R-c"IA]YDqG1J9.u-];<V=!;PADTekVqKfctTV/E[mIP[%DGUBm$Ygdd>^^
%g)n#H=$kH&o1*:gr_u@rUp>-FFAd7,q>1(mZ(G"0],-?-ou)$M9>qE,aX`qCk,I0?L#QlbcZ.B58\Q]79j/?*V>d#?.<9H@#VLR3
%8\*#Z&:>mMa*)U-]g3u6-c/8Dao6GB*DHlC?+"(s;]ooNTCUU3E8'gVY0'Q20RabCT<u(Oi&I]^/8QpXPJZq.:L!.7e&>Pg8WO7A
%jY(auA2ia\\X+m/9tIeFgm'q[^&;-rn6L.BF`hLZ.3PJSE$TiFWRsop'N9]+@oBNak$;9'\F+8r9R?FY'VG*ED-+;J*,GgD'A"%D
%P6*pK=s"bHXArP4CV6K>lmLUm9_8S'dhOiVA.6.a`Q53J?A.Om!$APM[B*s.aJ=$bOC_>_UAT:r-S7H0(/6<m:CH9>Jmp\'6?'09
%pGL;]Qd8VfX``'e8AFCKC&7E]QZ8Db+Y6l71^7Vk_NT6J+3#?4l](S2mA(QE]:4hE*^B'5AF1]Ik64PK'<]r)F^"u%Q'XuWDq2F:
%46^ljloImf<D&KZB[VU-butX3lWu@60I`)2^YQP5CaZpLX[_Y("[!Ytqtus%hDcYQ;&5`u0#RCH*hU)nguc'i[Z`laj(E%'Ge]3@
%[=&s!]lfdN-p4,MD:q^2Oq.4.14u*.;Q-,&BaZ";eH*M_hVueb:r\]"QA-^WU"SgoDB<=JBlr^gS1JT5^Q$sn$]tC+pT84ZM4Cc2
%8O$,ce"k.`Wc1@D)JO%9ZtGsehB0BN/Ak%hAf1e/LiRn5EEOlF8^i<s>P57j_NP%XC#+Bt`D#f4%8ZgWgc-uD_Q2n_hY$u;"\bC&
%B8'Dr9Im;qJ4YYDl_OLADO=,/E>CL:FRL[u>hq`1-?lZ9AMbj+"g<(E@A$RAcqPaD1]>hgdd?O?+&"/DET_eJg:<(FP?[aqAp(nQ
%n#jfo#I_C..Z7NJraU'6nE\eg=;dV]g\hK3<Y_S%`>'!a)R\NXHga,*Z_f(sn)M0+qV''?T&T8*E2\[VpR:2F[eos&Ms6Fp_O:AS
%qnp[rrIa3_rND!n;`Par7Lm25J<GuB4/4Zgh[a'i2mhn<mB?BV]bh7H5!6Ygf>fn6Yep)`AqR@o\p@A%..!Vaa+)nP?0AY6dLO$(
%,<%.OB%HN'_cV2&rAgc^52(L7PUV&tLQc0D?]WOj56fGfW5GgJ*t,o.EfcA&IW'^YA"O4drn"c[;^rgBr;%+Q@+8tIZ0/<+b40;^
%Y1uY(9C#d/rn#0WEH/L1dW!(UX75bqp9DACqfVDjXF;0n4PmLC[GTkj5"hd!66Z,>I/I%p]+Ea^3Qj`H<#T7&rQK>0YkYSk2h'TI
%KsuA_NeJ=,@3!'$==t@L#@+1.0g5KZO=d`_:3?'JiMO,pSj0u@MYY6NqK)UU1%Z"u_7uO-m5;?i4+('grG6,Yqe9]/80$lb29<hH
%Db#n%LB%F(h-uR#-^rf?0Ta/;$3U5`@HMG*-#%5n1kp]cW6&ueF_<_FL6P>Q9gDG8PF!lKZt*&pr9-9-;Xmu8EDiUS==-HT+.<rN
%Y<\:sG*qpiS'.V(7E'OMW6'"aA^[qdI1OKpO*&fJMk>*,nVNl;^0'@AH^6kY-EXJS/h[?eBp!f30WFUQjnkYJV"3?4o;#$u2o0Sc
%iNt_!JUHo?WO`N"ql8,@(!EB\5nej(%ED&&eDN;8PSpWod(>;pEQ>KTY?H*L>R0g"RNDEeCrGkBmbSIFYdil<El64Z9./JP55OqB
%c_!LU>7aCb=do,\$dD'_cL:o7Q@gsH5!mJ\+gQ31%WHg&:B&l\p5qC2G+TTXjn3]o4IrVV#.O;f,;<*BZcJlNdgO\ZXc*Q[T1usW
%nj3&k17KCQoR/Iq4c9<3LV+JGIM?4gUrg2iF9]F7KA7Q!1E&$R`KkcR_>HW*O9A2lCk+&V.)@&&!tp5X)),8*_$]b\SSE2+6Qh0Y
%da]fAk@tRa0;F=^:]oFj*i)2FH".lnJamG40JX"B7XB@@NHFg53NkBrXD_0&/0!n2/;j?4aWHf&]Wm*4qj6*O^-(u?^\+Ai6BJ8[
%Be:)6.UM"E`#VuEp('tThSIW/B/4!X'1;$<9'k%7k=Y/ca:_h2^2DaUbFg@Raj-.$'e:eMHTj.PNd&F^2A7lVSg(3rYerQZ(JeRE
%=O5fLa3&]8O1?;r!F%],IN^\eDL<sjKr74n%?\"f@-MWq#\CHBZLE)oFG'l"!dXZ(r8W>eN/ll"!4CTLe#DCG\*^.'4"`+qZ?]RG
%Z*]4XAT=TD4YF?!%3^$4T-5RIKLY)!MV.aFY9ROWiDm67HXa`on!U?cgBB1]mZqQQq7):,feG>23HVH229Y:?2PF7p^Lg![lUL*p
%l'=Mc!Ha!2N-dVN10?1.i&I+a;!^Z[S@bfN[@Y"Q;VB*ZD,20*o)j4e7FoRh0@pTtp^aZ3p^pu*/?6f<@lmCAB%^#U#N:9p%r-37
%8"q5F,i6/\D$89Rcii%AQNLdHQ^#0Z*S<#c4WC\h_P1Y$=gmBimod(%I!sOh^#M4W%sNqs+C^3<(R)PVkWk(!P*r@CSG##.rdO,W
%^X<dZ0'jWm0s[g;m`:"G9=TTWGQ0J,j9UtNO/#6Y!pP-dq6!C1Vq1b9-s8sL0u;jp[,rk0Rs*.OV";?Nr<;5eRXHl/!%J/aTb`6D
%&*B^4N"<n;V9NC[R\(%!??4j)K:+aeN#4?l[#$M,/6deSV!RJSbcJ>B_4sot.ifS71$"W9BSSYjS:_Jgm8(RQSn/jWpm<44gWKqN
%<_[sr;u*jL4cQb&'.D#/S^S+fc#.JD3&>`*W-o&FfI<B"rL+<<f!7)^Ej>dOn@q]X.\6g*"[AZ)E</j#Ch1_gE8l-/ftLR1_eLrC
%HUVLaTB40O6i?;lABURd;/-1rA=mr4m"Y)KaX/\\2)lIc+0)iI$.t$N!<Hr&onMWe4s*&[+AKWOn9_!q@.gch*sM^*9W50V$duTY
%m;AF7frYe+@hU%L5P1*Q/2U!^<G\W-C%*b#Bmi(>],m4hrRj6&FRkK@iDj-oF!QKoi'bY,5N6k-6DKoTh[$NP)3ADni7gV@^eK%7
%Y';YkTlk]dQOYPOgsJIJAkN,EnqoLc(AT!@A:"VH\Zu5F"^Xg+&!Q>\`0a\ZT5&'`pSBJ:0Q8"j?-AG#2pg5r*sdkBkKSqn3Z'm2
%kSAE'kA'`_Y,&dB*u&CD(@HX&LjADa@KUVUf)XTnm57Y'bcq55V84]T6PjXV/4q!f7;6?WnIh_>p0cosGp;$`''oo8O7Sj*]d2rp
%]A=^B#4Z!`B&*$EKYc+!E*a$VGMpD]%PbD3[V3DSHs<@+3o@UX-63o0&9Ogl'CFR8gXt="J3d\Y6gK.Z"Tna<Yqm.>T.?h?c9[bM
%f[2%WLS,thV:kC>/f]b;rAVNlDD1A%SboC-Z75i$4QZGC\#MpZ3G*OOot'T3D`]p\_V]Y/[^X,iK\:Wk%U_+VRaDn3G&?TgZ[Lm*
%*lk?QH9u-9-B?*6q?36V+hAq_a/0ltf=_DP<BP._1mn)mE2$!)?9^AoFMh`tX%E]QAq"/r*!Qmbd^uBjD@io37iss6I#b/<oSH1L
%]/[:`k;F;3@`-Trr,T.J:CdnR2J2)b!+S9qoO(&c3SNE?p<a+JXXAK^JqHY$91gmCmp^"^Z[ZP*[$f5=Q!]P@C!:.Yff@d:I,80A
%1s_1XB5'nH_lEp6U2eB-pkEVmNZ,:pFD-e6GhWD4i!:`H5QT_u=IctX*?QX!\[oJ_>0<^eOpB`U0Nid):B-C`#P2Q5$U381?-f_K
%K,pGTBE**kC8K=bC\ann%c]QECiX2_G9n8BAet_0$HIbS?J[icEBZAuOdsYTHjmi!'3b?NmQtOMI0m+3gkIbObP+d#aFK>r0&Ha?
%bLpZ>+ZS.l#R5?N+!'f:HQ+LUC_"L`ZIE!Er>*$8CXVd``GR#hn*NS1]0H10GiO5hEkZMLj1*m!mW[VLLT)gF8X&%dNcuXg$"(^o
%&_q4_k5-ob4-Fm^\&M]Ecb>V7Pi7AUaFjOuh]10DN66kE"6j3uJBEJ!7-Ss)a6`_C0OG(5LSP<4;S9(<Y.W>EYtiYo-Pq0!<T.9\
%3p3rTVhW4cgikP[]=?<MJA`O-c>Mn0GhFKZELUb.c>kN4YU;L^C"7dX[:Ji5o:td3=afN^5$Yb.8'9\;]'Dh7]ku_)?RsG!1=>Cs
%*,Oh)`4dfKGJ<Fc:+l]]9!/YcqlS2\*(5`j4CRE#b@]^I,2ieA#Ek!JGjKD.IBhLVN+2ngL7Q1uk2W5u6K]j;bNi&4N9RT[,D'eV
%31h$KpBWeq0f3AKSU1J[p\$XH$sh@?JrW8-c58ph-FJi+1H^G*MkP3QTJN;GB8`I)S.nE=3CXBO(dmI-6,uJ'c4WM-*^OFqiLN#a
%c96ahh-tG]To6KOd%OV)&4:*JU::IijJ=b;%%Z&pff9P@B@4ZbeQuRbF,n%.]DJ1.OM!0YVlP5!a6i8/aB^bq?3Cda00^8f-Do6l
%>E@-F/A2$ZVj$n=42:<VXuZBBqo'5/.iXDP)>>tGp]q(V[`k[382bC6/q^9%\NW[1Lj.pMs7O@EcAQV:>9\<^5k5Tak[=[:!K$@c
%.OS"32!:L_go^<&T#9"[;#,&66+<3lB97%c=l/;b*o2%FV:h2I,J)WSh09.9:$r?DVXI;p0co("PG--%9C`L7S%ocWM-C&"\@h-&
%UkXDn!0-f4d'=b;m",C_el(!K655PWmMbobP@mm]DV\S<QFUZpGI=nn#r;1&IL\I1j@[f_KQ.XB=j_K;[^GarbTm[Q1UH$o3c6:D
%Q]+H9at9NPX`4j;kG-K'`IU/\h8P4BiqV;-(\m^1X-YB#QX(Tg;:dL*3JXL!%!N4%5T1<4h0n2^:sM8oD!Sb.&'+4BGhopEj7k[D
%*o^GK]3hmDaZCih3Y^"L*!c)VK&@S#oOd%o,W!Odc-IIf@a$'+Aho<*5D;d^1&GJe4pNk_I^T0BUD&N6RYLt7[c\^C[(mc,a!&+4
%(;0q1XJ8NX>`/:e&+2R8F["P,5?Mi8Dp5TSU?jo$Lleod9<46e@=mGum\RT847.Q^SUjk8SAPgS'("AEoju'E%<IQ;o03'.k\tu[
%F@QPA>'i`\=fs\2a^rfdPZrQ+Qi5'hdaOj-2p7?\N`!&4`l]Jq3`5IsTJMGXJuD<%dBtk5EirZf3?lW25r>u3#!h_md^nB&`'4\u
%IZLP3*tkD)!7]_Mn76sdJL"XS.t*V3=(Ig),fb.?(sY%%7E,M,jCG`e>D/Q:7>BsknctCL:n/b$j1.6p`Ii`\,*Q8'ofR=WGDcm)
%1%B3pZc.Kj7>BhV51PD]_;l@L#CR[FD/K!C0oM!]GDH2P1qseDQ[DCZ$uIa)@Jd_VMb'DU+p0(:4=r;rILtQ$C$uq06Y%$i*HeYA
%;&:mBoZ/4-P8Gf'D]1jWEpmrg0o<MDUAH8ulNUC^X2A)!3gQT[T!M0U]mc9U*VN-uNqZ38d$O'MBD<<a?1<jioST^@j#XU+*EP2+
%ms5L65.[-;Ho["%_0&L":bsEpF4C@K0<\O8;*eF-fcuE#G56B1Qp)S:PeDW:`6C@bDRTIQIcKBLBP^H6E6*2W>7e<*GW=S%W\_W3
%)0.JS&NAaM`o>r>14me#*mWFXC7as7a?J`'W\L]%3(.7d&TRE&LU5g'\];Uul=(7L3ma$Ff`RdT]NERPJ:.5^U(kLoA4o-NO^h]1
%e"-H<=i0J6:WVkim,A-hA_](diYPo\N^\6eL;kR`)&d/=(je@P4bR-*nD5/Pb15iqnU^GrnSIf]#=I/!"*&9JWfLWq2I`P>-u?B:
%bqBY_*9u7(E]j/bj"W)IhY@X/Fd0lH^1Y]2JaW$<A-5<]Gik=^e6^N^'-BTR>7?NJq_<c!38B4JfsDaTXPmRLPe^VYco/UCZ8KMl
%74gDKf]FVTO"8_g&ZI_\Le)slRU\`8(i4X5WK1D-M+AAJPZdBD-pDG&DNm^;;Sb=kn4hY^0op:&T?mlCF>;*]r1nm%qt2thDh/#M
%Ou1^]P7d8+!u]&RfJ2.eH#/.@Dd,CBDH;f>gJBlt(A$S6@pYu":cPX`d.7QtA#GIo_bFdQoE^/?<j/#E'[AE<d9K&t4L-oi.239T
%lgkYsI0kY=\6EdWM&CPNKSOPi-3jiA)<%.JZ+IOm<'qLlQN7snY;rC5S6UfJ%a7M!rB)\l7AK&*$"$If0!5R9b)b3=m,ME#"?0OM
%Ei03*"mt_>5V,05\8%Nc3L_LMCTe8P)Cd#):(4JjKj^VSD>SVU1B/etC?53P`kb)m2gTJSh0k-[i,>GjcuUd?]R;?^V6ukj4MHc9
%\X0WM?]PGBl,UCmcP6K"*:1+]I<Wi'Y=p*I3ub_c4/ZJq>F,W-rodo\jO\;VFqZ&i%[3p9/)#:Daf/O87tb/$kr`Zoq>SNVd^B$g
%r65k4`RWuV]*,a:.M=\>3UU^fVQCc5>cm,I@#<'m;hU\]G)<G-.TYPhP7#:HX]*E=Hp,3:I%5\+$?gc>$[,`OSL6"[/`41iisVG8
%O"*ngT"CZiq!cum.3DtG'FIo1o<,6hKE^^\,SG#0fhV>-Qcoa_T3eFe_FnDaj($$k7X%rgY"l4`44t05R25mP_QgXJF)F29Sh@KQ
%#o916$(Kh.nm6&1rS?)hlu1XiQ8r/DSEj9;U_7nB\T/2Iaa*ZFg-'o<f_T3],\I18e<(]R.lsYPa]_9]DX2[QiPq%P9c=J_/A7s^
%?,7bH\Cn(3V3KZ#o<bD1DNZ2aNpH;<qrUmp`7Ok`e/IfqK%flpB>cIO]j.F_T9l]^^3i"d=186Q7,sbH1u7MA(dHDiG'\\0'lLHn
%3n)MJ/=fjkR)u,flth9L`fLk"Vhh4VE[M\s2j_TUcY)Tu\OY+/=fpj+9kWW[1-pX+T@%b`HKEqVl0R8@Cu8Q3MPd_<V/q#%R6$e^
%cH]nED`Nkl3ldVM\OP'Db&]F]1`bo+`R5W,!Tt1lB6P4F"Qpe"B*XUi>!9'&3kJM*Z&1Ot8(6/Y+#tuqN2Ep#$GZ)U1RcTa*#skS
%R5p^R8rQI]:$7PAGt$3XMR&X1Ra-DAeL]*iG*8aL[X&G2FES)5>W6(4d<'Q8-'6./)bn?`5\'&K[F],fl0S,sl"+E%BKBXYN2IER
%qdnJp3]gk3<6L^RRa*OOc7tJtl=`5j"W>auP>DU;RT0AV0-g;,[IEV5i6=X-E"<LiiF.W[/SXLc-Qh,qQS.E!YKgFbQrgs^]4uIH
%dY0nJGuhB8M%j),*UCRf#o<M2+?tOcGZ:CpSK-6ZFcITtH.ok1jnna+K4OZCf_6Nip]\dd0`>u.(HaSQSDLMA0!e#XoCgs'0OG,E
%hFD'F0O)6=>3Kk(Qo2V%S\77H?]j,^RC`VE(?:%8bM;&KGoh[OqutNZ3(Wi;:S+]4SIrj*;Wr#\13\pb'W3O(B4k'].s*^QXAWrK
%bagU)\8@qOaWHS,]2qk4(Aj>AY'PkEMmM'l3:dm_l5a$7&-RpG#gF?5k3e/4i/9pGYCb%P284L@&*K(0+-rgGnGP4kWd%#N3]h?V
%NCnhZR3hXY*+[+ud*@mB>[`P?!!,3&4IuhcR4gV)ge^c74YU+mmX$=P]qI(@k7)Pg:N*0>TAEBcNm4J=?]It>OcSIhT0gmQQ?;%C
%]C0g28Zk/\cRq'"F=5Ej$5[,0D(Ib-Qud.2*u3G1J[IBBMF$"*q^q2".j,f_k8q:qlk(r6d1$;DI!LHfGF'O(58k,eb),Ds\d/mE
%=pnOtW'OY;lb1`=kmp6JH&D#R,#bYV'1ig[EWdK]2Ra$Jf3M#l_fTO@nEI"#OE]dGAn4q*+D546T'<X$NT2CXdjp%)P+m1nBTVUj
%di;IE@3H]8!O3#CR/2LQb$L485_c["cc?fma)HnCGBWMAGA^4;;cU>s8)7qK$?s4[nX1o_)3L!R2=;eQ5#1p2Vl5h=Qae;^NOp'/
%AW9?OX=W0A(%)ib-HV[Y_O]Sck0Q\2Fp+NXgs\6!fHRQ*oP>HSbN0f;+';`MW\.)CKK;Lbc69Fcn]Q`+T0CR9*ljm1bLPb_N\bHY
%/K+fT\sY^c(..&O([g@CPEUEJ1#;V\Dmp*`ia`nL0oXd*_qQX->./S2S.j(>)T;:'8%P#8/`mVajFkZ[GI8ISlgq0ehbL/ZgRcPl
%?Y4%;5toUQUq=r?YCqIumL$U0YB1+]>2-c7B$<FA6^(LN!p)5Bc(AC2MoUoeBV$LdpT42X9/+#b#_nX;H'?7XAoHQIF.@3N^mkYd
%,pLQ#/TQ?GZ!tpYYdfbD<+%-),/[(rj(chmlsQ@U=^,kAEf\ET()=r\=,cI9?%f7We?bX'At30N;1+DWbt#[q)S(<H<s3.X#O,O^
%C3TLNin\2F^<fYgp=.9<>W,p3jg'_1kf.nqUDH_1A]>Rl/m7JD?1hA3I%7^W:tUDAnMgD_j-1o;;`n<,ZZb=BKVuI9"=(ab`NE,V
%So*g9%8ElN*%)JYQe=0YraMkE`^bkg-[ftbEu.JhPF=kf(4uM$7WcGC[>(R#\*rEQLH96E+ihs:rocf3K()=51_.?+S*b9P8_%BO
%?-ar@m_NnkKciX"gH"1g.!@6s*@G,E2r<jqP;\@knQfi=_`PJQT!WJ7:i\t-WH]RN.G,FjmFg-pJtko77t2b*^>ZEUVPPBnr*qnO
%a0Ml\jmX_e8$9t>C*RgAZY727W+EB:\Cl_fG.4$;gEa(/7`Y,DSZ[/7qN&2Cbn#)8Y"io%+m4r_06`Knqu\g=.ua:tMrXa2R9cj%
%O=ZDl:,Z2rQDE!;7DE&^pVe"G'=h/S8#8r@>3-B^k3/LQc>Mp*T":,2BfZ%`j<ns#oE*./Mp2gukiJXpEtS0S"a!La1Z<V!n^C*?
%BZB]bZYCNLN\N%`q.h%O`4(?qo;+)Zm*&Vm3/eU7p29i20S`^NYdDI(m:5#\F3*)Ap=qX@;s1Q[aKc5VUWu_e1FJlM0n=`5`B:OD
%31.%=Q66!k`G)+tFfcB,.naIJ2>cJh<G=9C*SJg[4L$WNB]5UbYFEXs?,7dscH33t!tC6oo<t[WbRc*+Js(?/"Y>^RR^dE\S'0pW
%09D.+,_#$rq;aOQb<ImhN0Tb!``Zek"tD!n)NK(QHq<;[qI14h5B/*EZ%$A7D]?I[3u$&JQHT(&3CKaGD-t?G7L[mgmj^-m#BP>s
%?O0ChQtPsH8MK:0ho@rddQB7MS0u<ea2,d4L!;9`dmaB7Pn*UnBp2$fqMbLqc`5q\`%2YrbYm>o;1O+*!&<Z/2@@f8LN9>S4Acfc
%4f]N_!HdpcFkWP2/*^8c'deh?oG[nr&nC$ZNl`g:g$6YmUB(84!'9Ac"J2ku=emF;7JWg^a>RI(5,W-uo.A,JDH3'*;8*569OigO
%I&9j<ZPDRhf$S1^i;#"JL\Jci!o?%snc>.#QK=SLSt)<(-Egc:9i4)9Wr`F(/3c2;c<#I86^b"O)-+mmX6[g#pM?o,9cV84\(jg/
%eFdldg=koM[KlEF%5g^_5M)hqX.2:`38tou6i!bJk9I]]%X%^eG&.8M`[H,T\pj'Ir>'uK7!=G.Qb%VZ7<2+.f?[,&euF07:R.pF
%qRJ9(Xa]@WFo<9\R7@Dl<nGZG5moln&SH-77bd!deU2sf7(5Kb$UNZ6B<HCUgeTSc`b2I?kC1gH[A<'QqJgjn;q5gO$riP(Ia2JT
%-!1]@.A(b]]Y'p#;qGqO1%/FkrS0oJeDm%0Y+KDB2kR.=lM<NPPG'oHf8.o_lMA%UW6e.^@r]!lf(F(l:V#[SR=@t/@P1[Z/9.jl
%fCa37Va4/^F/\EfU,h&K6;A,lPLfE5N@nU=r><#6+msoXI.iXRB<UXaqs;X.f?X^m[!NgbWZL'9=Zi5>n]`-L^fU2u-(9IilY!!S
%E_jW&]P[VsolG=n2;;N:YNtACc\'d0RB`n:%Cre=cep"%Aub1[aiEOAf?\/,EE0caeDp.BddU>!Dh_d`L.CtXlM<qTX85PT]j\RV
%T6D_J7h.=L>sFZ`$ZRU&ou_R0os5epY,^Aq;/(Ku*5`7B>?sI;0uo*OT<57<_mXET`YA+@CnmmUNI.5!Y+Nre5&6oh;V06C'PF$g
%S%=&I#K,Sh`7aJQ\QAHVZco2Ihi;JP5K(V):tO%Ld0]7?4R2dRX6ga6Ze+k[E;;S\;qCW2<j/$pY+Ge,,ZXg*j#r2`EiJ>:c8In8
%>sEPLE$735\pj&JZ$&(s1j/be:l27L\]SCqeFdnW#A+aj)=.,n0#L@]f?\.YEE,5qdC#QgrI"BEcCqD5qrPUEnAb,tQK)I1>$6"L
%);bh^*Zp,F(X"LJad(@g_ID5AIDb\r]JkTt>54JtIVuT&XdY8uW6P2N,K@q7JtOdu)?Qc,`bqg^&W@!"$pB86Mm:4S;*7uVXjHLt
%6,,&^15h:(r`LE\gfR;-*%;aoN=Oh>'AZMsD6KY2,.e@9pIgGA_sh-4Gb/$Kqke84>hgk4)@M";0$7shpKgP,."=BqTCqbZqX`hD
%rNL:(8f^.aI9g39]u/H[pTnJtWg#I]>sF[mU$(TD2#M?kI%7Q>URSI#k^@d0%pjq?qYfKti_m859a$08pW`2U\TSE9QAQ`;G.q#2
%AYC13jSSo3NRPkf;s@smb+>u7Rl*2X'SY?`Tm1i]'M?R)A"e!br8-m$G@UU!qp*o'D>gsO(VWEa/U+o9d;AjW!H-"'$@2dk.pQl9
%rP@7)ZB.%[fJ4_X0.=PVB/%Qe(Gk14G%S?uP^p\p"P9qdk8%SO<%S7))D+h#Ge[GXlDH`/n`%g`@FSD[Fetk"pe#'SG^I#rDmlsf
%du2Yjg<7J7[[^Ma;PPd&'Pu6.+f:N+56+hSM^Tol5IT3_4saS:k;g%U:ASR2/&ra(QXG_!1aGg-HY_27RW85/HQPc3C24ch>tH[(
%AA>:rM.%YO:!(pR[NOt66/0dQqXs.E34#Ns*(NrMp22UmEaI'T*A$ZQPtK`ABE?R=.WVjo\d?4IPu'<P*ZQa7MkRi_IBi9Y@k604
%,Xf.&SO2`8.jZHY5@`.5?@?*M<5)i2NaI>Y&Ma&<\1kD(T?5oiV)We&Tq$OV%B2Z\6BT1LT)`Bc/j(f07MI_1j*^h0rgAf*Im+;[
%lf`9/Q*%0TicFnR:jDr)IS4UF(]+4#6OY@IF'\"BYTG(e&%Q(j+io+9kC:&Ulg0Bds23Ub/,MWjIYb,m^XF9b_e>lUWOu1rD<S,b
%NcNrKhr6NE4i[NKgCRdtJm8W)YlFllg>\]-:;YhC!<b$8KZ%RcP%f-`K?W<!bqnn#!j+nEQj>rc,E$^VZ<82&,Xc[Gb=Mcd2d?S(
%b1@!qkEUk;!"?7u"TNj?-B9]BPMk1gYjon@bOF+3Qlt6$&pNHi6BFq=6>(SkUH@ah/>&kWX_tdoeujm7"o3d*^^uWm9"/I2D/Q7O
%9B?ifZ]d`nS*R<Nd%E\B#PqRq0*+[?Y;Is(qt9>FEZa)mMT(0hUr2ju`kG"&f(1X?n[j\&:f%2!$rc4$<)4'RXon<2J=NZA$)6s@
%^Y]B-[CdRcIsVa3>b7mCPBKk$;A]85P!jfkjp1P4WdO&#@'.DK'AXeKe]%%/Ymg)flU;r#jVM"hqA0"`!W6FDrc#*Orma)]5Ce5q
%P4cfeUYEK$aObGSSn!ba*^IhTpCjT`!AL-PjetP4ERK[$F2#)2&OG_Q&\dJ]6UDI-Z+h_en4@IrStYM`(IEcaKm]9IBeP(9JdIh\
%Jl4f+&-XG1H_'TE?4>ZQTIgt8df1o-=F`VLL/+S4Y^a)Yp'"&7O=Ves^jXmu0k1m^U!O"s`gmRGN"F=nG1,SZKa9'[.E3534@.<:
%cYRBr;\[i13?`mVeJ1?9'+o?fk65u(L+QeXo1IaL&b,0.bS9!<nL>(_:nV(2,s0cI"V(0t>hRa^=kGsD>QK4:B$_hl0`fo&gc%p8
%lcIAoboUD78of&/R?\,;Hi(lY_+"l$dY^`t\UAZfI2+;6UKo=M+f6p+*$=VsRap8oE,]$pG.b"Q?s6;Yp4`Vo0/PjOG,0(rjTnSB
%bXBt@A2Y$89K=XFo\`\JKnE9K&"XRCGNc/7#+W7Wg.L4Dkq^6]PW[2;E+HP?!NLRk,ZhJ#NZhK[&e:qr4(@HS=)d_0_<0*s2M!qo
%cQcJ!Yn\Qd,=2n*UfhpqW7&j`lSuGDbjHY?TWPDLFj',1/A/N_%+\qc_I5X&K3;(U0M?C-fa/\`JBd(/lqT<<CN%[1eUp7g3@BB)
%5'LjPS<'Fn)t*/A<ssAqE7^7^o^cTp34QScVVF',Or+iBF+Z$r\*O-;h:9=:D=8c,2eU1;mFp.J8YUKSPt*JPVb&<WqmHY2PX0;t
%@2FXr`;Ak`$;W>QUV72_a90RK#;eF_kEjpREjHu1De``uGH`IVcQc##KPSVbk"^4qH>]"?N*YIZ5>B(3P*u;D):4,P"4eZ7!i>D(
%q5g99iZ>"74dfTh0*3[HT7^DWDC:(3!Bt@Ld7^d7=qD+&f@*0_H$Tk<^2@lfJ*h[9?5u\&mh>=T!2?/-e`@7sdtgI9N._cc)CHe=
%K\>%hfo*2?E\>Z_S@=n&3>%C^WiMgfeXi>bDiB-EFP=g[aF?TI7QP&:^OLoGIkE$J>ISCM+N<B.NQYeM\hGIY(rkeE/;s09`.nR"
%#dZRbd@1:VrO&-8Ff`Qkcdmm'JD\s7!su;p^RC@0q/10kFrDkbY=kp[=A'/5mP',<5j:Kq=@+H#O$\(L_;:t.VE83uQYjN=qm.u*
%f<\;spsRp6N-X6$;64?2=Zag$f[3/a_MkSIC#_)df]D.5o^.+_^elmRR-h!/bK&XkCdA5Q=l=%IjuooSESFSVT<g&cT6CLpK$XlD
%Qc0#dgRPUSZA:X=I5'SiR+m-l^NcJLJ%ea$(;o%!FCrqtC/\=JXFeSEN>h_9Zpeb)9nrZ0=F"Wc&C/O`/9[e;]=,K$EAF?KZ1Q/r
%N.%.$Zl6o?#0P"9QjiSMk4Rl@f>V:YZ#)SDa9tgGs-T;&L<\)VfVtr3$b)`H]oQ>?/gG</@!gO5TlG_@ib0@ph<40C+_2to:/W\3
%,XDY`Fou?sK)lD;T0,]4kG1l9-!`XOB@:Dp/M`=NbjNV"Sg0H4C??^Pf-@?<oEI,K;f[5!YN;bb,oQu`g(X^<0.%'OD/K;-S7_O'
%j$FNqYp9.@2L%V/SiOa0.X#.FbdSZ%YCqe&Hald=n,g7X<F,!5G?N9@e4%Mjl2>.F&jD5b;59"u)3S$e1sj$Q]:cREPb+6LCR0o(
%c+YY'qubuII2@IHAo,od$:Xfje/I0=#-,5GQAFco2Gr<S[sY3DoVRtIGD.oXI#("7i3pAWqk%=ue?M)!/hAcHN5[ZcF(_,b%'6cM
%*l;^?hb"C_<o'ij*BJXi>,"BJ<l2>drKH)UqrY6A]U.;9_XoeU-jsB+p`$hpa'u#F&Mc8q$'m`K!m74Z4<f$E[G0olDQ7gMSs_<+
%F2oXb%#&0f5g[K&!<rUrYs\WMVuT#F.8H?`io$p_%Ng%96gT2m6K,pgd;']HT$dt]ETt&jeoRIbPYo`WIWQD94ldX/rbif:QC*E]
%BA.H]<V]+@=0h@O7k1(?\hUl=9D:-qZ%^\!ME^e.dX<$r<S_@h2)YsuoQ5lGjNK[_VDmb8Yp8\L1R$2/>a<ESAc@M=[8r&QQ52qH
%"'&PdrK'GgXg%C5-LA8(C?D`gQ7J%I$Y0IA#ijLhM_smM,MO[cVpUr5L;`CR_@!,U9!rYQ;bG]9c<c4^ip9?==L0o#bX>\t%BcKI
%(offJ5hl)-&q#0(_u::3^T>_`a?'1ZO#fp,3*E4Dl$<&7I$kqUUs3lPY]^Pj>.+FKm&]73RVq@0TD@Hn%tM^Y-PoPn%=@n[bNs&e
%BD251FT_WC8Q2p4Th[=57mp:A?>c!5?22'S]Y(L5]F.H%BfnQ'cEro#Wk3W$99!j;Wg!"jLVc9uKlGEl+70QeDAPZgb%XtJds7r]
%1p>N2.pic)$QB?5#Kcf8i1n.1`uki940q$f_W]b/,DS6=X#*-EJl)L6)U&YC/uhlbdfZE31h`rjpc@B`im*ldZBcqe8Ic]PqhXi=
%?1"6#\'jtVnBAOr(Aa"_rO0/KN(4P(oE_DuKUc0F-18QZ#FTC'lfh)Rf!n>-p;Y!pbr[a7NLFHr(RF6fWl(^A1GMU9C?B.!WAYVt
%NPK7Y@UA^mVj[DbZ_ZZ66FJ^`?2.&?e02IsF@Q6n<6Ma`iAU1)JT?]pX7^,XFVZG:.'pD7ZW:p`I1"4@"C@Fb\M'R5g?O%aiPV`[
%?%p%Bfs1AlBXMHI$Hj<S=g+f.?q>m,<e3:RAeTjXc,WRDZt'(PQlL@5g/TJoc:=45a;0aJk29;M%13d)*4#7H1dU$NcZX>4R^"7A
%at%b1V(#/3e^=S\d9Q'JB`a3-I4e7&mn^ogk$AePY`gYcn_e?f3;.4+?E&>.V'dI`,Ld"CoBB%Om;1:I3K5p%d+"Y9cZQQDa1GN?
%CTGYPfj3+gU>YOA!IEP?(KsP;2c\H($-Gp*:g1$/`dbm)fQrB5*h?b2J`(Q;V>F,6`[VYf0QTEY[D[46.`kVZZH?#m&nCRpqor`>
%l`PkPbhXX1&!'^,$.=dPj!pkiMkkPKhf_-Sl?M@nrHhe6WtN"c&40r:k)mb#<*8LNfBIFT:#eG\Fb=Zpi,M5a<^(7^H9\Ql$N@8J
%Xdi]=doi)=CK;h4)72AK?YbZ=F@+!ue)J46PGT$MT/,X^+OBTlc2qa#Tk<hMVDB7MBcJY0<I+6mO+Xq?TT4J0U"pXb[#[%in*l0V
%&n[7l&;i7OfKu;;(;N*6VmROghFp+jo&t1BI6u#mf8;PFh(mIeo_2uFQPT;8VXEWFbV,a@>11O+h^s@68#o.V=P$[-n=A3gQ*Pe]
%H@&[ZRLlgd*DiGKK2<+*>)t(0IOe*c9G$cKgt5q)@i8Xg>Q3fdd92oE#mh8m3hMlr=leRp?PDfNl3j>E`&bBB5HFli&"_O)W,+$C
%8SVBA/pNb`KM)^lkY%Jl?XepV=n_5u"*$dUp*lMKG&oFqdoCBIch@$gqJGQ]R_AWFm*Yq`,im_]78lW/D$`F7%2C.0a7FaQQ)3)*
%KZ:3E*@rQ`*kp6Ma3X;Wea)4W:8)7Y0!R[8R"bfSN_/gY7JG:%kDkQaBkoFePK0)fG8,^'8.`'XUser=>A,.CV(.UJ[Z5=d]'19X
%@rqEX><Lei]g$e4Gai3'3D#s3bTgbd49T"Rg7RC5=.Wu]IAdoc:$c%MdVC$"5&s/qNNEiXM1hU'8tARJ@JSn;&@?\$7P1,A;$(\P
%+[LG'+CeGZJ)bOKM(4k2e?IM<nQbSOo7Ur.-k'4WJ^VE^GLu\HkNV:2e._YRJ4uP@E?CR]DZ"L(Cq03!k8r@H?4nSCh#n^A9j'T]
%S>*Y\;Kg_MNNY&XZZ1E+A%SbdDs?[>VO)Bs>U$5O&ic)A7rsFuFFK2m-#7pV$JdP=C$LHR5AftjKA]qAacWX<\Q9+<cD1+V3HRUD
%Xh%dr.N?U7-PnKCY3(mQ^>%E*U\=!T'UuGO3l<HSA9N!;p/.qBVV>MunGG^jKf9U-Ggg48.@1ue`/\7$bcf^]M4\q&FE9VVD;5Mq
%9NmR`YE&-oY(#\2:>'7rX#4W=?l7JA[Ei@0Su4/R^fl`l$8E8_8fo&*r.")e,\dMpO7>(,QpJCI4nGtdF3)%+SpuaKD%=Z$>0`9Y
%""5_3Lmn.E=""P0Uq.+7b2]XC+k;:&6>SZTOQo/#iMqhE.@SAq?*YCmeV/h=[1"7T\e%`oT77CqeV/g:a+odDMXFVh.AYrIWn,ii
%dZ9KI@=al%"]E\UHE"S!4#j7:qX*"QL:o?bGL9aj@78a@/=#K`a5q==pN*u%Rg*E503fE#JmQe'OeO:m0dU$b;S$VRZi=<mdbJ+b
%]>(g:K2.74_]6FO4U0Di&Hu\]^KJmA&:@?']]7]Ob[><b)>RBHlV9'1lu&(=W@4.tE]/:`dZd%1X!Hf:-=0JQBJMe9^Yi\YNN0?F
%iGm-=A)(_d'NRM5@1J'$B4b!TAe5M%f"0oZrn`87>LgtnltgRK`6C_T=4.g%PeHD]b?;P\En0R/Lqsd01)#5KY1"c3E/h0E@%sXZ
%2t:kVZgLP90cE`+NM*`U^^WGJo2?8X^tSNh[R[OP:6&LB(Oq2^BJ"ZuFo?]tG':DT>W_ZgX_UT:7k9<VMUl]`85EOipq>q6\CQN$
%eNqk_Wk+]Jn#<m]A)/TGIB'lg=8&<Rp8[D`lc8S7.Q8JFHQ;:8Gli!>j2B&d*^Et)V"b>.moaV3KE\hhqe[L"3MN^pPqMF4L#Tn'
%.pX-s:op-=/\&Qi9%r5r(\V'ZSRL7mjDZDW^R_OWD\%mFb`/HLN`Kt<N*Jir5<!Lo#1h&4C?UVY9J6^a]3!BZJ9U?-r4k+&5>cZa
%@?)P1#X;D<CX0j=40m0bLE!/s9\A5e?#OMe>`cnEEVi>J]Vt?lc&,I0B\CZD/AqGJ1drXL=(YnX-9mPo%:aLBZ[f6[7K,oVi"K/m
%SP`cAPk4ANVT#7&1[EuN(CJG5E=MKkR"KSN>;8S`KDKG%M9s#6NQ\dj$<8&-3/Mc<6eUi6$B<:Kg1B`p9.d:G(H&6j6rQ,e-HGu?
%f)+ZlLX(Qg=D=<E0:GXkA#J4'oJJGW_#Z$FX*30gXQjXbr*FQd^,?n@0$WfN8@t^QRF&CPF]D@A%%&&)4)i$RZ#OWdTFkD-VUF0N
%/UVkl!c+pk>d0RX*`qtcM!`9_])Af?a'&2o=ALFA3/LX_.^G6'Aa?DFZ-V"A!IGYY==D13BYq>2YY2/PRibirp"8%SUABpdG8AHh
%G)ZC!1T-sZNf;cpUFKR+(6^^\X(q+BKGh$X+UfC^L?Mif])E%%V^%4S55cVR2CSM"o'h9.?4^:6aNXT*'[l(T&$e3)mC5Hg*B?d]
%LU7L/G3"Uq+4<&\VHNP6`(E*lG8mp[mbh;+*r/s,D:%g:`,(H9X.A#e`4=M^8$"AQe^Phpg<GSO,[/6)cki*IpN04\dF?gl3G[=t
%X1XcUfK!a5D'@DPk<2NJ%4m1rm.ELr1p@Oc[Jug8l:2,RV*Si&FI/mq4e['C`826r9i'tY#U(8T<DVg^#gJW8C4*5O>u*^m?+VI-
%6oVY;lNt_2+"0:G>t\#hmsZHT98H0,Un5A29tYPm>-qJXb;Er!l"M3$rZ$"TNrpqjUBgq#0sU!nJQ1M8ImN+a2eF&.RWtI2fa_!-
%?D,a/VU`7<?%sde2Q##P]mn-JlC93eDF[=!WaGFHOOE)p8Ehe'o`#(Dbuku!I3U%C&^LDMV"D1Xre6U96:u_NV+d!!jCb6+UkJ'h
%r<k(QcTk)UitJng-XUK[:C^.[nu$9L=mi?;POE>VT!RWHe>r%S=.Z`4/l-`;ia1<=mqhI5M6uaGkW@PrEFPWo]C0R>a,-"0oJtL)
%mqfj3caJim>s[3C@"gC-H/Q:l8lugc)2bJT_Fd:gm6Ou[[F3:31Nn-;3Se`To;[hk,E=fN:iG!/<K79\oWGkqp"L#-)%>nB`/Wn*
%RLq+!&RDUYf0im@)8\HH9)kUP._.-+GUk]`g[k+$Xcn=D]/3X/oTq,:]/3Vi-k;p+<P*rbqRr\0%]TijOCqXd#LrsX5i^$W]+Z5u
%WN]"O(OP>FdI+]X\V^D/2"\/'W,2jGA\GqjRFk_%*F8VjGP$qXLt:(5DECA>Q6oB)po2s$.UGQCGR4P7a6-5Yk`!kiY%a4AX'YZh
%-U+$kC)7P]I2tsHS=D-ccrGs>]=C3upN`f`=G=0T!3G%4<N0&cht=S&7/(2)HlsT_Knp?[?^E+<4q1=6@G\W'4ReVI/\^?)ii8cX
%MS3OWJ7$RU>%$]g"\*_"?X.#ML^`_ufunI"Zd.4GU2[Kq4t0^Da6+1Zi2J/PPY*<AVPo_96f3'ikt2]?/ffRVdHT@>Tdsd7lt=[W
%S*K.eZR2S"A5<sWOKY.O9?tDP:Jmk#2Wn<3Y&hd:Bt.cr$>.aTe6A6>[a76$_G0'SgFQ?OEOeLY=^2fbcfMSXh]'_[j];!@fGW&t
%f"b)u]*>47l\hQ!`"<`c9(`j2TO0&4n'`4af$:bK)bP1dIF%`_m,D]'b[%]5a(A]13kO>t?Y0=UF/Rm44jCmXC?/EfljjVJa)>X^
%Z.EXp_aqHSFD1PnfJt0.hd6;pKE7:OesTr+mL7;CJC*LW7s'$[>5!SK=ZS`Em[e:a^W<;o"Oul"5%cm$LJ#0+hU_pbQkTO7H"]f!
%:feL8&<Df9iNd7LQpAgPQ3,o;OE,_dC<X((o@'>d6o;LIbtWneM-K-4QkY)?es^Atq=QM!#GsIi]@`X]B!"fhA"QM.iaEoK%$3NB
%LjU@/^cH(#7Z2ds.H<kX(G2@5MPdn4e_8.7neKV[o=6$E/miU*\6Np-VT#rlf.h](b?$0rF\[t]49AN32aj^pH'+XDFaZUkn^qC@
%%bGfgA;o"'D!>%46"%;>DDTO"(Gu\0nbK3h9A]<LECH@Ark`SSH!NqIkjjJ,l4Au)nqO)('"g`0C]$Xa3@Slr\SmgJDe(@442fB'
%"!Dft1Zs]k*IG&LA4]?lf=:uS8L@bEU*oXqG0fr%jlp=CI^h4\AC(E(*G(D@.:mKF[%g;=0BfL?KQ`SO9RhmlV>9:<YCn65&kBlU
%[t_+8Ao]3)UJ,-45GKa&*G#lTM!-7P8nlbTG8k(dR.K8h.J:>,3JT[G'[tQXrWm:Xl:(B[j,H78bouNIj`dIq6a6#/(&d%RPHgeq
%N6gHPT8X;ElOdBqfOsuJSrVaM4r/oPI3$-YiR-lqNp^"l^5lRFjouU5?(7\25amg+`p2o0#HOW]*+-=F[Ou_A;^ik754Vc6#o.i,
%7W;@FN]6!HRD[t7OY_/B3ZUFX/%>1s*'F[SOr:M3A5E[$>R]n(Qc0/$%!@GT0nTrD)i3FR<7AK:F/eRC&pAP)^@l!JIugJ=)d%Dc
%NS\QGI4[I;;0dqLNH];K+guda%T`K3eilR:-3o-cIb(h':q&';(Y@F0Z&,<Dn@*5GK9^T^lcmo-e/MN&(4<o,M-m9?h8($-"r<M`
%eko&Bc_;is^;&Zd3K5HK#1g(Y]H$l`[;P!\16Y/9I_3;-Qo9"`,IUV#k0@0iYhnu;d:*^[l-_N<KoZZ$YmfX8^$R$hDPI^\?g_bQ
%)=@a!I#MrN+.7@q3T`aaG^R'22e]L$Ae8>;m0t!2P()YEO:Adkn<)\@=I0%eWdX`bBP0ms#.\9,>8#!%R0U9eet--!>iJK:%Sk!2
%*%T>Ff?3]W$:T?bm:<_Q@;HBK/D/kM;7?bHn&++@Yh&0iOg"Y+hZe)]98KN5Ar_7SB29N_pg2udE3nOqV'cF14l-?G/E?nr%K-=L
%g@u2`J^"C1F_p`Z=AupsR>/s[Lc#o1];+tiD=eMI.a8N]0d3#2;4k*80Q3cq6R9F]s1Tqf%!-Q?cFR,M@j`K$F1.C:M..1<namY>
%>V+UdQ[dFo.-'>TMmW2u0Aep).8P%1gGX7_>^Q;!gq`ZeVP(Z"=UYIA,D(Wl6renEn%Mldb4Q:jR(XRB4+9o?BCQ^D[$m[bG%bFq
%nUVf"%=;guIgFe6DdrC%%@5T_X&!rQ;9T(e=BR>]Rs3'+g"&aF=noA5PO<alC3a\7'QJH*"q7YN6FE"!1V%]!2;rl1?0'*n?#ReB
%Sq2CLgTEJG*UWCj=7<:N_?Sc<mB>@uEt%a'k]!<1QBe5_9l,<q7n!2t\A8D@hXV/8hgick&2:pDd)<O+"Pf9GN=+bdWPEd]$Tml$
%&U&QoAdi'!UWB<(+tZhL/DQXrfQ!N(l7QhT*-!;-CrWseTLEn!GB`0@o?-%?ki$#0:e\mnbnZ*J&1\GNJ7:5DN&5DANO,Fj^0'[;
%T\E=JP]qAY%FLJl<J=njG:M%c\V)P]0^+D][(#OnBN7<MDU4[2Hb'33kT\bC'krhel'6[%!UJtO)"sf0.ptMG!9<U5HbTXU5$ZfC
%E(TD*q8+G,As"lS,&,`VAbhqUP2,eQKhMH_rlIB2qhIi>f\/RA]*Wo%--[N$_52dciDT5hL4%oWl:\4H_khi@bLKg9.3<[i0=Xt0
%ApsZL#+*uSU)@<(D1bIg>BUODUkQ6m\--SSSq$K`A%l0WK]gE:>X;(T,0d_E8%:r(VXGJqh81Jfq"h`[s#s]a6?%e;j3.#eBc:79
%[qg&>9BpYS4Q-q-Oo(+ie1FqB>-bhiRKf+ADfFkAQeKhH\tA[*QQU2b>TuDbIVteO"ICM@;>Y?;`c-bXfMW&]3m8-fOiJKO0BEG*
%$MsI_)dHi"<r#/M:iNCqD8_GEE(RbBP:'U%$'XZW!!JVoO6%"Z6\e=iT>,$K<0D0Cp@H.#AWS8u42N:+IEO-MLQY%sO,/2AP/8nu
%_PMom?TrFCY>EFh=@WEFBbljOi=b@qK8*k%nojDNTbtCl98(<k&(Zkn9Dgr2SDb+'Z*[mZgYX(LLJ-MG'6$N3CWmGE.1`.8i=^LX
%.L#Q#\F_Wt\4$5.IN4[^>UgHFNZODo>U$4kScR,M,7l5'q8+Fq;p#t1rCaei`8M?D@Fll3lLmNhGRRRQQZ1Xq)8[[\Z-"l<),3-]
%MHRZ4.=!iq+1T7;HZFj6Kd$Sqh43G%+ii5I$8.20/+\HfKjls&X5AY),l)M=D5Q5hlik;^i0'=7WGnj0e3@2Q4Xmn*G_\4*\5[_!
%R6)(l7+/@cmU:)!bJ8(RiN]3Q;V#e9jdp],E9WuW*c)6;%29>]CUj#?'+YlW?jFC2;L83ql9"ND.iCMUpg4gJ2RDo'*T7W7XYU>l
%h%;:047>2I-$dDRIbr0W/h&H*4Q-pTrN%(:kQmO%%[5R5+!';QN_?OK?jSHJ9duu!9,1^[n*tON90ZbZLJ'j<#VONgB+PFDD7J*O
%h7#]/'$[\jE=[[pqh)[1%?KTVQh4Q75I_uP#BPSlbbI8kX2,+P`&KZre_k?'dU07@;W,umY28Wcm\j[VlMY'0]-CCeKJoZC?i*BH
%95#?jp9fr<\>4#>0Y$cNIqn'BY2N:1On/g09E/OboA>3o>t3,sIMhJp/j0VU)EGPW>[f(;SaXR0".-C(3P'`6H[Wc-,Tb,60"i-$
%,r<%Fo=)pQ/l@kqS0Fp\\>4*q8%?KJE^#Ub'O9WVlZ7eR**["WQTD^((Q.ZO;Q1)klHO4CAc=Ym64u#fn]W(F9>DikK?Y8dnX.5i
%_PP9SMdN[6-[3$fnc3=RWPBC@pM,=]_9%8K^UjeX,U2Hl(*AF2i1?_WD9tD.4`!ga8MYrQPK:19QXOM>iC(u@h7&BLr_rG5_hN&.
%ocKXQ$i.\nre#s-2X:,LO%VE8/XA$d(B7>N'[pamV3]&52>r:LpJV"+cF9pqke,#F(!JB;J$;K(qZ_+UD;T4I9hSJk?8^$D1eG+2
%1aiY8"PZ$55"NkKIkL9_^ui'h=:t9YCo1JZ29L=9%bGD'TU$m>MH:]p'rS30bL]BOr7*A?$r[>D`6^1-^mDWV7k=qC*_jDI'%>!u
%3*5uhMR17qV'!Onj20ZirRZ9Jf+#?>EH!EtA'\!c>MhhQc'k1"kCd6&4.u#GM%Aoi\]k%6+8J7%(R`!A@=OuXUqfd5k6`?GH2i'O
%?tFs*_1OHbN!R4?qTOP^hMuE5a^D$m6:MgP'S`Sm".=Y3\G@`p0LhUr#Sn*iI%:9?m]u"(k#%-VUo%70V\gAQm4et@8qe.4^g^"8
%YYgS?KBBiUh7?JB9$C11/eG#7lrupl=O_5#lH:9I+&#LcR\o>W2WdogT2.N=buRL_qLDlO[\,dJnF.O+Kcl>EU!U8",7MItW4qm"
%qs%n]l1X95I]-;7.b#9c/SkCcnmV4Ul>#eQhd;Zk/me"LmU(\qL[#8Z9C(o;[sW>gE-X<?Mqq9(M=[K:`ZtNOBR8\8l9k'k0e]Tt
%'7J55G&A,2J#_t]f:W%iR'48`0<OZeHIFBOQUVHM1N+i"DHj.HCEm)6RQ7IfhLEni`HG>?9P^?qq!$i:7eAe^2Q$#(iRN].pWL_.
%[j.(XY?7>uR(4=OUZk36)i?[D=S?@_am(A\>!<e+I5tRNY&/VN(bSOQNtdJhYf2%/J#7rJ(7adNM>GlhE;B5%m-qslkAM3m.mf2"
%9Ies_G2C8$'ei7L"6ZG'hq4)5T/lPrNJK3]:!4nh7*mF9[8E5KfITInM;iU.pudgVhe\E=-*T#_,1<=-XBUhs4TS9P1b!m@<4_K(
%T^'X5n\`#&1FE/_R^;Vgau0-?QP5H+Vt2*.do8QqeZV]1:b(cgYK^,`n+<(#<[T_"i`!R(X>T<Kp8i,!-q((?>OR&7@W-A%ZRH?r
%,o);cDBV/[8`Cc#pIZEA9@@?mk=o[K/W"gF#X\d4A,0_gLqrfB><s9rIJM>h#m9pM`3oV+\W(C>0jH6TmA2B2St4e*5@d@2s%HCg
%s.rpt#ZQCF=R7]IIo>-3WcGM#D]@a1q#'Uf1CV'VYL,^C`2rh&_$`u^0g(Mr9if_bAj-Cf#C9ZTlIl)$+],'3`ihnI45h]&G"+(3
%'7BVF4n#aG_\e<u5J(6ggECCh_3`0ipKn;p#q:CgD\ImYOKV!1,!$1dIMn&.:=89%5uhD+In)d\E@"(]Y-?PW0D1qoLcf"&Gr=U3
%eRh6LH?R-;/D`$Inu&K/:7mE2T%d76R-WXE7_F6nZhnC#'kl4E$Us_:'O_b_:WL_p+#)FK/"<5B8+oI?>TIP@b4LuLi\N)M`=jS3
%_?OZGCtpZ#/YZ<4II!m9f]^=CBN?H0cG9jcr>MZ0D"H`Q^!r$nABDYO^ODf^BN(\?<9Cqrc=)T3=5aC:SW[kTcqicOh!o=5Fjcn\
%n^Zmck?V14#Hpp!DODQP*aq9,rSIR-boFPA%V'>6<YQt8s%k,(#!:pBd)2!2kE4:61\RUF^$p`7E=\,7ls[o=eW&g1NJmSMPj$K,
%UNNLp4o@RIk"(?BH.Up@Dt2u?jI#tG*'ZG8C)g`LhRL[?d5WTu)Wi^8<i;k`G&XgCnYZKel%@uPmT!\DHqnN;<QYPu0W@5EqTD>Z
%phTm30i$r&(LZ-JQ3Ef*9U8+PCi+>JK#2^)f*:r+#3t&\e[/A!gBN(6gC"SQnobVD[LC#F*\Ae:Lm,dDf9uWX1b>JC(B'NQ92tjK
%<u:fe;<$PS,2HHTe2tbt9^:&+;pK21n$Zb,p[N?:G3Zo4['qH=jR>PE3.;cIkH]Nud#D1s`EA7V\5pr$"?+q^&0's',JHIuq(3*M
%)N]3'j8>tmH^=j/@D^T1+/[B+'(4qB$3&V"GlcOoP:o8S>rVGi;TGPhX]>$:[_M+J=KobZ(d#IXlF"EFJ$U8Hg9S(e(YP\"2H/""
%[T<"R;GI$SX*JQQCc,44hLbSgC`YfJV.$t%bj>qU-I0`CL;1Do^poPJC_jmnhKjc!>BP\4(D$M(_WSWZX?ZXXmF\CVmf#NR\4>-'
%%g9:#X?:;K`dEgf`#VQ'f?^A8j<H`NeQNYVeq;:ZOWTM['793Vg3CB^;i,5MBlBq<iYABD@H%.Ze_]lnjih]7"W$=.rk*.EpXod8
%]ai@o%:eGZP4/%M[MZ+.\=g6:k7bUQ?s9\pH5Z]C[Q$$ZS_CEt3p_t$f"".tO^2<'Ql1BI<6"BBHVUpt'#?m:"CRm+>LM#)WJSK)
%n<A+q,:ot/0%Z5*U&>ShBmp-H:78j`<Vu>4E,..urX'B)_gih(dDi<FXl>CF/tqrNr'rcd0O%8Va\FO2CtgE57U<p@+@1K1rZ8UW
%[3eApIqV^*au!6<Drl6YWP'8SZ^7/Qs'rJk"o@YuAY#sY?g8u06Epf\h5cmo7nhj3/RI8ghD`d\Ie?[EL=guMpb2Uc6pm7\%b[EY
%+!+=LX[;7os7q0Dn\>(t5Q2>qpO@t"nkeql:ctd34M<<'?G,&Wgn-h0I:s6b#Fj!:p#VmhTidU:a>,VPK!q([O9ngLdE6P8m6)te
%6OWD`K>0]N(*;G<Xb(9^6T=Md%fCgY@.Ml7R_Qb\8,2--OD+jSd,0T5U!9:k'6E@M9@t\<Y%P71j:-CCDn&[&&)@s_a"p'W6.),>
%c1R(CG9*L$]P03f[oMoKd-4do?n!Z\_HP1)E8AlA[&-=aIDZ@8(MPXC)GT=1!>B;5@DVOh*K3Tu7tq`^%TWeu!mfG29o\9p7d/Jq
%P$(^S.VGg?7]m=1WWNSkeDZ-'1r.[U9oVUG@V1l_Kqr_jdi93)S#D?U#7`K5[LCWl2-NqV78Ok3Uro/rPBii;dl/hP>+X\uG(;`4
%I)D]l"g+cO+LbiM1autl1n)SAUA5,ed]d\<?tQY"\cL"iR$H#O/)Ydf[&-S+jn)GrdqCLTMq3FuKm`5p<X+R'd3s]re-2tRe"DB@
%,+?ZD7[&,&D\c&/f7j$/]'RJa$>:`rL?En%Xf9bNi+U'+U<K)rPBh-o3MHfi//=)F,Y'\`e!`<,S*I4Xj64``dUZ[_`H1iSEFEb<
%Y"MF/j3p]KRQ:n!gI+tcdqCM?>-FfjQVLokQ;;9F&p%7'RMsF.@F<gd7qCI5R`aA/!@Fe[kEAkqR3QJj>#V1nM5J=IT2nU:VXia9
%LtRiIgP^l-VH>j1f$nDqgC2_2aLl4DR26_W0L=m+-MSu,,DTegbSk61Ubt#5#TU3FRY<M8)GT>4b,?q[[F>aP16'BJ6=QS13[&33
%713K;bg>GbT(SeJUub!AA8u>iCdugn-3C58d$bk)dK\N*-+;3#?8_%RZ'NY]0\qQIK-TH-TJ\SFa>;^dP"Fe1UT(mc+)K6N-o.O<
%ZhSQP_]`\f7DmobT@(q/ntsgA]P9XgY3<dkl%9\TK-96e/7])%Xf9]US3>UB)_,Dn+fUt[<XEd$'MsrSY_+tPLb]ciR4tpc!kNr"
%KVfV:g2BFObQ)=bKsVC<V:U:\RN>-fb3OS6M*d:J)Juk^Mpr\d*FOU8@BGi.l\+/c!+e`RNrh%iiZ`RaKp<#&[dUMJ(r2#]/&lDG
%pVhfl%+fK<A0&u4'9gn6M?]4L0T1u":$,0FBmB_l^tqh5Rg4RRg;mWg!OO@t8lMMCZF)9IPql\b:#puuJ\*aj"P7IE@o0Ji`Zo1l
%NJ=*_p-P1RSYG\_$;Ll]V[rY3;*CQH'Yoel^.)mQ1k]tP`@>dE:$$66)/6pMLI(V90ejm5N?U2>_+483&qOV.,A:5_frVYJ&i_"%
%!Z3%-19i'UKXh+3ZAAef-M6Y(=oeFBeUhkeA>Q,a:qlIiY)O+5enM1$.N3jW_'m1]$pkc-$iXR\@0h?Jj!%mT##/c51Xm0^Q39#^
%/+H?S;mbG9>rL#GPkmQp!5K_]![od#!gK[eNU5Osf4%A!]"e^u^H>KQI<iE;^DSLQ/hUCZ2RW/GEfN^KrC+02`GH05V6qi>b1P@_
%#^DBI7j[.MK@9nSpED,F(ai]^D;4`?j1aV9I$fa;F(7f]<Y7)G!1[g"ZoBYQ#D>&^N=teZ^aWh!VPEldd\q&NGnJ8@WlF[M"9]%_
%EJTege'T.i*C^\1,Y;UEnpHOs^aG;M5"JO%:sa0KD&[X!8dXM*#Dpbp-oFkbA7j\b+GuQ9N^DTd-piWK;:o[dlj^!-YQ+s<OB>(q
%*0S3?i&S6JBUGL*aUHnhYqneZX.5PtN1fo=/kDG^'!Cb.*b$.'.kNg%34A$Y[S%P-AdAhhG!rbXEdh,nmjVFY/[p#KJP.W:7P'80
%-u9Vl)FotOJgAU4[[o@@DP@pIehiE8B,DKdEe5IMVM8ph'0o1<mhUkYr4%9qcsWBMJeUX'EtkTo0+.=TF!V0u'V6oIZspuZ(<`aY
%^B])Q5VKXt@9!ChV#PPEWa/E`!Ifl3JCY=mJ8=BX5W#D5hpIhS`1#q(4V5.lpKUA[]r4g-lD^;"4#?/Ji9O[h0@>?dNH[Oiore0h
%]^$uC6r#trRn6u""!X)q*1!S8/o$WcqC8E"cHNj0;DfT]C3mTgh<,JS]IpY;"V_F]K3Cns5hrU$q)>Q%nj5e8_fuLY4-2H*,m%H[
%OB[s"Fr.h%nP*hn<lbu(]S'f[11CarkGYRU5oD@JCYPX*ig6KY,d<6$+hebZ-\;Q)o/r(N&2`DRJhRa.^V]\Qa/,'?E#=p@U73R5
%=lI("XcqX:rXJ`Xrt[WK.4WYdiKa6$TtqMSA.I/;6Ou?QJ/.^!IWr2KIsL_Un-pQZ3;;q7G<qTG'Z`%U=n%2=je7=1]bG(m>M+BJ
%id^XL8jMju[1]]B:9=r1Co*b*/%mK<l/pMg-d,QEH*oENeRRdMHE8Z!O-S>^Z*IUt<aMiIb&[/W]r[eHMTp2/=RWF6Ku9;b#QS]S
%LF<dj&I=5'8;-B20dqXX3eg(t-sh`-Q8h0.30K@l#cJoI;.r?U7AU<RV$+=/'%]eI8Q'dD>pmoDf1Ie)Y]l$r:4gkg>LT-2mmIJV
%qk=S>+jgXb_MabBlpm@d%5^8d6/s@35((soq@'9qm56^F16)Pc1\7Hj:jKHR189)gaid>PTlGeLokhUOKY`AiH8$q]Ge@\c]SV)&
%a'HJ6'*_(V,WI&J0qR!jaX7?\<7rQ,>@9plSX%;%]B`lect48dKKLP4lcRj&_E`@C`B*G?()at,$*gQHfZYOl")C?p5tq%OJ.FQc
%A7eMlbTZs0@!=1\/^S5HU2<NL\-W3GdUYIadCbAAD5`R,4#mb\mKO`UJED+6L8MM)B_\IfEO.gU0XpA96-PGN\?=dO*n(d9:'!^,
%['31i?Y5h\%,gLAK#hou-r@9o6OrZF$3NfBEA>7hM-@NaFkn=$WD))6is+u^)A!Wo4/U%;"nO-=[.ZstB41M%J]J2N3@9t*R%Y_s
%AM\@7@RQLc"6Q8ULmLajJQ(D[)$)[T86FmHpaKAPnduBP>h`bJ6k]TtEc#$Vi=qB=2GUbY:M#7%OsEKG#Pf&CUofEcOX3G&Z9CRj
%qF%A`._i*]AH+EJcnIK7(oM&A]8l>*)!@Pl1r2/l$PSK:Z_9cY?@,1!)XjgY8[(V5V\l=8V,FkGP1oc!(#tt42TA=Wlu(l2)$e:<
%(`,Y5`k`aROsEJ+S>(l.b*"#CA:5BVA?/ZZ03M1Ws"\)SDci%CjM#,Y4u#g\d'e[@95(&PB&pb5=XjZp0i,\9N,b!Il)DNR=d#NS
%.\EMj+:84#8<m_Tanc-o0oiY6V=Kfr[Il1'XD%oVN72IQ]-pD5N,rj6NH$A7if%pZg*B9g'\O(X`k/9D&hHoQ.E8>fWDl/f8]gsC
%KgIeKd#X,[LCWET8'=<LNgoR;amu/k5?^gWBmEq\/DYkgA-l$F2f`VqLCQO2(UU&/_aAF-b#N`9BI^4T<TjbiE+anRn9le<&a'Mb
%gB74=dKDCJ.AcL6Ph9tL.;0o:J:</nJ/q6)$AqKLB^q>0=K59Q>+'4kT5/9gLne@@CKPDW9]j8?8^L?s[,^257[$tZ$rGY)5OGd[
%*=*ZKa&04@7`//N.qDt0,&\Aoj_a[&Y=PopiG`C=%-b`?-(pS.3kC5_%F92ba!+"S^p990e!c0V])XHNb9IqORmtlt?408n0"!Pf
%,IE.P!:u&41cg9OkI]6B^l0Q/:6B'n9\9^lZS^"iAY%#m37j(*/r&(C&G@9KFHW&`bu>5Ged?P';pfPTm(d)uZ93%D:!;;We3Tqf
%p4T.^8k#@c=KW[s9HBj.iQ7^fhC4o;bqr8LU!Uc3gs)3t#c/Pe%8!"kh"m/l>Bl<c5(kD<Bq[F9BIj7rpL+N8kLdud2'BA?bRgF[
%Q_^kpnI!Xj15t3-#TAoA>&*2&.&AetQF-;XLFMU$p%HGTUPGP,BTA_t.qM?D_+p4GBKBd:#'-&rS7*9<NFf=b0=I*ObS=s@3UK4(
%6'H^.Wi'T=Pg[9:[8.`nTY8['QJN:Y]g7792@ALjRN/aa2Je3Wg=&]`C([ZWnk!H@&dX/#))jjdXJ*e:Ze'rV)-E;)R:keF@^T<7
%?DQbgfc6&PNa;isMZ$m"')EB#]cEl]$F.*.2AU)lk7IG&=TJ%[3^6+^-K`X/G$oFO6N=k%2FlLkD_<!"%r<K++g@A!FYjf,Ru.B*
%nY2fC&%EE9TkSXfqQj$f5a3#a=>ZH#*+!-3E%#-.F_u0`_7&)N)O[;dgkX+n'6YHF$,Ta#Ef$)1mW[X#@p:MrgHg$3?Y;$)/m]7/
%HU6M<=4Tu371IJ1c.CXS=U0];U9p:.')f]&ctA+2LqL:Gaj%-/8<V]nI[\M75he*edUj7^OC\pu`CjB5Vn#9)g-h]PM,0Q"RetHW
%52!>82PJl8Uct:GdhhGY>)kG.bbbCS>kC4$+=&1ioMn9[k5YdAN?IAufU(\;*Au7!gG&dR3dJi;`]X@ej?uXsUC^Qo4IsLecmC\X
%f+2u&*$[21bE.!EC'g^qANXOnAJ["Y3=^+2k74j;c"Bu0!j1*sd3*;;//:KsSq^/r$<@G2hKJQkTq<l-;*pODcn'iM*p++^_;\):
%-Rb'P[S!B:P9mX00-a\VD0p,YdqHD+[d>CYB;75P?lY!7"QN>*,YCt!:ur&th,Pa-QDjWoj&E'Y.PFq&>Q=88/]5DIW%L<!%e5]O
%R$Kgp@;fQ0`_n:TT!Eu"_th+!"?2;GJd7b\]"R*P"<+<+F2'GGLSm>h/4WuIV$R$%$2cSU)&Rq*0/A#b`G,sV33RTH<!kQb6G*gH
%:?WO-"G-:T\*OrEM!mB;E:Ut-6eeG<!ri[.L-Y3obV/h;CJ^O`D,;[o=:+L]AAf>rZm<]d:n3^uL!D4a%I]7m%Ysd#]th&?W0gJ.
%Q6jsuaouLa(>eR[WF5HlPb]^iasUk!.%4"E3U"^!Y>%hG$E?fMPnu*OX`%>sN=KJ49N*dq<S'r#%I^8ARHBr0VVuZcGY*deQmQO[
%Za(Rm%U#:@1ta4@b"n7cls#3#c,;[Q3/&T#<3O\7%lGB"AfBoX\BlW=N]g1U.6(g&27+AePo1i?;NsH.'=7bLAR#.q.OhTboa(tp
%CTLMcQ'X&$Xa_56[Pl,SRclA_Ck?X\rb[U8U*Sc,*[OEV'ZE%'PMMKM8X@Ho1rdX<WDn>PUpg86`&MkFVA?2L!j'^J:=Ae!=n34>
%-U.G$W6Wg;1`ub5$sWN+#s`QoKa:hl^SCiQ',-(/EVo[rC@CEbp@m*9iTBt6hl_^Zn*b6=Y9)YhTpqs\B.3FfkkW9:hiInB7.Of,
%AS\^Crr@?ZM$a~>
%AI9_PrivateDataEnd
