This is pdfTeX, Version 3.14159265-2.6-1.40.16 (TeX Live 2015/Debian) (preloaded format=pdflatex 2017.8.22)  14 OCT 2018 21:52
entering extended mode
 restricted \write18 enabled.
 %&-line parsing enabled.
**source_extraction/results/1611.02099.tex
(./source_extraction/results/1611.02099.tex
LaTeX2e <2016/02/01>
Babel <3.9q> and hyphenation patterns for 1 language(s) loaded.
(/usr/share/texlive/texmf-dist/tex/latex/base/article.cls
Document Class: article 2014/09/29 v1.4h Standard LaTeX document class
(/usr/share/texlive/texmf-dist/tex/latex/base/size11.clo
File: size11.clo 2014/09/29 v1.4h Standard LaTeX file (size option)
)
\c@part=\count79
\c@section=\count80
\c@subsection=\count81
\c@subsubsection=\count82
\c@paragraph=\count83
\c@subparagraph=\count84
\c@figure=\count85
\c@table=\count86
\abovecaptionskip=\skip41
\belowcaptionskip=\skip42
\bibindent=\dimen102
)
(/usr/share/texlive/texmf-dist/tex/latex/amsfonts/amsfonts.sty
Package: amsfonts 2013/01/14 v3.01 Basic AMSFonts support
\@emptytoks=\toks14
\symAMSa=\mathgroup4
\symAMSb=\mathgroup5
LaTeX Font Info:    Overwriting math alphabet `\mathfrak' in version `bold'
(Font)                  U/euf/m/n --> U/euf/b/n on input line 106.
)
(/usr/share/texlive/texmf-dist/tex/latex/amsmath/amsmath.sty
Package: amsmath 2016/03/03 v2.15a AMS math features
\@mathmargin=\skip43

For additional information on amsmath, use the `?' option.
(/usr/share/texlive/texmf-dist/tex/latex/amsmath/amstext.sty
Package: amstext 2000/06/29 v2.01 AMS text

(/usr/share/texlive/texmf-dist/tex/latex/amsmath/amsgen.sty
File: amsgen.sty 1999/11/30 v2.0 generic functions
\@emptytoks=\toks15
\ex@=\dimen103
))
(/usr/share/texlive/texmf-dist/tex/latex/amsmath/amsbsy.sty
Package: amsbsy 1999/11/29 v1.2d Bold Symbols
\pmbraise@=\dimen104
)
(/usr/share/texlive/texmf-dist/tex/latex/amsmath/amsopn.sty
Package: amsopn 1999/12/14 v2.01 operator names
)
\inf@bad=\count87
LaTeX Info: Redefining \frac on input line 199.
\uproot@=\count88
\leftroot@=\count89
LaTeX Info: Redefining \overline on input line 297.
\classnum@=\count90
\DOTSCASE@=\count91
LaTeX Info: Redefining \ldots on input line 394.
LaTeX Info: Redefining \dots on input line 397.
LaTeX Info: Redefining \cdots on input line 518.
\Mathstrutbox@=\box26
\strutbox@=\box27
\big@size=\dimen105
LaTeX Font Info:    Redeclaring font encoding OML on input line 630.
LaTeX Font Info:    Redeclaring font encoding OMS on input line 631.
\macc@depth=\count92
\c@MaxMatrixCols=\count93
\dotsspace@=\muskip10
\c@parentequation=\count94
\dspbrk@lvl=\count95
\tag@help=\toks16
\row@=\count96
\column@=\count97
\maxfields@=\count98
\andhelp@=\toks17
\eqnshift@=\dimen106
\alignsep@=\dimen107
\tagshift@=\dimen108
\tagwidth@=\dimen109
\totwidth@=\dimen110
\lineht@=\dimen111
\@envbody=\toks18
\multlinegap=\skip44
\multlinetaggap=\skip45
\mathdisplay@stack=\toks19
LaTeX Info: Redefining \[ on input line 2735.
LaTeX Info: Redefining \] on input line 2736.
)
(/usr/share/texlive/texmf-dist/tex/latex/amscls/amsthm.sty
Package: amsthm 2015/03/04 v2.20.2
\thm@style=\toks20
\thm@bodyfont=\toks21
\thm@headfont=\toks22
\thm@notefont=\toks23
\thm@headpunct=\toks24
\thm@preskip=\skip46
\thm@postskip=\skip47
\thm@headsep=\skip48
\dth@everypar=\toks25
)
(/usr/share/texlive/texmf-dist/tex/latex/base/latexsym.sty
Package: latexsym 1998/08/17 v2.2e Standard LaTeX package (lasy symbols)
\symlasy=\mathgroup6
LaTeX Font Info:    Overwriting symbol font `lasy' in version `bold'
(Font)                  U/lasy/m/n --> U/lasy/b/n on input line 52.
)
(/usr/share/texlive/texmf-dist/tex/latex/graphics/color.sty
Package: color 2016/01/03 v1.1b Standard LaTeX Color (DPC)

(/usr/share/texlive/texmf-dist/tex/latex/latexconfig/color.cfg
File: color.cfg 2007/01/18 v1.5 color configuration of teTeX/TeXLive
)
Package color Info: Driver file: pdftex.def on input line 143.

(/usr/share/texlive/texmf-dist/tex/latex/pdftex-def/pdftex.def
File: pdftex.def 2011/05/27 v0.06d Graphics/color for pdfTeX

(/usr/share/texlive/texmf-dist/tex/generic/oberdiek/infwarerr.sty
Package: infwarerr 2010/04/08 v1.3 Providing info/warning/error messages (HO)
)
(/usr/share/texlive/texmf-dist/tex/generic/oberdiek/ltxcmds.sty
Package: ltxcmds 2011/11/09 v1.22 LaTeX kernel commands for general use (HO)
)
\Gread@gobject=\count99
))
(/usr/share/texlive/texmf-dist/tex/latex/graphics/epsfig.sty
Package: epsfig 1999/02/16 v1.7a (e)psfig emulation (SPQR)

(/usr/share/texlive/texmf-dist/tex/latex/graphics/graphicx.sty
Package: graphicx 2014/10/28 v1.0g Enhanced LaTeX Graphics (DPC,SPQR)

(/usr/share/texlive/texmf-dist/tex/latex/graphics/keyval.sty
Package: keyval 2014/10/28 v1.15 key=value parser (DPC)
\KV@toks@=\toks26
)
(/usr/share/texlive/texmf-dist/tex/latex/graphics/graphics.sty
Package: graphics 2016/01/03 v1.0q Standard LaTeX Graphics (DPC,SPQR)

(/usr/share/texlive/texmf-dist/tex/latex/graphics/trig.sty
Package: trig 2016/01/03 v1.10 sin cos tan (DPC)
)
(/usr/share/texlive/texmf-dist/tex/latex/latexconfig/graphics.cfg
File: graphics.cfg 2010/04/23 v1.9 graphics configuration of TeX Live
)
Package graphics Info: Driver file: pdftex.def on input line 95.
)
\Gin@req@height=\dimen112
\Gin@req@width=\dimen113
)
\epsfxsize=\dimen114
\epsfysize=\dimen115
)
(/usr/share/texlive/texmf-dist/tex/latex/hyperref/hyperref.sty
Package: hyperref 2012/11/06 v6.83m Hypertext links for LaTeX

(/usr/share/texlive/texmf-dist/tex/generic/oberdiek/hobsub-hyperref.sty
Package: hobsub-hyperref 2012/05/28 v1.13 Bundle oberdiek, subset hyperref (HO)


(/usr/share/texlive/texmf-dist/tex/generic/oberdiek/hobsub-generic.sty
Package: hobsub-generic 2012/05/28 v1.13 Bundle oberdiek, subset generic (HO)
Package: hobsub 2012/05/28 v1.13 Construct package bundles (HO)
Package hobsub Info: Skipping package `infwarerr' (already loaded).
Package hobsub Info: Skipping package `ltxcmds' (already loaded).
Package: ifluatex 2010/03/01 v1.3 Provides the ifluatex switch (HO)
Package ifluatex Info: LuaTeX not detected.
Package: ifvtex 2010/03/01 v1.5 Detect VTeX and its facilities (HO)
Package ifvtex Info: VTeX not detected.
Package: intcalc 2007/09/27 v1.1 Expandable calculations with integers (HO)
Package: ifpdf 2011/01/30 v2.3 Provides the ifpdf switch (HO)
Package ifpdf Info: pdfTeX in PDF mode is detected.
Package: etexcmds 2011/02/16 v1.5 Avoid name clashes with e-TeX commands (HO)
Package etexcmds Info: Could not find \expanded.
(etexcmds)             That can mean that you are not using pdfTeX 1.50 or
(etexcmds)             that some package has redefined \expanded.
(etexcmds)             In the latter case, load this package earlier.
Package: kvsetkeys 2012/04/25 v1.16 Key value parser (HO)
Package: kvdefinekeys 2011/04/07 v1.3 Define keys (HO)
Package: pdftexcmds 2011/11/29 v0.20 Utility functions of pdfTeX for LuaTeX (HO
)
Package pdftexcmds Info: LuaTeX not detected.
Package pdftexcmds Info: \pdf@primitive is available.
Package pdftexcmds Info: \pdf@ifprimitive is available.
Package pdftexcmds Info: \pdfdraftmode found.
Package: pdfescape 2011/11/25 v1.13 Implements pdfTeX's escape features (HO)
Package: bigintcalc 2012/04/08 v1.3 Expandable calculations on big integers (HO
)
Package: bitset 2011/01/30 v1.1 Handle bit-vector datatype (HO)
Package: uniquecounter 2011/01/30 v1.2 Provide unlimited unique counter (HO)
)
Package hobsub Info: Skipping package `hobsub' (already loaded).
Package: letltxmacro 2010/09/02 v1.4 Let assignment for LaTeX macros (HO)
Package: hopatch 2012/05/28 v1.2 Wrapper for package hooks (HO)
Package: xcolor-patch 2011/01/30 xcolor patch
Package: atveryend 2011/06/30 v1.8 Hooks at the very end of document (HO)
Package atveryend Info: \enddocument detected (standard20110627).
Package: atbegshi 2011/10/05 v1.16 At begin shipout hook (HO)
Package: refcount 2011/10/16 v3.4 Data extraction from label references (HO)
Package: hycolor 2011/01/30 v1.7 Color options for hyperref/bookmark (HO)
)
(/usr/share/texlive/texmf-dist/tex/generic/ifxetex/ifxetex.sty
Package: ifxetex 2010/09/12 v0.6 Provides ifxetex conditional
)
(/usr/share/texlive/texmf-dist/tex/latex/oberdiek/auxhook.sty
Package: auxhook 2011/03/04 v1.3 Hooks for auxiliary files (HO)
)
(/usr/share/texlive/texmf-dist/tex/latex/oberdiek/kvoptions.sty
Package: kvoptions 2011/06/30 v3.11 Key value format for package options (HO)
)
\@linkdim=\dimen116
\Hy@linkcounter=\count100
\Hy@pagecounter=\count101

(/usr/share/texlive/texmf-dist/tex/latex/hyperref/pd1enc.def
File: pd1enc.def 2012/11/06 v6.83m Hyperref: PDFDocEncoding definition (HO)
)
\Hy@SavedSpaceFactor=\count102

(/usr/share/texlive/texmf-dist/tex/latex/latexconfig/hyperref.cfg
File: hyperref.cfg 2002/06/06 v1.2 hyperref configuration of TeXLive
)
Package hyperref Info: Hyper figures OFF on input line 4443.
Package hyperref Info: Link nesting OFF on input line 4448.
Package hyperref Info: Hyper index ON on input line 4451.
Package hyperref Info: Plain pages OFF on input line 4458.
Package hyperref Info: Backreferencing OFF on input line 4463.
Package hyperref Info: Implicit mode ON; LaTeX internals redefined.
Package hyperref Info: Bookmarks ON on input line 4688.
\c@Hy@tempcnt=\count103

(/usr/share/texlive/texmf-dist/tex/latex/url/url.sty
\Urlmuskip=\muskip11
Package: url 2013/09/16  ver 3.4  Verb mode for urls, etc.
)
LaTeX Info: Redefining \url on input line 5041.
\XeTeXLinkMargin=\dimen117
\Fld@menulength=\count104
\Field@Width=\dimen118
\Fld@charsize=\dimen119
Package hyperref Info: Hyper figures OFF on input line 6295.
Package hyperref Info: Link nesting OFF on input line 6300.
Package hyperref Info: Hyper index ON on input line 6303.
Package hyperref Info: backreferencing OFF on input line 6310.
Package hyperref Info: Link coloring OFF on input line 6315.
Package hyperref Info: Link coloring with OCG OFF on input line 6320.
Package hyperref Info: PDF/A mode OFF on input line 6325.
LaTeX Info: Redefining \ref on input line 6365.
LaTeX Info: Redefining \pageref on input line 6369.
\Hy@abspage=\count105
\c@Item=\count106
\c@Hfootnote=\count107
)

Package hyperref Message: Driver (autodetected): hpdftex.

(/usr/share/texlive/texmf-dist/tex/latex/hyperref/hpdftex.def
File: hpdftex.def 2012/11/06 v6.83m Hyperref driver for pdfTeX
\Fld@listcount=\count108
\c@bookmark@seq@number=\count109

(/usr/share/texlive/texmf-dist/tex/latex/oberdiek/rerunfilecheck.sty
Package: rerunfilecheck 2011/04/15 v1.7 Rerun checks for auxiliary files (HO)
Package uniquecounter Info: New unique counter `rerunfilecheck' on input line 2
82.
)
\Hy@SectionHShift=\skip49
)
(/usr/share/texlive/texmf-dist/tex/latex/enumitem/enumitem.sty
Package: enumitem 2011/09/28 v3.5.2 Customized lists
\labelindent=\skip50
\enit@outerparindent=\dimen120
\enit@toks=\toks27
\enit@inbox=\box28
\enitdp@description=\count110
)
(/usr/share/texlive/texmf-dist/tex/latex/tools/calc.sty
Package: calc 2014/10/28 v4.3 Infix arithmetic (KKT,FJ)
\calc@Acount=\count111
\calc@Bcount=\count112
\calc@Adimen=\dimen121
\calc@Bdimen=\dimen122
\calc@Askip=\skip51
\calc@Bskip=\skip52
LaTeX Info: Redefining \setlength on input line 80.
LaTeX Info: Redefining \addtolength on input line 81.
\calc@Ccount=\count113
\calc@Cskip=\skip53
) (./extract.sty
(/usr/share/texlive/texmf-dist/tex/latex/environ/environ.sty
Package: environ 2014/05/04 v0.3 A new way to define environments

(/usr/share/texlive/texmf-dist/tex/latex/trimspaces/trimspaces.sty
Package: trimspaces 2009/09/17 v1.1 Trim spaces around a token list
))
(/usr/share/texlive/texmf-dist/tex/latex/etextools/etextools.sty
Package: etextools 2010/12/07 v3.1415926 e-TeX more useful tools for LaTeX pack
age writers

(/usr/share/texlive/texmf-dist/tex/latex/etex-pkg/etex.sty
Package: etex 2016/01/11 v2.6 eTeX basic definition package (PEB,DPC)
\et@xins=\count114
)
(/usr/share/texlive/texmf-dist/tex/latex/etoolbox/etoolbox.sty
Package: etoolbox 2015/08/02 v2.2a e-TeX tools for LaTeX (JAW)
\etb@tempcnta=\count115
)
\ettl@fter=\count116
\ettl@for@nested=\count277
)
(/usr/share/texmf/tex/latex/preview/preview.sty
Package: preview 2010/02/14 11.88 (AUCTeX/preview-latex)

(/usr/share/texmf/tex/latex/preview/prtightpage.def
\PreviewBorder=\dimen123
)
\pr@snippet=\count117
\pr@box=\box29
\pr@output=\toks28
)
\c@propcounter=\count118
\mybox=\box30
)
\c@theorem=\count119
\c@lemma=\count120
\c@proposition=\count121
\c@conjecture=\count122
\c@corollary=\count123
\c@question=\count124
\c@claim=\count125
\c@problem=\count126

(/usr/share/texlive/texmf-dist/tex/generic/epsf/epsf.tex
This is `epsf.tex' v2.7.4 <14 February 2011>
\epsffilein=\read1
\epsfframemargin=\dimen124
\epsfframethickness=\dimen125
\epsfrsize=\dimen126
\epsftmp=\dimen127
\epsftsize=\dimen128
\epsfxsize=\dimen129
\epsfysize=\dimen130
\pspoints=\dimen131
) (source_extraction/results/1611.02099.aux)
\openout1 = `1611.02099.aux'.

LaTeX Font Info:    Checking defaults for OML/cmm/m/it on input line 64.
LaTeX Font Info:    ... okay on input line 64.
LaTeX Font Info:    Checking defaults for T1/cmr/m/n on input line 64.
LaTeX Font Info:    ... okay on input line 64.
LaTeX Font Info:    Checking defaults for OT1/cmr/m/n on input line 64.
LaTeX Font Info:    ... okay on input line 64.
LaTeX Font Info:    Checking defaults for OMS/cmsy/m/n on input line 64.
LaTeX Font Info:    ... okay on input line 64.
LaTeX Font Info:    Checking defaults for OMX/cmex/m/n on input line 64.
LaTeX Font Info:    ... okay on input line 64.
LaTeX Font Info:    Checking defaults for U/cmr/m/n on input line 64.
LaTeX Font Info:    ... okay on input line 64.
LaTeX Font Info:    Checking defaults for PD1/pdf/m/n on input line 64.
LaTeX Font Info:    ... okay on input line 64.

(/usr/share/texlive/texmf-dist/tex/context/base/supp-pdf.mkii
[Loading MPS to PDF converter (version 2006.09.02).]
\scratchcounter=\count127
\scratchdimen=\dimen132
\scratchbox=\box31
\nofMPsegments=\count128
\nofMParguments=\count129
\everyMPshowfont=\toks29
\MPscratchCnt=\count130
\MPscratchDim=\dimen133
\MPnumerator=\count131
\makeMPintoPDFobject=\count132
\everyMPtoPDFconversion=\toks30
) (/usr/share/texlive/texmf-dist/tex/latex/oberdiek/epstopdf-base.sty
Package: epstopdf-base 2010/02/09 v2.5 Base part for package epstopdf

(/usr/share/texlive/texmf-dist/tex/latex/oberdiek/grfext.sty
Package: grfext 2010/08/19 v1.1 Manage graphics extensions (HO)
)
Package grfext Info: Graphics extension search list:
(grfext)             [.png,.pdf,.jpg,.mps,.jpeg,.jbig2,.jb2,.PNG,.PDF,.JPG,.JPE
G,.JBIG2,.JB2,.eps]
(grfext)             \AppendGraphicsExtensions on input line 452.

(/usr/share/texlive/texmf-dist/tex/latex/latexconfig/epstopdf-sys.cfg
File: epstopdf-sys.cfg 2010/07/13 v1.3 Configuration of (r)epstopdf for TeX Liv
e
))
\AtBeginShipoutBox=\box32
Package hyperref Info: Link coloring OFF on input line 64.

(/usr/share/texlive/texmf-dist/tex/latex/hyperref/nameref.sty
Package: nameref 2012/10/27 v2.43 Cross-referencing by name of section

(/usr/share/texlive/texmf-dist/tex/generic/oberdiek/gettitlestring.sty
Package: gettitlestring 2010/12/03 v1.4 Cleanup title references (HO)
)
\c@section@level=\count133
)
LaTeX Info: Redefining \ref on input line 64.
LaTeX Info: Redefining \pageref on input line 64.
LaTeX Info: Redefining \nameref on input line 64.

(source_extraction/results/1611.02099.out)
(source_extraction/results/1611.02099.out)
\@outlinefile=\write3
\openout3 = `1611.02099.out'.


Preview: Fontsize 10.95pt
Preview: PDFoutput 1
\extractedfile=\write4
\openout4 = `propositions.txt'.

LaTeX Font Info:    Try loading font information for U+msa on input line 66.
(/usr/share/texlive/texmf-dist/tex/latex/amsfonts/umsa.fd
File: umsa.fd 2013/01/14 v3.01 AMS symbols A
)
LaTeX Font Info:    Try loading font information for U+msb on input line 66.

(/usr/share/texlive/texmf-dist/tex/latex/amsfonts/umsb.fd
File: umsb.fd 2013/01/14 v3.01 AMS symbols B
)
LaTeX Font Info:    Try loading font information for U+lasy on input line 66.

(/usr/share/texlive/texmf-dist/tex/latex/base/ulasy.fd
File: ulasy.fd 1998/08/17 v2.2e LaTeX symbol font definitions
)
LaTeX Font Info:    Try loading font information for OMS+cmr on input line 66.

(/usr/share/texlive/texmf-dist/tex/latex/base/omscmr.fd
File: omscmr.fd 2014/09/29 v2.5h Standard LaTeX font definitions
)
LaTeX Font Info:    Font shape `OMS/cmr/m/n' in size <8> not available
(Font)              Font shape `OMS/cmsy/m/n' tried instead on input line 66.
LaTeX Font Info:    Font shape `OMS/cmr/m/n' in size <6> not available
(Font)              Font shape `OMS/cmsy/m/n' tried instead on input line 66.

Preview: Tightpage -32891 -32891 32891 32891
[1{/var/lib/texmf/fonts/map/pdftex/updmap/pdftex.map}]
! Undefined control sequence.
\pr@startbox ...uter \toks@ {#2}\edef \pr@cleanup 
                                                  {\the \toks@ }\setbox \pr@...
l.100 \end{theorem*}
                    
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\pr@startbox ...uter \toks@ {#2}\edef \pr@cleanup 
                                                  {\the \toks@ }\setbox \pr@...
l.100 \end{theorem*}
                    
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Argument of \@refstar has an extra }.
<inserted text> 
                \par 
l.100 \end{theorem*}
                    
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@refstar was complete.
<to be read again> 
                   \par 
l.100 \end{theorem*}
                    
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Undefined control sequence.
\pr@startbox ...uter \toks@ {#2}\edef \pr@cleanup 
                                                  {\the \toks@ }\setbox \pr@...
l.100 \end{theorem*}
                    
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Missing \endcsname inserted.
<to be read again> 
                   \endgraf 
l.100 \end{theorem*}
                    
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Argument of \@firstoffive has an extra }.
<inserted text> 
                \par 
l.100 \end{theorem*}
                    
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@firstoffive was complete.
<to be read again> 
                   \par 
l.100 \end{theorem*}
                    
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.


Overfull \hbox (17.02689pt too wide) in paragraph at lines 106--107
[]\OT1/cmr/m/n/10.95 A key result about quasirandom graphs, proved by Simonovit
s and S^^Sos [[]], says that such counterexamples
 []

[2]
! Undefined control sequence.
\pr@startbox ...uter \toks@ {#2}\edef \pr@cleanup 
                                                  {\the \toks@ }\setbox \pr@...
l.110 \end{theorem*}
                    
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\pr@startbox ...uter \toks@ {#2}\edef \pr@cleanup 
                                                  {\the \toks@ }\setbox \pr@...
l.110 \end{theorem*}
                    
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Argument of \@refstar has an extra }.
<inserted text> 
                \par 
l.110 \end{theorem*}
                    
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@refstar was complete.
<to be read again> 
                   \par 
l.110 \end{theorem*}
                    
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Undefined control sequence.
\pr@startbox ...uter \toks@ {#2}\edef \pr@cleanup 
                                                  {\the \toks@ }\setbox \pr@...
l.110 \end{theorem*}
                    
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Missing \endcsname inserted.
<to be read again> 
                   \endgraf 
l.110 \end{theorem*}
                    
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Argument of \@firstoffive has an extra }.
<inserted text> 
                \par 
l.110 \end{theorem*}
                    
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@firstoffive was complete.
<to be read again> 
                   \par 
l.110 \end{theorem*}
                    
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

[3]
! Undefined control sequence.
\pr@startbox ...uter \toks@ {#2}\edef \pr@cleanup 
                                                  {\the \toks@ }\setbox \pr@...
l.117 \end{theorem}
                   
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\pr@startbox ...uter \toks@ {#2}\edef \pr@cleanup 
                                                  {\the \toks@ }\setbox \pr@...
l.117 \end{theorem}
                   
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Argument of \@refstar has an extra }.
<inserted text> 
                \par 
l.117 \end{theorem}
                   
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@refstar was complete.
<to be read again> 
                   \par 
l.117 \end{theorem}
                   
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Undefined control sequence.
\pr@startbox ...uter \toks@ {#2}\edef \pr@cleanup 
                                                  {\the \toks@ }\setbox \pr@...
l.117 \end{theorem}
                   
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Missing \endcsname inserted.
<to be read again> 
                   \endgraf 
l.117 \end{theorem}
                   
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Argument of \@firstoffive has an extra }.
<inserted text> 
                \par 
l.117 \end{theorem}
                   
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@firstoffive was complete.
<to be read again> 
                   \par 
l.117 \end{theorem}
                   
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

[4]
! Undefined control sequence.
\pr@startbox ...uter \toks@ {#2}\edef \pr@cleanup 
                                                  {\the \toks@ }\setbox \pr@...
l.124 \end{theorem}
                   
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\pr@startbox ...uter \toks@ {#2}\edef \pr@cleanup 
                                                  {\the \toks@ }\setbox \pr@...
l.124 \end{theorem}
                   
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Argument of \@refstar has an extra }.
<inserted text> 
                \par 
l.124 \end{theorem}
                   
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@refstar was complete.
<to be read again> 
                   \par 
l.124 \end{theorem}
                   
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Undefined control sequence.
\pr@startbox ...uter \toks@ {#2}\edef \pr@cleanup 
                                                  {\the \toks@ }\setbox \pr@...
l.124 \end{theorem}
                   
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Missing \endcsname inserted.
<to be read again> 
                   \endgraf 
l.124 \end{theorem}
                   
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Argument of \@firstoffive has an extra }.
<inserted text> 
                \par 
l.124 \end{theorem}
                   
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@firstoffive was complete.
<to be read again> 
                   \par 
l.124 \end{theorem}
                   
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.


LaTeX Warning: Reference `sec:general' on page 3 undefined on input line 128.


LaTeX Warning: Reference `sec:conclude' on page 3 undefined on input line 128.


Package amsmath Warning: Foreign command \atopwithdelims;
(amsmath)                \frac or \genfrac should be used instead
(amsmath)                 on input line 137.

[5]
! Undefined control sequence.
\pr@startbox ...uter \toks@ {#2}\edef \pr@cleanup 
                                                  {\the \toks@ }\setbox \pr@...
l.137 \end{lemma}
                 
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\pr@startbox ...uter \toks@ {#2}\edef \pr@cleanup 
                                                  {\the \toks@ }\setbox \pr@...
l.137 \end{lemma}
                 
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Argument of \@refstar has an extra }.
<inserted text> 
                \par 
l.137 \end{lemma}
                 
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@refstar was complete.
<to be read again> 
                   \par 
l.137 \end{lemma}
                 
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Undefined control sequence.
\pr@startbox ...uter \toks@ {#2}\edef \pr@cleanup 
                                                  {\the \toks@ }\setbox \pr@...
l.137 \end{lemma}
                 
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Missing \endcsname inserted.
<to be read again> 
                   \endgraf 
l.137 \end{lemma}
                 
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Argument of \@firstoffive has an extra }.
<inserted text> 
                \par 
l.137 \end{lemma}
                 
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@firstoffive was complete.
<to be read again> 
                   \par 
l.137 \end{lemma}
                 
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

[6]
! Undefined control sequence.
\pr@startbox ...uter \toks@ {#2}\edef \pr@cleanup 
                                                  {\the \toks@ }\setbox \pr@...
l.165 \end{corollary}
                     
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\pr@startbox ...uter \toks@ {#2}\edef \pr@cleanup 
                                                  {\the \toks@ }\setbox \pr@...
l.165 \end{corollary}
                     
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Argument of \@refstar has an extra }.
<inserted text> 
                \par 
l.165 \end{corollary}
                     
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@refstar was complete.
<to be read again> 
                   \par 
l.165 \end{corollary}
                     
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Undefined control sequence.
\pr@startbox ...uter \toks@ {#2}\edef \pr@cleanup 
                                                  {\the \toks@ }\setbox \pr@...
l.165 \end{corollary}
                     
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Missing \endcsname inserted.
<to be read again> 
                   \endgraf 
l.165 \end{corollary}
                     
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Argument of \@firstoffive has an extra }.
<inserted text> 
                \par 
l.165 \end{corollary}
                     
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@firstoffive was complete.
<to be read again> 
                   \par 
l.165 \end{corollary}
                     
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

[7]
! Undefined control sequence.
\pr@startbox ...uter \toks@ {#2}\edef \pr@cleanup 
                                                  {\the \toks@ }\setbox \pr@...
l.193 \end{lemma}
                 
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\pr@startbox ...uter \toks@ {#2}\edef \pr@cleanup 
                                                  {\the \toks@ }\setbox \pr@...
l.193 \end{lemma}
                 
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Argument of \@refstar has an extra }.
<inserted text> 
                \par 
l.193 \end{lemma}
                 
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@refstar was complete.
<to be read again> 
                   \par 
l.193 \end{lemma}
                 
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Undefined control sequence.
\pr@startbox ...uter \toks@ {#2}\edef \pr@cleanup 
                                                  {\the \toks@ }\setbox \pr@...
l.193 \end{lemma}
                 
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Missing \endcsname inserted.
<to be read again> 
                   \endgraf 
l.193 \end{lemma}
                 
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Argument of \@firstoffive has an extra }.
<inserted text> 
                \par 
l.193 \end{lemma}
                 
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@firstoffive was complete.
<to be read again> 
                   \par 
l.193 \end{lemma}
                 
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

[8]
! Undefined control sequence.
\pr@startbox ...uter \toks@ {#2}\edef \pr@cleanup 
                                                  {\the \toks@ }\setbox \pr@...
l.213 \end{proposition}
                       
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\pr@startbox ...uter \toks@ {#2}\edef \pr@cleanup 
                                                  {\the \toks@ }\setbox \pr@...
l.213 \end{proposition}
                       
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Argument of \@refstar has an extra }.
<inserted text> 
                \par 
l.213 \end{proposition}
                       
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@refstar was complete.
<to be read again> 
                   \par 
l.213 \end{proposition}
                       
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Undefined control sequence.
\pr@startbox ...uter \toks@ {#2}\edef \pr@cleanup 
                                                  {\the \toks@ }\setbox \pr@...
l.213 \end{proposition}
                       
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Missing \endcsname inserted.
<to be read again> 
                   \endgraf 
l.213 \end{proposition}
                       
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Argument of \@firstoffive has an extra }.
<inserted text> 
                \par 
l.213 \end{proposition}
                       
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@firstoffive was complete.
<to be read again> 
                   \par 
l.213 \end{proposition}
                       
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

[9]
! Undefined control sequence.
\pr@startbox ...uter \toks@ {#2}\edef \pr@cleanup 
                                                  {\the \toks@ }\setbox \pr@...
l.227 \end{corollary}
                     
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\pr@startbox ...uter \toks@ {#2}\edef \pr@cleanup 
                                                  {\the \toks@ }\setbox \pr@...
l.227 \end{corollary}
                     
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Argument of \@refstar has an extra }.
<inserted text> 
                \par 
l.227 \end{corollary}
                     
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@refstar was complete.
<to be read again> 
                   \par 
l.227 \end{corollary}
                     
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Undefined control sequence.
\pr@startbox ...uter \toks@ {#2}\edef \pr@cleanup 
                                                  {\the \toks@ }\setbox \pr@...
l.227 \end{corollary}
                     
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Missing \endcsname inserted.
<to be read again> 
                   \endgraf 
l.227 \end{corollary}
                     
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Argument of \@firstoffive has an extra }.
<inserted text> 
                \par 
l.227 \end{corollary}
                     
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@firstoffive was complete.
<to be read again> 
                   \par 
l.227 \end{corollary}
                     
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

[10]
! Undefined control sequence.
\pr@startbox ...uter \toks@ {#2}\edef \pr@cleanup 
                                                  {\the \toks@ }\setbox \pr@...
l.242 \end{lemma}
                 
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\pr@startbox ...uter \toks@ {#2}\edef \pr@cleanup 
                                                  {\the \toks@ }\setbox \pr@...
l.242 \end{lemma}
                 
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Argument of \@refstar has an extra }.
<inserted text> 
                \par 
l.242 \end{lemma}
                 
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@refstar was complete.
<to be read again> 
                   \par 
l.242 \end{lemma}
                 
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Undefined control sequence.
\pr@startbox ...uter \toks@ {#2}\edef \pr@cleanup 
                                                  {\the \toks@ }\setbox \pr@...
l.242 \end{lemma}
                 
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Missing \endcsname inserted.
<to be read again> 
                   \endgraf 
l.242 \end{lemma}
                 
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Argument of \@firstoffive has an extra }.
<inserted text> 
                \par 
l.242 \end{lemma}
                 
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@firstoffive was complete.
<to be read again> 
                   \par 
l.242 \end{lemma}
                 
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

[11]
! Undefined control sequence.
\pr@startbox ...uter \toks@ {#2}\edef \pr@cleanup 
                                                  {\the \toks@ }\setbox \pr@...
l.266 \end{lemma}
                 
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\pr@startbox ...uter \toks@ {#2}\edef \pr@cleanup 
                                                  {\the \toks@ }\setbox \pr@...
l.266 \end{lemma}
                 
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Argument of \@refstar has an extra }.
<inserted text> 
                \par 
l.266 \end{lemma}
                 
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@refstar was complete.
<to be read again> 
                   \par 
l.266 \end{lemma}
                 
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Undefined control sequence.
\pr@startbox ...uter \toks@ {#2}\edef \pr@cleanup 
                                                  {\the \toks@ }\setbox \pr@...
l.266 \end{lemma}
                 
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Missing \endcsname inserted.
<to be read again> 
                   \endgraf 
l.266 \end{lemma}
                 
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Argument of \@firstoffive has an extra }.
<inserted text> 
                \par 
l.266 \end{lemma}
                 
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@firstoffive was complete.
<to be read again> 
                   \par 
l.266 \end{lemma}
                 
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

[12]
! Undefined control sequence.
\pr@startbox ...uter \toks@ {#2}\edef \pr@cleanup 
                                                  {\the \toks@ }\setbox \pr@...
l.272 \end{lemma}
                 
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\pr@startbox ...uter \toks@ {#2}\edef \pr@cleanup 
                                                  {\the \toks@ }\setbox \pr@...
l.272 \end{lemma}
                 
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Argument of \@refstar has an extra }.
<inserted text> 
                \par 
l.272 \end{lemma}
                 
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@refstar was complete.
<to be read again> 
                   \par 
l.272 \end{lemma}
                 
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Undefined control sequence.
\pr@startbox ...uter \toks@ {#2}\edef \pr@cleanup 
                                                  {\the \toks@ }\setbox \pr@...
l.272 \end{lemma}
                 
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Missing \endcsname inserted.
<to be read again> 
                   \endgraf 
l.272 \end{lemma}
                 
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Argument of \@firstoffive has an extra }.
<inserted text> 
                \par 
l.272 \end{lemma}
                 
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@firstoffive was complete.
<to be read again> 
                   \par 
l.272 \end{lemma}
                 
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

[13]
! Undefined control sequence.
\pr@startbox ...uter \toks@ {#2}\edef \pr@cleanup 
                                                  {\the \toks@ }\setbox \pr@...
l.279 \end{lemma}
                 
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\pr@startbox ...uter \toks@ {#2}\edef \pr@cleanup 
                                                  {\the \toks@ }\setbox \pr@...
l.279 \end{lemma}
                 
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Argument of \@refstar has an extra }.
<inserted text> 
                \par 
l.279 \end{lemma}
                 
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@refstar was complete.
<to be read again> 
                   \par 
l.279 \end{lemma}
                 
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Undefined control sequence.
\pr@startbox ...uter \toks@ {#2}\edef \pr@cleanup 
                                                  {\the \toks@ }\setbox \pr@...
l.279 \end{lemma}
                 
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Missing \endcsname inserted.
<to be read again> 
                   \endgraf 
l.279 \end{lemma}
                 
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Argument of \@firstoffive has an extra }.
<inserted text> 
                \par 
l.279 \end{lemma}
                 
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@firstoffive was complete.
<to be read again> 
                   \par 
l.279 \end{lemma}
                 
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

[14]
! Undefined control sequence.
\pr@startbox ...uter \toks@ {#2}\edef \pr@cleanup 
                                                  {\the \toks@ }\setbox \pr@...
l.332 \end{lemma}
                 
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\pr@startbox ...uter \toks@ {#2}\edef \pr@cleanup 
                                                  {\the \toks@ }\setbox \pr@...
l.332 \end{lemma}
                 
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Argument of \@refstar has an extra }.
<inserted text> 
                \par 
l.332 \end{lemma}
                 
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@refstar was complete.
<to be read again> 
                   \par 
l.332 \end{lemma}
                 
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Undefined control sequence.
\pr@startbox ...uter \toks@ {#2}\edef \pr@cleanup 
                                                  {\the \toks@ }\setbox \pr@...
l.332 \end{lemma}
                 
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Missing \endcsname inserted.
<to be read again> 
                   \endgraf 
l.332 \end{lemma}
                 
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Argument of \@firstoffive has an extra }.
<inserted text> 
                \par 
l.332 \end{lemma}
                 
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@firstoffive was complete.
<to be read again> 
                   \par 
l.332 \end{lemma}
                 
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

[15]
! Undefined control sequence.
\pr@startbox ...uter \toks@ {#2}\edef \pr@cleanup 
                                                  {\the \toks@ }\setbox \pr@...
l.349 \end{lemma}
                 
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\pr@startbox ...uter \toks@ {#2}\edef \pr@cleanup 
                                                  {\the \toks@ }\setbox \pr@...
l.349 \end{lemma}
                 
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Argument of \@refstar has an extra }.
<inserted text> 
                \par 
l.349 \end{lemma}
                 
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@refstar was complete.
<to be read again> 
                   \par 
l.349 \end{lemma}
                 
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Undefined control sequence.
\pr@startbox ...uter \toks@ {#2}\edef \pr@cleanup 
                                                  {\the \toks@ }\setbox \pr@...
l.349 \end{lemma}
                 
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Missing \endcsname inserted.
<to be read again> 
                   \endgraf 
l.349 \end{lemma}
                 
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Argument of \@firstoffive has an extra }.
<inserted text> 
                \par 
l.349 \end{lemma}
                 
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@firstoffive was complete.
<to be read again> 
                   \par 
l.349 \end{lemma}
                 
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

[16]
! Undefined control sequence.
\pr@startbox ...uter \toks@ {#2}\edef \pr@cleanup 
                                                  {\the \toks@ }\setbox \pr@...
l.357 \end{lemma}
                 
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\pr@startbox ...uter \toks@ {#2}\edef \pr@cleanup 
                                                  {\the \toks@ }\setbox \pr@...
l.357 \end{lemma}
                 
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Argument of \@refstar has an extra }.
<inserted text> 
                \par 
l.357 \end{lemma}
                 
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@refstar was complete.
<to be read again> 
                   \par 
l.357 \end{lemma}
                 
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Undefined control sequence.
\pr@startbox ...uter \toks@ {#2}\edef \pr@cleanup 
                                                  {\the \toks@ }\setbox \pr@...
l.357 \end{lemma}
                 
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Missing \endcsname inserted.
<to be read again> 
                   \endgraf 
l.357 \end{lemma}
                 
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Argument of \@firstoffive has an extra }.
<inserted text> 
                \par 
l.357 \end{lemma}
                 
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@firstoffive was complete.
<to be read again> 
                   \par 
l.357 \end{lemma}
                 
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.


Overfull \hbox (7.24147pt too wide) in alignment at lines 360--360
 [][][] []
 []

[17]
! Undefined control sequence.
\pr@startbox ...uter \toks@ {#2}\edef \pr@cleanup 
                                                  {\the \toks@ }\setbox \pr@...
l.366 \end{lemma}
                 
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\pr@startbox ...uter \toks@ {#2}\edef \pr@cleanup 
                                                  {\the \toks@ }\setbox \pr@...
l.366 \end{lemma}
                 
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Argument of \@refstar has an extra }.
<inserted text> 
                \par 
l.366 \end{lemma}
                 
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@refstar was complete.
<to be read again> 
                   \par 
l.366 \end{lemma}
                 
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Undefined control sequence.
\pr@startbox ...uter \toks@ {#2}\edef \pr@cleanup 
                                                  {\the \toks@ }\setbox \pr@...
l.366 \end{lemma}
                 
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Missing \endcsname inserted.
<to be read again> 
                   \endgraf 
l.366 \end{lemma}
                 
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Argument of \@firstoffive has an extra }.
<inserted text> 
                \par 
l.366 \end{lemma}
                 
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@firstoffive was complete.
<to be read again> 
                   \par 
l.366 \end{lemma}
                 
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

[18]
! Undefined control sequence.
\pr@startbox ...uter \toks@ {#2}\edef \pr@cleanup 
                                                  {\the \toks@ }\setbox \pr@...
l.378 \end{lemma}
                 
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\pr@startbox ...uter \toks@ {#2}\edef \pr@cleanup 
                                                  {\the \toks@ }\setbox \pr@...
l.378 \end{lemma}
                 
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Argument of \@refstar has an extra }.
<inserted text> 
                \par 
l.378 \end{lemma}
                 
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@refstar was complete.
<to be read again> 
                   \par 
l.378 \end{lemma}
                 
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Undefined control sequence.
\pr@startbox ...uter \toks@ {#2}\edef \pr@cleanup 
                                                  {\the \toks@ }\setbox \pr@...
l.378 \end{lemma}
                 
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Missing \endcsname inserted.
<to be read again> 
                   \endgraf 
l.378 \end{lemma}
                 
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Argument of \@firstoffive has an extra }.
<inserted text> 
                \par 
l.378 \end{lemma}
                 
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@firstoffive was complete.
<to be read again> 
                   \par 
l.378 \end{lemma}
                 
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.


LaTeX Warning: Reference `eqn:1' on page 11 undefined on input line 404.

[19]
! Undefined control sequence.
\pr@startbox ...uter \toks@ {#2}\edef \pr@cleanup 
                                                  {\the \toks@ }\setbox \pr@...
l.411 \end{lemma}
                 
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\pr@startbox ...uter \toks@ {#2}\edef \pr@cleanup 
                                                  {\the \toks@ }\setbox \pr@...
l.411 \end{lemma}
                 
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Argument of \@refstar has an extra }.
<inserted text> 
                \par 
l.411 \end{lemma}
                 
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@refstar was complete.
<to be read again> 
                   \par 
l.411 \end{lemma}
                 
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Undefined control sequence.
\pr@startbox ...uter \toks@ {#2}\edef \pr@cleanup 
                                                  {\the \toks@ }\setbox \pr@...
l.411 \end{lemma}
                 
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Missing \endcsname inserted.
<to be read again> 
                   \endgraf 
l.411 \end{lemma}
                 
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Argument of \@firstoffive has an extra }.
<inserted text> 
                \par 
l.411 \end{lemma}
                 
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@firstoffive was complete.
<to be read again> 
                   \par 
l.411 \end{lemma}
                 
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.


Overfull \hbox (17.94818pt too wide) in alignment at lines 437--439
 [][][] []
 []


Overfull \hbox (10.41026pt too wide) in paragraph at lines 439--442
\OT1/cmr/m/n/10.95 vertices mapping to $\OML/cmm/m/it/10.95 C[]$\OT1/cmr/m/n/10
.95 . Finally, summing over all $\OML/cmm/m/it/10.95 r$ \OT1/cmr/m/n/10.95 choi
ces of $\OML/cmm/m/it/10.95 i$\OT1/cmr/m/n/10.95 , we get at least $\OML/cmm/m/
it/10.95 r [] p[]\OMS/cmsy/m/n/10.95 j\OML/cmm/m/it/10.95 C[]\OMS/cmsy/m/n/10.9
5 j[]j\OML/cmm/m/it/10.95 D[]\OMS/cmsy/m/n/10.95 j$
 []

[20]
! Undefined control sequence.
\pr@startbox ...uter \toks@ {#2}\edef \pr@cleanup 
                                                  {\the \toks@ }\setbox \pr@...
l.462 \end{conjecture}
                      
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\pr@startbox ...uter \toks@ {#2}\edef \pr@cleanup 
                                                  {\the \toks@ }\setbox \pr@...
l.462 \end{conjecture}
                      
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Argument of \@refstar has an extra }.
<inserted text> 
                \par 
l.462 \end{conjecture}
                      
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@refstar was complete.
<to be read again> 
                   \par 
l.462 \end{conjecture}
                      
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Undefined control sequence.
\pr@startbox ...uter \toks@ {#2}\edef \pr@cleanup 
                                                  {\the \toks@ }\setbox \pr@...
l.462 \end{conjecture}
                      
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Missing \endcsname inserted.
<to be read again> 
                   \endgraf 
l.462 \end{conjecture}
                      
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.

! Argument of \@firstoffive has an extra }.
<inserted text> 
                \par 
l.462 \end{conjecture}
                      
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@firstoffive was complete.
<to be read again> 
                   \par 
l.462 \end{conjecture}
                      
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.


Underfull \hbox (badness 1142) in paragraph at lines 491--492
[]\OT1/cmr/m/n/10.95 D. Conlon, J. H. Kim, C. Lee, and J. Lee, Some advances on
 Sidorenko's conjecture,
 []

Package atveryend Info: Empty hook `BeforeClearDocument' on input line 559.
Package atveryend Info: Empty hook `AfterLastShipout' on input line 559.
(source_extraction/results/1611.02099.aux)
Package atveryend Info: Executing hook `AtVeryEndDocument' on input line 559.
Package atveryend Info: Executing hook `AtEndAfterFileList' on input line 559.
Package rerunfilecheck Info: File `1611.02099.out' has not changed.
(rerunfilecheck)             Checksum: <no file>.


LaTeX Warning: There were undefined references.

Package atveryend Info: Empty hook `AtVeryVeryEnd' on input line 559.
 )
(\end occurred when \iftrue on line 462 was incomplete)
(\end occurred when \iftrue on line 462 was incomplete)
(\end occurred when \iftrue on line 462 was incomplete)
(\end occurred when \iftrue on line 462 was incomplete)
(\end occurred when \iftrue on line 462 was incomplete)
(\end occurred when \iftrue on line 462 was incomplete)
(\end occurred when \iftrue on line 411 was incomplete)
(\end occurred when \iftrue on line 411 was incomplete)
(\end occurred when \iftrue on line 411 was incomplete)
(\end occurred when \iftrue on line 411 was incomplete)
(\end occurred when \iftrue on line 411 was incomplete)
(\end occurred when \iftrue on line 411 was incomplete)
(\end occurred when \iftrue on line 378 was incomplete)
(\end occurred when \iftrue on line 378 was incomplete)
(\end occurred when \iftrue on line 378 was incomplete)
(\end occurred when \iftrue on line 378 was incomplete)
(\end occurred when \iftrue on line 378 was incomplete)
(\end occurred when \iftrue on line 378 was incomplete)
(\end occurred when \iftrue on line 366 was incomplete)
(\end occurred when \iftrue on line 366 was incomplete)
(\end occurred when \iftrue on line 366 was incomplete)
(\end occurred when \iftrue on line 366 was incomplete)
(\end occurred when \iftrue on line 366 was incomplete)
(\end occurred when \iftrue on line 366 was incomplete)
(\end occurred when \iftrue on line 357 was incomplete)
(\end occurred when \iftrue on line 357 was incomplete)
(\end occurred when \iftrue on line 357 was incomplete)
(\end occurred when \iftrue on line 357 was incomplete)
(\end occurred when \iftrue on line 357 was incomplete)
(\end occurred when \iftrue on line 357 was incomplete)
(\end occurred when \iftrue on line 349 was incomplete)
(\end occurred when \iftrue on line 349 was incomplete)
(\end occurred when \iftrue on line 349 was incomplete)
(\end occurred when \iftrue on line 349 was incomplete)
(\end occurred when \iftrue on line 349 was incomplete)
(\end occurred when \iftrue on line 349 was incomplete)
(\end occurred when \iftrue on line 332 was incomplete)
(\end occurred when \iftrue on line 332 was incomplete)
(\end occurred when \iftrue on line 332 was incomplete)
(\end occurred when \iftrue on line 332 was incomplete)
(\end occurred when \iftrue on line 332 was incomplete)
(\end occurred when \iftrue on line 332 was incomplete)
(\end occurred when \iftrue on line 279 was incomplete)
(\end occurred when \iftrue on line 279 was incomplete)
(\end occurred when \iftrue on line 279 was incomplete)
(\end occurred when \iftrue on line 279 was incomplete)
(\end occurred when \iftrue on line 279 was incomplete)
(\end occurred when \iftrue on line 279 was incomplete)
(\end occurred when \iftrue on line 272 was incomplete)
(\end occurred when \iftrue on line 272 was incomplete)
(\end occurred when \iftrue on line 272 was incomplete)
(\end occurred when \iftrue on line 272 was incomplete)
(\end occurred when \iftrue on line 272 was incomplete)
(\end occurred when \iftrue on line 272 was incomplete)
(\end occurred when \iftrue on line 266 was incomplete)
(\end occurred when \iftrue on line 266 was incomplete)
(\end occurred when \iftrue on line 266 was incomplete)
(\end occurred when \iftrue on line 266 was incomplete)
(\end occurred when \iftrue on line 266 was incomplete)
(\end occurred when \iftrue on line 266 was incomplete)
(\end occurred when \iftrue on line 242 was incomplete)
(\end occurred when \iftrue on line 242 was incomplete)
(\end occurred when \iftrue on line 242 was incomplete)
(\end occurred when \iftrue on line 242 was incomplete)
(\end occurred when \iftrue on line 242 was incomplete)
(\end occurred when \iftrue on line 242 was incomplete)
(\end occurred when \iftrue on line 227 was incomplete)
(\end occurred when \iftrue on line 227 was incomplete)
(\end occurred when \iftrue on line 227 was incomplete)
(\end occurred when \iftrue on line 227 was incomplete)
(\end occurred when \iftrue on line 227 was incomplete)
(\end occurred when \iftrue on line 227 was incomplete)
(\end occurred when \iftrue on line 213 was incomplete)
(\end occurred when \iftrue on line 213 was incomplete)
(\end occurred when \iftrue on line 213 was incomplete)
(\end occurred when \iftrue on line 213 was incomplete)
(\end occurred when \iftrue on line 213 was incomplete)
(\end occurred when \iftrue on line 213 was incomplete)
(\end occurred when \iftrue on line 193 was incomplete)
(\end occurred when \iftrue on line 193 was incomplete)
(\end occurred when \iftrue on line 193 was incomplete)
(\end occurred when \iftrue on line 193 was incomplete)
(\end occurred when \iftrue on line 193 was incomplete)
(\end occurred when \iftrue on line 193 was incomplete)
(\end occurred when \iftrue on line 165 was incomplete)
(\end occurred when \iftrue on line 165 was incomplete)
(\end occurred when \iftrue on line 165 was incomplete)
(\end occurred when \iftrue on line 165 was incomplete)
(\end occurred when \iftrue on line 165 was incomplete)
(\end occurred when \iftrue on line 165 was incomplete)
(\end occurred when \iftrue on line 137 was incomplete)
(\end occurred when \iftrue on line 137 was incomplete)
(\end occurred when \iftrue on line 137 was incomplete)
(\end occurred when \iftrue on line 137 was incomplete)
(\end occurred when \iftrue on line 137 was incomplete)
(\end occurred when \iftrue on line 137 was incomplete)
(\end occurred when \iftrue on line 124 was incomplete)
(\end occurred when \iftrue on line 124 was incomplete)
(\end occurred when \iftrue on line 124 was incomplete)
(\end occurred when \iftrue on line 124 was incomplete)
(\end occurred when \iftrue on line 124 was incomplete)
(\end occurred when \iftrue on line 124 was incomplete)
(\end occurred when \iftrue on line 117 was incomplete)
(\end occurred when \iftrue on line 117 was incomplete)
(\end occurred when \iftrue on line 117 was incomplete)
(\end occurred when \iftrue on line 117 was incomplete)
(\end occurred when \iftrue on line 117 was incomplete)
(\end occurred when \iftrue on line 117 was incomplete)
(\end occurred when \iftrue on line 110 was incomplete)
(\end occurred when \iftrue on line 110 was incomplete)
(\end occurred when \iftrue on line 110 was incomplete)
(\end occurred when \iftrue on line 110 was incomplete)
(\end occurred when \iftrue on line 110 was incomplete)
(\end occurred when \iftrue on line 110 was incomplete)
(\end occurred when \iftrue on line 100 was incomplete)
(\end occurred when \iftrue on line 100 was incomplete)
(\end occurred when \iftrue on line 100 was incomplete)
(\end occurred when \iftrue on line 100 was incomplete)
(\end occurred when \iftrue on line 100 was incomplete)
(\end occurred when \iftrue on line 100 was incomplete) 
Here is how much of TeX's memory you used:
 7428 strings out of 494779
 106982 string characters out of 6179263
 219201 words of memory out of 5000000
 10562 multiletter control sequences out of 15000+600000
 16721 words of font info for 68 fonts, out of 8000000 for 9000
 184 hyphenation exceptions out of 8191
 32i,15n,28p,1162b,452s stack positions out of 5000i,500n,10000p,200000b,80000s
</usr/share/texlive/texm
f-dist/fonts/type1/public/amsfonts/cm/cmbx10.pfb></usr/share/texlive/texmf-dist
/fonts/type1/public/amsfonts/cm/cmex10.pfb></usr/share/texlive/texmf-dist/fonts
/type1/public/amsfonts/cm/cmmi10.pfb></usr/share/texlive/texmf-dist/fonts/type1
/public/amsfonts/cm/cmmi6.pfb></usr/share/texlive/texmf-dist/fonts/type1/public
/amsfonts/cm/cmmi8.pfb></usr/share/texlive/texmf-dist/fonts/type1/public/amsfon
ts/cm/cmr10.pfb></usr/share/texlive/texmf-dist/fonts/type1/public/amsfonts/cm/c
mr6.pfb></usr/share/texlive/texmf-dist/fonts/type1/public/amsfonts/cm/cmr8.pfb>
</usr/share/texlive/texmf-dist/fonts/type1/public/amsfonts/cm/cmsy10.pfb></usr/
share/texlive/texmf-dist/fonts/type1/public/amsfonts/cm/cmsy6.pfb></usr/share/t
exlive/texmf-dist/fonts/type1/public/amsfonts/cm/cmsy8.pfb></usr/share/texlive/
texmf-dist/fonts/type1/public/amsfonts/cm/cmti10.pfb></usr/share/texlive/texmf-
dist/fonts/type1/public/amsfonts/symbols/msbm10.pfb>
Output written on source_extraction/results/1611.02099.pdf (20 pages, 148775 by
tes).
PDF statistics:
 176 PDF objects out of 1000 (max. 8388607)
 109 compressed objects within 2 object streams
 18 named destinations out of 1000 (max. 500000)
 1 words of extra memory for PDF output out of 10000 (max. 10000000)

